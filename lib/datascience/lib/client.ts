/**
 * Data Science API
 * Use the Data Science API to organize your data science work, access data and computing resources, and build, train, deploy and manage models and model deployments. For more information, see [Data Science](https://docs.oracle.com/iaas/data-science/using/data-science.htm).

 * OpenAPI spec version: 20190101
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { paginateRecords, paginateResponses } from "oci-common";
import { DataScienceWaiter } from "./datascience-waiter";
import { composeResponse, composeRequest, GenericRetrier } from "oci-common";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum DataScienceApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class DataScienceClient {
  protected static serviceEndpointTemplate = "https://datascience.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": DataScienceWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker = null;
  protected _httpOptions: any = undefined;
  public targetService = "DataScience";

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
    }
    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20190101";
    if (this.logger) this.logger.info(`DataScienceClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      DataScienceClient.serviceEndpointTemplate,
      region,
      DataScienceClient.endpointServiceName
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      DataScienceClient.serviceEndpointTemplate,
      regionId,
      DataScienceClient.endpointServiceName
    );
  }

  /**
   * Creates a new DataScienceWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): DataScienceWaiter {
    this._waiters = new DataScienceWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): DataScienceWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Activates the model.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ActivateModelRequest
   * @return ActivateModelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ActivateModel.ts.html |here} to see how to use ActivateModel API.
   */
  public async activateModel(
    activateModelRequest: requests.ActivateModelRequest
  ): Promise<responses.ActivateModelResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#activateModel.");
    const operationName = "activateModel";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/ActivateModel";
    const pathParams = {
      "{modelId}": activateModelRequest.modelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": activateModelRequest.ifMatch,
      "opc-request-id": activateModelRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      activateModelRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models/{modelId}/actions/activate",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ActivateModelResponse>{},
        body: await response.json(),
        bodyKey: "model",
        bodyModel: model.Model,
        type: "model.Model",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Activates the model deployment.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ActivateModelDeploymentRequest
   * @return ActivateModelDeploymentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ActivateModelDeployment.ts.html |here} to see how to use ActivateModelDeployment API.
   */
  public async activateModelDeployment(
    activateModelDeploymentRequest: requests.ActivateModelDeploymentRequest
  ): Promise<responses.ActivateModelDeploymentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#activateModelDeployment.");
    const operationName = "activateModelDeployment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/ModelDeployment/ActivateModelDeployment";
    const pathParams = {
      "{modelDeploymentId}": activateModelDeploymentRequest.modelDeploymentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": activateModelDeploymentRequest.ifMatch,
      "opc-request-id": activateModelDeploymentRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      activateModelDeploymentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/modelDeployments/{modelDeploymentId}/actions/activate",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ActivateModelDeploymentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Activates the notebook session.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ActivateNotebookSessionRequest
   * @return ActivateNotebookSessionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ActivateNotebookSession.ts.html |here} to see how to use ActivateNotebookSession API.
   */
  public async activateNotebookSession(
    activateNotebookSessionRequest: requests.ActivateNotebookSessionRequest
  ): Promise<responses.ActivateNotebookSessionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#activateNotebookSession.");
    const operationName = "activateNotebookSession";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/NotebookSession/ActivateNotebookSession";
    const pathParams = {
      "{notebookSessionId}": activateNotebookSessionRequest.notebookSessionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": activateNotebookSessionRequest.ifMatch,
      "opc-request-id": activateNotebookSessionRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      activateNotebookSessionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/notebookSessions/{notebookSessionId}/actions/activate",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ActivateNotebookSessionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Cancels an IN_PROGRESS job run.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CancelJobRunRequest
   * @return CancelJobRunResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CancelJobRun.ts.html |here} to see how to use CancelJobRun API.
   */
  public async cancelJobRun(
    cancelJobRunRequest: requests.CancelJobRunRequest
  ): Promise<responses.CancelJobRunResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#cancelJobRun.");
    const operationName = "cancelJobRun";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/JobRun/CancelJobRun";
    const pathParams = {
      "{jobRunId}": cancelJobRunRequest.jobRunId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": cancelJobRunRequest.opcRequestId,
      "if-match": cancelJobRunRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      cancelJobRunRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobRuns/{jobRunId}/actions/cancelJobRun",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CancelJobRunResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Cancels a work request that has not started.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CancelWorkRequestRequest
   * @return CancelWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CancelWorkRequest.ts.html |here} to see how to use CancelWorkRequest API.
   */
  public async cancelWorkRequest(
    cancelWorkRequestRequest: requests.CancelWorkRequestRequest
  ): Promise<responses.CancelWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#cancelWorkRequest.");
    const operationName = "cancelWorkRequest";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/WorkRequest/CancelWorkRequest";
    const pathParams = {
      "{workRequestId}": cancelWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": cancelWorkRequestRequest.ifMatch,
      "opc-request-id": cancelWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      cancelWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CancelWorkRequestResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Changes a job's compartment
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeJobCompartmentRequest
   * @return ChangeJobCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ChangeJobCompartment.ts.html |here} to see how to use ChangeJobCompartment API.
   */
  public async changeJobCompartment(
    changeJobCompartmentRequest: requests.ChangeJobCompartmentRequest
  ): Promise<responses.ChangeJobCompartmentResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#changeJobCompartment.");
    const operationName = "changeJobCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Job/ChangeJobCompartment";
    const pathParams = {
      "{jobId}": changeJobCompartmentRequest.jobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeJobCompartmentRequest.ifMatch,
      "opc-request-id": changeJobCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeJobCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs/{jobId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeJobCompartmentRequest.changeJobCompartmentDetails,
        "ChangeJobCompartmentDetails",
        model.ChangeJobCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeJobCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Changes a job run's compartment
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeJobRunCompartmentRequest
   * @return ChangeJobRunCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ChangeJobRunCompartment.ts.html |here} to see how to use ChangeJobRunCompartment API.
   */
  public async changeJobRunCompartment(
    changeJobRunCompartmentRequest: requests.ChangeJobRunCompartmentRequest
  ): Promise<responses.ChangeJobRunCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#changeJobRunCompartment.");
    const operationName = "changeJobRunCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/JobRun/ChangeJobRunCompartment";
    const pathParams = {
      "{jobRunId}": changeJobRunCompartmentRequest.jobRunId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeJobRunCompartmentRequest.ifMatch,
      "opc-request-id": changeJobRunCompartmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeJobRunCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobRuns/{jobRunId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeJobRunCompartmentRequest.changeJobRunCompartmentDetails,
        "ChangeJobRunCompartmentDetails",
        model.ChangeJobRunCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeJobRunCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a model resource into a different compartment.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeModelCompartmentRequest
   * @return ChangeModelCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ChangeModelCompartment.ts.html |here} to see how to use ChangeModelCompartment API.
   */
  public async changeModelCompartment(
    changeModelCompartmentRequest: requests.ChangeModelCompartmentRequest
  ): Promise<responses.ChangeModelCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#changeModelCompartment.");
    const operationName = "changeModelCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/ChangeModelCompartment";
    const pathParams = {
      "{modelId}": changeModelCompartmentRequest.modelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeModelCompartmentRequest.ifMatch,
      "opc-request-id": changeModelCompartmentRequest.opcRequestId,
      "opc-retry-token": changeModelCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeModelCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models/{modelId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeModelCompartmentRequest.changeModelCompartmentDetails,
        "ChangeModelCompartmentDetails",
        model.ChangeModelCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeModelCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a model deployment into a different compartment. When provided, If-Match is checked against ETag values of the resource.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeModelDeploymentCompartmentRequest
   * @return ChangeModelDeploymentCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ChangeModelDeploymentCompartment.ts.html |here} to see how to use ChangeModelDeploymentCompartment API.
   */
  public async changeModelDeploymentCompartment(
    changeModelDeploymentCompartmentRequest: requests.ChangeModelDeploymentCompartmentRequest
  ): Promise<responses.ChangeModelDeploymentCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#changeModelDeploymentCompartment.");
    const operationName = "changeModelDeploymentCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/ModelDeployment/ChangeModelDeploymentCompartment";
    const pathParams = {
      "{modelDeploymentId}": changeModelDeploymentCompartmentRequest.modelDeploymentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeModelDeploymentCompartmentRequest.ifMatch,
      "opc-request-id": changeModelDeploymentCompartmentRequest.opcRequestId,
      "opc-retry-token": changeModelDeploymentCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeModelDeploymentCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/modelDeployments/{modelDeploymentId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeModelDeploymentCompartmentRequest.changeModelDeploymentCompartmentDetails,
        "ChangeModelDeploymentCompartmentDetails",
        model.ChangeModelDeploymentCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeModelDeploymentCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a notebook session resource into a different compartment.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeNotebookSessionCompartmentRequest
   * @return ChangeNotebookSessionCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ChangeNotebookSessionCompartment.ts.html |here} to see how to use ChangeNotebookSessionCompartment API.
   */
  public async changeNotebookSessionCompartment(
    changeNotebookSessionCompartmentRequest: requests.ChangeNotebookSessionCompartmentRequest
  ): Promise<responses.ChangeNotebookSessionCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#changeNotebookSessionCompartment.");
    const operationName = "changeNotebookSessionCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/NotebookSession/ChangeNotebookSessionCompartment";
    const pathParams = {
      "{notebookSessionId}": changeNotebookSessionCompartmentRequest.notebookSessionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeNotebookSessionCompartmentRequest.ifMatch,
      "opc-request-id": changeNotebookSessionCompartmentRequest.opcRequestId,
      "opc-retry-token": changeNotebookSessionCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeNotebookSessionCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/notebookSessions/{notebookSessionId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeNotebookSessionCompartmentRequest.changeNotebookSessionCompartmentDetails,
        "ChangeNotebookSessionCompartmentDetails",
        model.ChangeNotebookSessionCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeNotebookSessionCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a project resource into a different compartment.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeProjectCompartmentRequest
   * @return ChangeProjectCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ChangeProjectCompartment.ts.html |here} to see how to use ChangeProjectCompartment API.
   */
  public async changeProjectCompartment(
    changeProjectCompartmentRequest: requests.ChangeProjectCompartmentRequest
  ): Promise<responses.ChangeProjectCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#changeProjectCompartment.");
    const operationName = "changeProjectCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Project/ChangeProjectCompartment";
    const pathParams = {
      "{projectId}": changeProjectCompartmentRequest.projectId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeProjectCompartmentRequest.ifMatch,
      "opc-request-id": changeProjectCompartmentRequest.opcRequestId,
      "opc-retry-token": changeProjectCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeProjectCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/projects/{projectId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeProjectCompartmentRequest.changeProjectCompartmentDetails,
        "ChangeProjectCompartmentDetails",
        model.ChangeProjectCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeProjectCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a job.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateJobRequest
   * @return CreateJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CreateJob.ts.html |here} to see how to use CreateJob API.
   */
  public async createJob(
    createJobRequest: requests.CreateJobRequest
  ): Promise<responses.CreateJobResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#createJob.");
    const operationName = "createJob";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Job/CreateJob";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createJobRequest.opcRequestId,
      "opc-retry-token": createJobRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createJobRequest.createJobDetails,
        "CreateJobDetails",
        model.CreateJobDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateJobResponse>{},
        body: await response.json(),
        bodyKey: "job",
        bodyModel: model.Job,
        type: "model.Job",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Uploads a job artifact.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateJobArtifactRequest
   * @return CreateJobArtifactResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CreateJobArtifact.ts.html |here} to see how to use CreateJobArtifact API.
   */
  public async createJobArtifact(
    createJobArtifactRequest: requests.CreateJobArtifactRequest
  ): Promise<responses.CreateJobArtifactResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#createJobArtifact.");
    const operationName = "createJobArtifact";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Job/CreateJobArtifact";
    const pathParams = {
      "{jobId}": createJobArtifactRequest.jobId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": createJobArtifactRequest.opcRequestId,
      "opc-retry-token": createJobArtifactRequest.opcRetryToken,
      "content-length": createJobArtifactRequest.contentLength,
      "content-disposition": createJobArtifactRequest.contentDisposition
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createJobArtifactRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs/{jobId}/artifact",
      method: "POST",
      bodyContent: createJobArtifactRequest.jobArtifact,
      pathParams: pathParams,
      headerParams: headerParams,
      backupBinaryBody: retrier.backUpBinaryBody,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink,
        true
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateJobArtifactResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a job run.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateJobRunRequest
   * @return CreateJobRunResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CreateJobRun.ts.html |here} to see how to use CreateJobRun API.
   */
  public async createJobRun(
    createJobRunRequest: requests.CreateJobRunRequest
  ): Promise<responses.CreateJobRunResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#createJobRun.");
    const operationName = "createJobRun";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/JobRun/CreateJobRun";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createJobRunRequest.opcRequestId,
      "opc-retry-token": createJobRunRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createJobRunRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobRuns",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createJobRunRequest.createJobRunDetails,
        "CreateJobRunDetails",
        model.CreateJobRunDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateJobRunResponse>{},
        body: await response.json(),
        bodyKey: "jobRun",
        bodyModel: model.JobRun,
        type: "model.JobRun",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new model.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateModelRequest
   * @return CreateModelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CreateModel.ts.html |here} to see how to use CreateModel API.
   */
  public async createModel(
    createModelRequest: requests.CreateModelRequest
  ): Promise<responses.CreateModelResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#createModel.");
    const operationName = "createModel";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/CreateModel";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createModelRequest.opcRequestId,
      "opc-retry-token": createModelRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createModelRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createModelRequest.createModelDetails,
        "CreateModelDetails",
        model.CreateModelDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateModelResponse>{},
        body: await response.json(),
        bodyKey: "model",
        bodyModel: model.Model,
        type: "model.Model",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates model artifact for specified model.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateModelArtifactRequest
   * @return CreateModelArtifactResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CreateModelArtifact.ts.html |here} to see how to use CreateModelArtifact API.
   */
  public async createModelArtifact(
    createModelArtifactRequest: requests.CreateModelArtifactRequest
  ): Promise<responses.CreateModelArtifactResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#createModelArtifact.");
    const operationName = "createModelArtifact";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/CreateModelArtifact";
    const pathParams = {
      "{modelId}": createModelArtifactRequest.modelId
    };

    const queryParams = {};

    let headerParams = {
      "opc-request-id": createModelArtifactRequest.opcRequestId,
      "opc-retry-token": createModelArtifactRequest.opcRetryToken,
      "content-length": createModelArtifactRequest.contentLength,
      "content-disposition": createModelArtifactRequest.contentDisposition,
      "if-match": createModelArtifactRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createModelArtifactRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models/{modelId}/artifact",
      method: "POST",
      bodyContent: createModelArtifactRequest.modelArtifact,
      pathParams: pathParams,
      headerParams: headerParams,
      backupBinaryBody: retrier.backUpBinaryBody,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink,
        true
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateModelArtifactResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new model deployment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateModelDeploymentRequest
   * @return CreateModelDeploymentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CreateModelDeployment.ts.html |here} to see how to use CreateModelDeployment API.
   */
  public async createModelDeployment(
    createModelDeploymentRequest: requests.CreateModelDeploymentRequest
  ): Promise<responses.CreateModelDeploymentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#createModelDeployment.");
    const operationName = "createModelDeployment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/ModelDeployment/CreateModelDeployment";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createModelDeploymentRequest.opcRequestId,
      "opc-retry-token": createModelDeploymentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createModelDeploymentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/modelDeployments",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createModelDeploymentRequest.createModelDeploymentDetails,
        "CreateModelDeploymentDetails",
        model.CreateModelDeploymentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateModelDeploymentResponse>{},
        body: await response.json(),
        bodyKey: "modelDeployment",
        bodyModel: model.ModelDeployment,
        type: "model.ModelDeployment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates provenance information for the specified model.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateModelProvenanceRequest
   * @return CreateModelProvenanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CreateModelProvenance.ts.html |here} to see how to use CreateModelProvenance API.
   */
  public async createModelProvenance(
    createModelProvenanceRequest: requests.CreateModelProvenanceRequest
  ): Promise<responses.CreateModelProvenanceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#createModelProvenance.");
    const operationName = "createModelProvenance";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/CreateModelProvenance";
    const pathParams = {
      "{modelId}": createModelProvenanceRequest.modelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createModelProvenanceRequest.opcRequestId,
      "opc-retry-token": createModelProvenanceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createModelProvenanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models/{modelId}/provenance",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createModelProvenanceRequest.createModelProvenanceDetails,
        "CreateModelProvenanceDetails",
        model.CreateModelProvenanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateModelProvenanceResponse>{},
        body: await response.json(),
        bodyKey: "modelProvenance",
        bodyModel: model.ModelProvenance,
        type: "model.ModelProvenance",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new notebook session.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateNotebookSessionRequest
   * @return CreateNotebookSessionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CreateNotebookSession.ts.html |here} to see how to use CreateNotebookSession API.
   */
  public async createNotebookSession(
    createNotebookSessionRequest: requests.CreateNotebookSessionRequest
  ): Promise<responses.CreateNotebookSessionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#createNotebookSession.");
    const operationName = "createNotebookSession";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/NotebookSession/CreateNotebookSession";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createNotebookSessionRequest.opcRequestId,
      "opc-retry-token": createNotebookSessionRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createNotebookSessionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/notebookSessions",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createNotebookSessionRequest.createNotebookSessionDetails,
        "CreateNotebookSessionDetails",
        model.CreateNotebookSessionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateNotebookSessionResponse>{},
        body: await response.json(),
        bodyKey: "notebookSession",
        bodyModel: model.NotebookSession,
        type: "model.NotebookSession",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new project.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateProjectRequest
   * @return CreateProjectResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/CreateProject.ts.html |here} to see how to use CreateProject API.
   */
  public async createProject(
    createProjectRequest: requests.CreateProjectRequest
  ): Promise<responses.CreateProjectResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#createProject.");
    const operationName = "createProject";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Project/CreateProject";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createProjectRequest.opcRequestId,
      "opc-retry-token": createProjectRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createProjectRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/projects",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createProjectRequest.createProjectDetails,
        "CreateProjectDetails",
        model.CreateProjectDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateProjectResponse>{},
        body: await response.json(),
        bodyKey: "project",
        bodyModel: model.Project,
        type: "model.Project",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deactivates the model.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeactivateModelRequest
   * @return DeactivateModelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DeactivateModel.ts.html |here} to see how to use DeactivateModel API.
   */
  public async deactivateModel(
    deactivateModelRequest: requests.DeactivateModelRequest
  ): Promise<responses.DeactivateModelResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#deactivateModel.");
    const operationName = "deactivateModel";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/DeactivateModel";
    const pathParams = {
      "{modelId}": deactivateModelRequest.modelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deactivateModelRequest.ifMatch,
      "opc-request-id": deactivateModelRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deactivateModelRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models/{modelId}/actions/deactivate",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeactivateModelResponse>{},
        body: await response.json(),
        bodyKey: "model",
        bodyModel: model.Model,
        type: "model.Model",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deactivates the model deployment.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeactivateModelDeploymentRequest
   * @return DeactivateModelDeploymentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DeactivateModelDeployment.ts.html |here} to see how to use DeactivateModelDeployment API.
   */
  public async deactivateModelDeployment(
    deactivateModelDeploymentRequest: requests.DeactivateModelDeploymentRequest
  ): Promise<responses.DeactivateModelDeploymentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#deactivateModelDeployment.");
    const operationName = "deactivateModelDeployment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/ModelDeployment/DeactivateModelDeployment";
    const pathParams = {
      "{modelDeploymentId}": deactivateModelDeploymentRequest.modelDeploymentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deactivateModelDeploymentRequest.ifMatch,
      "opc-request-id": deactivateModelDeploymentRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deactivateModelDeploymentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/modelDeployments/{modelDeploymentId}/actions/deactivate",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeactivateModelDeploymentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deactivates the notebook session.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeactivateNotebookSessionRequest
   * @return DeactivateNotebookSessionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DeactivateNotebookSession.ts.html |here} to see how to use DeactivateNotebookSession API.
   */
  public async deactivateNotebookSession(
    deactivateNotebookSessionRequest: requests.DeactivateNotebookSessionRequest
  ): Promise<responses.DeactivateNotebookSessionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#deactivateNotebookSession.");
    const operationName = "deactivateNotebookSession";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/NotebookSession/DeactivateNotebookSession";
    const pathParams = {
      "{notebookSessionId}": deactivateNotebookSessionRequest.notebookSessionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deactivateNotebookSessionRequest.ifMatch,
      "opc-request-id": deactivateNotebookSessionRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deactivateNotebookSessionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/notebookSessions/{notebookSessionId}/actions/deactivate",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeactivateNotebookSessionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a job.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteJobRequest
   * @return DeleteJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DeleteJob.ts.html |here} to see how to use DeleteJob API.
   */
  public async deleteJob(
    deleteJobRequest: requests.DeleteJobRequest
  ): Promise<responses.DeleteJobResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#deleteJob.");
    const operationName = "deleteJob";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Job/DeleteJob";
    const pathParams = {
      "{jobId}": deleteJobRequest.jobId
    };

    const queryParams = {
      "deleteRelatedJobRuns": deleteJobRequest.deleteRelatedJobRuns
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteJobRequest.ifMatch,
      "opc-request-id": deleteJobRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs/{jobId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteJobResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a job run.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteJobRunRequest
   * @return DeleteJobRunResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DeleteJobRun.ts.html |here} to see how to use DeleteJobRun API.
   */
  public async deleteJobRun(
    deleteJobRunRequest: requests.DeleteJobRunRequest
  ): Promise<responses.DeleteJobRunResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#deleteJobRun.");
    const operationName = "deleteJobRun";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/JobRun/DeleteJobRun";
    const pathParams = {
      "{jobRunId}": deleteJobRunRequest.jobRunId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteJobRunRequest.ifMatch,
      "opc-request-id": deleteJobRunRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteJobRunRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobRuns/{jobRunId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteJobRunResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified model.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteModelRequest
   * @return DeleteModelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DeleteModel.ts.html |here} to see how to use DeleteModel API.
   */
  public async deleteModel(
    deleteModelRequest: requests.DeleteModelRequest
  ): Promise<responses.DeleteModelResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#deleteModel.");
    const operationName = "deleteModel";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/DeleteModel";
    const pathParams = {
      "{modelId}": deleteModelRequest.modelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteModelRequest.ifMatch,
      "opc-request-id": deleteModelRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteModelRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models/{modelId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteModelResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified model deployment. Any unsaved work in this model deployment is lost.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteModelDeploymentRequest
   * @return DeleteModelDeploymentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DeleteModelDeployment.ts.html |here} to see how to use DeleteModelDeployment API.
   */
  public async deleteModelDeployment(
    deleteModelDeploymentRequest: requests.DeleteModelDeploymentRequest
  ): Promise<responses.DeleteModelDeploymentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#deleteModelDeployment.");
    const operationName = "deleteModelDeployment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/ModelDeployment/DeleteModelDeployment";
    const pathParams = {
      "{modelDeploymentId}": deleteModelDeploymentRequest.modelDeploymentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteModelDeploymentRequest.ifMatch,
      "opc-request-id": deleteModelDeploymentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteModelDeploymentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/modelDeployments/{modelDeploymentId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteModelDeploymentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified notebook session. Any unsaved work in this notebook session are lost.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteNotebookSessionRequest
   * @return DeleteNotebookSessionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DeleteNotebookSession.ts.html |here} to see how to use DeleteNotebookSession API.
   */
  public async deleteNotebookSession(
    deleteNotebookSessionRequest: requests.DeleteNotebookSessionRequest
  ): Promise<responses.DeleteNotebookSessionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#deleteNotebookSession.");
    const operationName = "deleteNotebookSession";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/NotebookSession/DeleteNotebookSession";
    const pathParams = {
      "{notebookSessionId}": deleteNotebookSessionRequest.notebookSessionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteNotebookSessionRequest.ifMatch,
      "opc-request-id": deleteNotebookSessionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteNotebookSessionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/notebookSessions/{notebookSessionId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteNotebookSessionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified project. This operation fails unless all associated resources (notebook sessions or models) are in a DELETED state. You must delete all associated resources before deleting a project.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteProjectRequest
   * @return DeleteProjectResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/DeleteProject.ts.html |here} to see how to use DeleteProject API.
   */
  public async deleteProject(
    deleteProjectRequest: requests.DeleteProjectRequest
  ): Promise<responses.DeleteProjectResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#deleteProject.");
    const operationName = "deleteProject";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Project/DeleteProject";
    const pathParams = {
      "{projectId}": deleteProjectRequest.projectId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteProjectRequest.ifMatch,
      "opc-request-id": deleteProjectRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteProjectRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/projects/{projectId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteProjectResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Export model artifact from source to the service bucket
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ExportModelArtifactRequest
   * @return ExportModelArtifactResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ExportModelArtifact.ts.html |here} to see how to use ExportModelArtifact API.
   */
  public async exportModelArtifact(
    exportModelArtifactRequest: requests.ExportModelArtifactRequest
  ): Promise<responses.ExportModelArtifactResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#exportModelArtifact.");
    const operationName = "exportModelArtifact";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/ExportModelArtifact";
    const pathParams = {
      "{modelId}": exportModelArtifactRequest.modelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": exportModelArtifactRequest.opcRequestId,
      "opc-retry-token": exportModelArtifactRequest.opcRetryToken,
      "if-match": exportModelArtifactRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      exportModelArtifactRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models/{modelId}/actions/exportArtifact",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        exportModelArtifactRequest.exportModelArtifactDetails,
        "ExportModelArtifactDetails",
        model.ExportModelArtifactDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ExportModelArtifactResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a job.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetJobRequest
   * @return GetJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetJob.ts.html |here} to see how to use GetJob API.
   */
  public async getJob(getJobRequest: requests.GetJobRequest): Promise<responses.GetJobResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#getJob.");
    const operationName = "getJob";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Job/GetJob";
    const pathParams = {
      "{jobId}": getJobRequest.jobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getJobRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs/{jobId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetJobResponse>{},
        body: await response.json(),
        bodyKey: "job",
        bodyModel: model.Job,
        type: "model.Job",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Downloads job artifact content for specified job.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetJobArtifactContentRequest
   * @return GetJobArtifactContentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetJobArtifactContent.ts.html |here} to see how to use GetJobArtifactContent API.
   */
  public async getJobArtifactContent(
    getJobArtifactContentRequest: requests.GetJobArtifactContentRequest
  ): Promise<responses.GetJobArtifactContentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#getJobArtifactContent.");
    const operationName = "getJobArtifactContent";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Job/GetJobArtifactContent";
    const pathParams = {
      "{jobId}": getJobArtifactContentRequest.jobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getJobArtifactContentRequest.opcRequestId,
      "range": getJobArtifactContentRequest.range
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getJobArtifactContentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs/{jobId}/artifact/content",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetJobArtifactContentResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("content-length"),
            key: "contentLength",
            dataType: "number"
          },
          {
            value: response.headers.get("content-md5"),
            key: "contentMd5",
            dataType: "string"
          },
          {
            value: response.headers.get("last-modified"),
            key: "lastModified",
            dataType: "Date"
          },
          {
            value: response.headers.get("content-disposition"),
            key: "contentDisposition",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a job run.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetJobRunRequest
   * @return GetJobRunResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetJobRun.ts.html |here} to see how to use GetJobRun API.
   */
  public async getJobRun(
    getJobRunRequest: requests.GetJobRunRequest
  ): Promise<responses.GetJobRunResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#getJobRun.");
    const operationName = "getJobRun";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/JobRun/GetJobRun";
    const pathParams = {
      "{jobRunId}": getJobRunRequest.jobRunId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getJobRunRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getJobRunRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobRuns/{jobRunId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetJobRunResponse>{},
        body: await response.json(),
        bodyKey: "jobRun",
        bodyModel: model.JobRun,
        type: "model.JobRun",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified model's information.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetModelRequest
   * @return GetModelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetModel.ts.html |here} to see how to use GetModel API.
   */
  public async getModel(
    getModelRequest: requests.GetModelRequest
  ): Promise<responses.GetModelResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#getModel.");
    const operationName = "getModel";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/GetModel";
    const pathParams = {
      "{modelId}": getModelRequest.modelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getModelRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getModelRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models/{modelId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetModelResponse>{},
        body: await response.json(),
        bodyKey: "model",
        bodyModel: model.Model,
        type: "model.Model",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Downloads model artifact content for specified model.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetModelArtifactContentRequest
   * @return GetModelArtifactContentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetModelArtifactContent.ts.html |here} to see how to use GetModelArtifactContent API.
   */
  public async getModelArtifactContent(
    getModelArtifactContentRequest: requests.GetModelArtifactContentRequest
  ): Promise<responses.GetModelArtifactContentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#getModelArtifactContent.");
    const operationName = "getModelArtifactContent";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/GetModelArtifactContent";
    const pathParams = {
      "{modelId}": getModelArtifactContentRequest.modelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getModelArtifactContentRequest.opcRequestId,
      "range": getModelArtifactContentRequest.range
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getModelArtifactContentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models/{modelId}/artifact/content",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetModelArtifactContentResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("content-length"),
            key: "contentLength",
            dataType: "number"
          },
          {
            value: response.headers.get("content-disposition"),
            key: "contentDisposition",
            dataType: "string"
          },
          {
            value: response.headers.get("content-md5"),
            key: "contentMd5",
            dataType: "string"
          },
          {
            value: response.headers.get("last-modified"),
            key: "lastModified",
            dataType: "Date"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves the model deployment for the specified `modelDeploymentId`.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetModelDeploymentRequest
   * @return GetModelDeploymentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetModelDeployment.ts.html |here} to see how to use GetModelDeployment API.
   */
  public async getModelDeployment(
    getModelDeploymentRequest: requests.GetModelDeploymentRequest
  ): Promise<responses.GetModelDeploymentResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#getModelDeployment.");
    const operationName = "getModelDeployment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/ModelDeployment/GetModelDeployment";
    const pathParams = {
      "{modelDeploymentId}": getModelDeploymentRequest.modelDeploymentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getModelDeploymentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getModelDeploymentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/modelDeployments/{modelDeploymentId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetModelDeploymentResponse>{},
        body: await response.json(),
        bodyKey: "modelDeployment",
        bodyModel: model.ModelDeployment,
        type: "model.ModelDeployment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets provenance information for specified model.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetModelProvenanceRequest
   * @return GetModelProvenanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetModelProvenance.ts.html |here} to see how to use GetModelProvenance API.
   */
  public async getModelProvenance(
    getModelProvenanceRequest: requests.GetModelProvenanceRequest
  ): Promise<responses.GetModelProvenanceResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#getModelProvenance.");
    const operationName = "getModelProvenance";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/GetModelProvenance";
    const pathParams = {
      "{modelId}": getModelProvenanceRequest.modelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getModelProvenanceRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getModelProvenanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models/{modelId}/provenance",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetModelProvenanceResponse>{},
        body: await response.json(),
        bodyKey: "modelProvenance",
        bodyModel: model.ModelProvenance,
        type: "model.ModelProvenance",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified notebook session's information.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetNotebookSessionRequest
   * @return GetNotebookSessionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetNotebookSession.ts.html |here} to see how to use GetNotebookSession API.
   */
  public async getNotebookSession(
    getNotebookSessionRequest: requests.GetNotebookSessionRequest
  ): Promise<responses.GetNotebookSessionResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#getNotebookSession.");
    const operationName = "getNotebookSession";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/NotebookSession/GetNotebookSession";
    const pathParams = {
      "{notebookSessionId}": getNotebookSessionRequest.notebookSessionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getNotebookSessionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getNotebookSessionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/notebookSessions/{notebookSessionId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetNotebookSessionResponse>{},
        body: await response.json(),
        bodyKey: "notebookSession",
        bodyModel: model.NotebookSession,
        type: "model.NotebookSession",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified project's information.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetProjectRequest
   * @return GetProjectResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetProject.ts.html |here} to see how to use GetProject API.
   */
  public async getProject(
    getProjectRequest: requests.GetProjectRequest
  ): Promise<responses.GetProjectResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#getProject.");
    const operationName = "getProject";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Project/GetProject";
    const pathParams = {
      "{projectId}": getProjectRequest.projectId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getProjectRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getProjectRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/projects/{projectId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetProjectResponse>{},
        body: await response.json(),
        bodyKey: "project",
        bodyModel: model.Project,
        type: "model.Project",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified work request's information.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#getWorkRequest.");
    const operationName = "getWorkRequest";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/WorkRequest/GetWorkRequest";
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets job artifact metadata.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param HeadJobArtifactRequest
   * @return HeadJobArtifactResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/HeadJobArtifact.ts.html |here} to see how to use HeadJobArtifact API.
   */
  public async headJobArtifact(
    headJobArtifactRequest: requests.HeadJobArtifactRequest
  ): Promise<responses.HeadJobArtifactResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#headJobArtifact.");
    const operationName = "headJobArtifact";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Job/HeadJobArtifact";
    const pathParams = {
      "{jobId}": headJobArtifactRequest.jobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": headJobArtifactRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      headJobArtifactRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs/{jobId}/artifact/content",
      method: "HEAD",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.HeadJobArtifactResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("content-length"),
            key: "contentLength",
            dataType: "number"
          },
          {
            value: response.headers.get("content-md5"),
            key: "contentMd5",
            dataType: "string"
          },
          {
            value: response.headers.get("content-disposition"),
            key: "contentDisposition",
            dataType: "string"
          },
          {
            value: response.headers.get("last-modified"),
            key: "lastModified",
            dataType: "Date"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets model artifact metadata for specified model.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param HeadModelArtifactRequest
   * @return HeadModelArtifactResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/HeadModelArtifact.ts.html |here} to see how to use HeadModelArtifact API.
   */
  public async headModelArtifact(
    headModelArtifactRequest: requests.HeadModelArtifactRequest
  ): Promise<responses.HeadModelArtifactResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#headModelArtifact.");
    const operationName = "headModelArtifact";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/HeadModelArtifact";
    const pathParams = {
      "{modelId}": headModelArtifactRequest.modelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": headModelArtifactRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      headModelArtifactRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models/{modelId}/artifact/content",
      method: "HEAD",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.HeadModelArtifactResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("content-length"),
            key: "contentLength",
            dataType: "number"
          },
          {
            value: response.headers.get("content-disposition"),
            key: "contentDisposition",
            dataType: "string"
          },
          {
            value: response.headers.get("content-md5"),
            key: "contentMd5",
            dataType: "string"
          },
          {
            value: response.headers.get("last-modified"),
            key: "lastModified",
            dataType: "Date"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Import model artifact from service bucket
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ImportModelArtifactRequest
   * @return ImportModelArtifactResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ImportModelArtifact.ts.html |here} to see how to use ImportModelArtifact API.
   */
  public async importModelArtifact(
    importModelArtifactRequest: requests.ImportModelArtifactRequest
  ): Promise<responses.ImportModelArtifactResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#importModelArtifact.");
    const operationName = "importModelArtifact";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/ImportModelArtifact";
    const pathParams = {
      "{modelId}": importModelArtifactRequest.modelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": importModelArtifactRequest.opcRequestId,
      "if-match": importModelArtifactRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      importModelArtifactRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models/{modelId}/actions/importArtifact",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        importModelArtifactRequest.importModelArtifactDetails,
        "ImportModelArtifactDetails",
        model.ImportModelArtifactDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ImportModelArtifactResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * List fast launch capable job configs in the specified compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListFastLaunchJobConfigsRequest
   * @return ListFastLaunchJobConfigsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListFastLaunchJobConfigs.ts.html |here} to see how to use ListFastLaunchJobConfigs API.
   */
  public async listFastLaunchJobConfigs(
    listFastLaunchJobConfigsRequest: requests.ListFastLaunchJobConfigsRequest
  ): Promise<responses.ListFastLaunchJobConfigsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#listFastLaunchJobConfigs.");
    const operationName = "listFastLaunchJobConfigs";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/FastLaunchJobConfigSummary/ListFastLaunchJobConfigs";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listFastLaunchJobConfigsRequest.compartmentId,
      "limit": listFastLaunchJobConfigsRequest.limit,
      "page": listFastLaunchJobConfigsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listFastLaunchJobConfigsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listFastLaunchJobConfigsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/fastLaunchJobConfigs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListFastLaunchJobConfigsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.FastLaunchJobConfigSummary,
        type: "Array<model.FastLaunchJobConfigSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listFastLaunchJobConfigsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.FastLaunchJobConfigSummary objects
   * contained in responses from the listFastLaunchJobConfigs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllFastLaunchJobConfigs(
    request: requests.ListFastLaunchJobConfigsRequest
  ): AsyncIterableIterator<model.FastLaunchJobConfigSummary> {
    return paginateRecords(request, req => this.listFastLaunchJobConfigs(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listFastLaunchJobConfigsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listFastLaunchJobConfigs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllFastLaunchJobConfigsResponses(
    request: requests.ListFastLaunchJobConfigsRequest
  ): AsyncIterableIterator<responses.ListFastLaunchJobConfigsResponse> {
    return paginateResponses(request, req => this.listFastLaunchJobConfigs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.FastLaunchJobConfigSummary objects
   * contained in responses from the listFastLaunchJobConfigs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listFastLaunchJobConfigsRecordIterator(
    request: requests.ListFastLaunchJobConfigsRequest
  ): AsyncIterableIterator<model.FastLaunchJobConfigSummary> {
    return paginateRecords(request, req => this.listFastLaunchJobConfigs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listFastLaunchJobConfigs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listFastLaunchJobConfigsResponseIterator(
    request: requests.ListFastLaunchJobConfigsRequest
  ): AsyncIterableIterator<responses.ListFastLaunchJobConfigsResponse> {
    return paginateResponses(request, req => this.listFastLaunchJobConfigs(req));
  }

  /**
   * List out job runs.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListJobRunsRequest
   * @return ListJobRunsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListJobRuns.ts.html |here} to see how to use ListJobRuns API.
   */
  public async listJobRuns(
    listJobRunsRequest: requests.ListJobRunsRequest
  ): Promise<responses.ListJobRunsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#listJobRuns.");
    const operationName = "listJobRuns";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/JobRunSummary/ListJobRuns";
    const pathParams = {};

    const queryParams = {
      "id": listJobRunsRequest.id,
      "jobId": listJobRunsRequest.jobId,
      "compartmentId": listJobRunsRequest.compartmentId,
      "createdBy": listJobRunsRequest.createdBy,
      "displayName": listJobRunsRequest.displayName,
      "limit": listJobRunsRequest.limit,
      "page": listJobRunsRequest.page,
      "sortOrder": listJobRunsRequest.sortOrder,
      "sortBy": listJobRunsRequest.sortBy,
      "lifecycleState": listJobRunsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listJobRunsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listJobRunsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobRuns",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListJobRunsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.JobRunSummary,
        type: "Array<model.JobRunSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listJobRunsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.JobRunSummary objects
   * contained in responses from the listJobRuns operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllJobRuns(
    request: requests.ListJobRunsRequest
  ): AsyncIterableIterator<model.JobRunSummary> {
    return paginateRecords(request, req => this.listJobRuns(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listJobRunsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listJobRuns operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllJobRunsResponses(
    request: requests.ListJobRunsRequest
  ): AsyncIterableIterator<responses.ListJobRunsResponse> {
    return paginateResponses(request, req => this.listJobRuns(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.JobRunSummary objects
   * contained in responses from the listJobRuns operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listJobRunsRecordIterator(
    request: requests.ListJobRunsRequest
  ): AsyncIterableIterator<model.JobRunSummary> {
    return paginateRecords(request, req => this.listJobRuns(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listJobRuns operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listJobRunsResponseIterator(
    request: requests.ListJobRunsRequest
  ): AsyncIterableIterator<responses.ListJobRunsResponse> {
    return paginateResponses(request, req => this.listJobRuns(req));
  }

  /**
   * List job shapes available in the specified compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListJobShapesRequest
   * @return ListJobShapesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListJobShapes.ts.html |here} to see how to use ListJobShapes API.
   */
  public async listJobShapes(
    listJobShapesRequest: requests.ListJobShapesRequest
  ): Promise<responses.ListJobShapesResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#listJobShapes.");
    const operationName = "listJobShapes";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/JobShapeSummary/ListJobShapes";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listJobShapesRequest.compartmentId,
      "limit": listJobShapesRequest.limit,
      "page": listJobShapesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listJobShapesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listJobShapesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobShapes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListJobShapesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.JobShapeSummary,
        type: "Array<model.JobShapeSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listJobShapesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.JobShapeSummary objects
   * contained in responses from the listJobShapes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllJobShapes(
    request: requests.ListJobShapesRequest
  ): AsyncIterableIterator<model.JobShapeSummary> {
    return paginateRecords(request, req => this.listJobShapes(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listJobShapesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listJobShapes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllJobShapesResponses(
    request: requests.ListJobShapesRequest
  ): AsyncIterableIterator<responses.ListJobShapesResponse> {
    return paginateResponses(request, req => this.listJobShapes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.JobShapeSummary objects
   * contained in responses from the listJobShapes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listJobShapesRecordIterator(
    request: requests.ListJobShapesRequest
  ): AsyncIterableIterator<model.JobShapeSummary> {
    return paginateRecords(request, req => this.listJobShapes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listJobShapes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listJobShapesResponseIterator(
    request: requests.ListJobShapesRequest
  ): AsyncIterableIterator<responses.ListJobShapesResponse> {
    return paginateResponses(request, req => this.listJobShapes(req));
  }

  /**
   * List jobs in the specified compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListJobsRequest
   * @return ListJobsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListJobs.ts.html |here} to see how to use ListJobs API.
   */
  public async listJobs(
    listJobsRequest: requests.ListJobsRequest
  ): Promise<responses.ListJobsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#listJobs.");
    const operationName = "listJobs";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/JobSummary/ListJobs";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listJobsRequest.compartmentId,
      "projectId": listJobsRequest.projectId,
      "id": listJobsRequest.id,
      "displayName": listJobsRequest.displayName,
      "lifecycleState": listJobsRequest.lifecycleState,
      "createdBy": listJobsRequest.createdBy,
      "limit": listJobsRequest.limit,
      "page": listJobsRequest.page,
      "sortOrder": listJobsRequest.sortOrder,
      "sortBy": listJobsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listJobsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listJobsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListJobsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.JobSummary,
        type: "Array<model.JobSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listJobsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.JobSummary objects
   * contained in responses from the listJobs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllJobs(request: requests.ListJobsRequest): AsyncIterableIterator<model.JobSummary> {
    return paginateRecords(request, req => this.listJobs(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listJobsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listJobs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllJobsResponses(
    request: requests.ListJobsRequest
  ): AsyncIterableIterator<responses.ListJobsResponse> {
    return paginateResponses(request, req => this.listJobs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.JobSummary objects
   * contained in responses from the listJobs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listJobsRecordIterator(
    request: requests.ListJobsRequest
  ): AsyncIterableIterator<model.JobSummary> {
    return paginateRecords(request, req => this.listJobs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listJobs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listJobsResponseIterator(
    request: requests.ListJobsRequest
  ): AsyncIterableIterator<responses.ListJobsResponse> {
    return paginateResponses(request, req => this.listJobs(req));
  }

  /**
   * Lists the valid model deployment shapes.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListModelDeploymentShapesRequest
   * @return ListModelDeploymentShapesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListModelDeploymentShapes.ts.html |here} to see how to use ListModelDeploymentShapes API.
   */
  public async listModelDeploymentShapes(
    listModelDeploymentShapesRequest: requests.ListModelDeploymentShapesRequest
  ): Promise<responses.ListModelDeploymentShapesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#listModelDeploymentShapes.");
    const operationName = "listModelDeploymentShapes";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/ModelDeploymentShapeSummary/ListModelDeploymentShapes";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listModelDeploymentShapesRequest.compartmentId,
      "limit": listModelDeploymentShapesRequest.limit,
      "page": listModelDeploymentShapesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listModelDeploymentShapesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listModelDeploymentShapesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/modelDeploymentShapes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListModelDeploymentShapesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ModelDeploymentShapeSummary,
        type: "Array<model.ModelDeploymentShapeSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listModelDeploymentShapesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.ModelDeploymentShapeSummary objects
   * contained in responses from the listModelDeploymentShapes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllModelDeploymentShapes(
    request: requests.ListModelDeploymentShapesRequest
  ): AsyncIterableIterator<model.ModelDeploymentShapeSummary> {
    return paginateRecords(request, req => this.listModelDeploymentShapes(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listModelDeploymentShapesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listModelDeploymentShapes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllModelDeploymentShapesResponses(
    request: requests.ListModelDeploymentShapesRequest
  ): AsyncIterableIterator<responses.ListModelDeploymentShapesResponse> {
    return paginateResponses(request, req => this.listModelDeploymentShapes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.ModelDeploymentShapeSummary objects
   * contained in responses from the listModelDeploymentShapes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listModelDeploymentShapesRecordIterator(
    request: requests.ListModelDeploymentShapesRequest
  ): AsyncIterableIterator<model.ModelDeploymentShapeSummary> {
    return paginateRecords(request, req => this.listModelDeploymentShapes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listModelDeploymentShapes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listModelDeploymentShapesResponseIterator(
    request: requests.ListModelDeploymentShapesRequest
  ): AsyncIterableIterator<responses.ListModelDeploymentShapesResponse> {
    return paginateResponses(request, req => this.listModelDeploymentShapes(req));
  }

  /**
   * Lists all model deployments in the specified compartment. Only one parameter other than compartmentId may also be included in a query. The query must include compartmentId. If the query does not include compartmentId, or includes compartmentId but two or more other parameters an error is returned.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListModelDeploymentsRequest
   * @return ListModelDeploymentsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListModelDeployments.ts.html |here} to see how to use ListModelDeployments API.
   */
  public async listModelDeployments(
    listModelDeploymentsRequest: requests.ListModelDeploymentsRequest
  ): Promise<responses.ListModelDeploymentsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#listModelDeployments.");
    const operationName = "listModelDeployments";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/ModelDeploymentSummary/ListModelDeployments";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listModelDeploymentsRequest.compartmentId,
      "id": listModelDeploymentsRequest.id,
      "projectId": listModelDeploymentsRequest.projectId,
      "displayName": listModelDeploymentsRequest.displayName,
      "lifecycleState": listModelDeploymentsRequest.lifecycleState,
      "createdBy": listModelDeploymentsRequest.createdBy,
      "limit": listModelDeploymentsRequest.limit,
      "page": listModelDeploymentsRequest.page,
      "sortOrder": listModelDeploymentsRequest.sortOrder,
      "sortBy": listModelDeploymentsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listModelDeploymentsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listModelDeploymentsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/modelDeployments",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListModelDeploymentsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ModelDeploymentSummary,
        type: "Array<model.ModelDeploymentSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listModelDeploymentsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.ModelDeploymentSummary objects
   * contained in responses from the listModelDeployments operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllModelDeployments(
    request: requests.ListModelDeploymentsRequest
  ): AsyncIterableIterator<model.ModelDeploymentSummary> {
    return paginateRecords(request, req => this.listModelDeployments(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listModelDeploymentsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listModelDeployments operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllModelDeploymentsResponses(
    request: requests.ListModelDeploymentsRequest
  ): AsyncIterableIterator<responses.ListModelDeploymentsResponse> {
    return paginateResponses(request, req => this.listModelDeployments(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.ModelDeploymentSummary objects
   * contained in responses from the listModelDeployments operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listModelDeploymentsRecordIterator(
    request: requests.ListModelDeploymentsRequest
  ): AsyncIterableIterator<model.ModelDeploymentSummary> {
    return paginateRecords(request, req => this.listModelDeployments(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listModelDeployments operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listModelDeploymentsResponseIterator(
    request: requests.ListModelDeploymentsRequest
  ): AsyncIterableIterator<responses.ListModelDeploymentsResponse> {
    return paginateResponses(request, req => this.listModelDeployments(req));
  }

  /**
   * Lists models in the specified compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListModelsRequest
   * @return ListModelsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListModels.ts.html |here} to see how to use ListModels API.
   */
  public async listModels(
    listModelsRequest: requests.ListModelsRequest
  ): Promise<responses.ListModelsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#listModels.");
    const operationName = "listModels";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/ModelSummary/ListModels";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listModelsRequest.compartmentId,
      "id": listModelsRequest.id,
      "projectId": listModelsRequest.projectId,
      "displayName": listModelsRequest.displayName,
      "lifecycleState": listModelsRequest.lifecycleState,
      "createdBy": listModelsRequest.createdBy,
      "limit": listModelsRequest.limit,
      "page": listModelsRequest.page,
      "sortOrder": listModelsRequest.sortOrder,
      "sortBy": listModelsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listModelsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listModelsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListModelsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ModelSummary,
        type: "Array<model.ModelSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listModelsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.ModelSummary objects
   * contained in responses from the listModels operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllModels(
    request: requests.ListModelsRequest
  ): AsyncIterableIterator<model.ModelSummary> {
    return paginateRecords(request, req => this.listModels(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listModelsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listModels operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllModelsResponses(
    request: requests.ListModelsRequest
  ): AsyncIterableIterator<responses.ListModelsResponse> {
    return paginateResponses(request, req => this.listModels(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.ModelSummary objects
   * contained in responses from the listModels operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listModelsRecordIterator(
    request: requests.ListModelsRequest
  ): AsyncIterableIterator<model.ModelSummary> {
    return paginateRecords(request, req => this.listModels(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listModels operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listModelsResponseIterator(
    request: requests.ListModelsRequest
  ): AsyncIterableIterator<responses.ListModelsResponse> {
    return paginateResponses(request, req => this.listModels(req));
  }

  /**
   * Lists the valid notebook session shapes.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListNotebookSessionShapesRequest
   * @return ListNotebookSessionShapesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListNotebookSessionShapes.ts.html |here} to see how to use ListNotebookSessionShapes API.
   */
  public async listNotebookSessionShapes(
    listNotebookSessionShapesRequest: requests.ListNotebookSessionShapesRequest
  ): Promise<responses.ListNotebookSessionShapesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#listNotebookSessionShapes.");
    const operationName = "listNotebookSessionShapes";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/NotebookSessionShapeSummary/ListNotebookSessionShapes";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listNotebookSessionShapesRequest.compartmentId,
      "limit": listNotebookSessionShapesRequest.limit,
      "page": listNotebookSessionShapesRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listNotebookSessionShapesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listNotebookSessionShapesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/notebookSessionShapes",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListNotebookSessionShapesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.NotebookSessionShapeSummary,
        type: "Array<model.NotebookSessionShapeSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listNotebookSessionShapesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.NotebookSessionShapeSummary objects
   * contained in responses from the listNotebookSessionShapes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllNotebookSessionShapes(
    request: requests.ListNotebookSessionShapesRequest
  ): AsyncIterableIterator<model.NotebookSessionShapeSummary> {
    return paginateRecords(request, req => this.listNotebookSessionShapes(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listNotebookSessionShapesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listNotebookSessionShapes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllNotebookSessionShapesResponses(
    request: requests.ListNotebookSessionShapesRequest
  ): AsyncIterableIterator<responses.ListNotebookSessionShapesResponse> {
    return paginateResponses(request, req => this.listNotebookSessionShapes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.NotebookSessionShapeSummary objects
   * contained in responses from the listNotebookSessionShapes operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listNotebookSessionShapesRecordIterator(
    request: requests.ListNotebookSessionShapesRequest
  ): AsyncIterableIterator<model.NotebookSessionShapeSummary> {
    return paginateRecords(request, req => this.listNotebookSessionShapes(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listNotebookSessionShapes operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listNotebookSessionShapesResponseIterator(
    request: requests.ListNotebookSessionShapesRequest
  ): AsyncIterableIterator<responses.ListNotebookSessionShapesResponse> {
    return paginateResponses(request, req => this.listNotebookSessionShapes(req));
  }

  /**
   * Lists the notebook sessions in the specified compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListNotebookSessionsRequest
   * @return ListNotebookSessionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListNotebookSessions.ts.html |here} to see how to use ListNotebookSessions API.
   */
  public async listNotebookSessions(
    listNotebookSessionsRequest: requests.ListNotebookSessionsRequest
  ): Promise<responses.ListNotebookSessionsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#listNotebookSessions.");
    const operationName = "listNotebookSessions";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/NotebookSessionSummary/ListNotebookSessions";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listNotebookSessionsRequest.compartmentId,
      "id": listNotebookSessionsRequest.id,
      "projectId": listNotebookSessionsRequest.projectId,
      "displayName": listNotebookSessionsRequest.displayName,
      "lifecycleState": listNotebookSessionsRequest.lifecycleState,
      "createdBy": listNotebookSessionsRequest.createdBy,
      "limit": listNotebookSessionsRequest.limit,
      "page": listNotebookSessionsRequest.page,
      "sortOrder": listNotebookSessionsRequest.sortOrder,
      "sortBy": listNotebookSessionsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listNotebookSessionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listNotebookSessionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/notebookSessions",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListNotebookSessionsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.NotebookSessionSummary,
        type: "Array<model.NotebookSessionSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listNotebookSessionsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.NotebookSessionSummary objects
   * contained in responses from the listNotebookSessions operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllNotebookSessions(
    request: requests.ListNotebookSessionsRequest
  ): AsyncIterableIterator<model.NotebookSessionSummary> {
    return paginateRecords(request, req => this.listNotebookSessions(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listNotebookSessionsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listNotebookSessions operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllNotebookSessionsResponses(
    request: requests.ListNotebookSessionsRequest
  ): AsyncIterableIterator<responses.ListNotebookSessionsResponse> {
    return paginateResponses(request, req => this.listNotebookSessions(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.NotebookSessionSummary objects
   * contained in responses from the listNotebookSessions operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listNotebookSessionsRecordIterator(
    request: requests.ListNotebookSessionsRequest
  ): AsyncIterableIterator<model.NotebookSessionSummary> {
    return paginateRecords(request, req => this.listNotebookSessions(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listNotebookSessions operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listNotebookSessionsResponseIterator(
    request: requests.ListNotebookSessionsRequest
  ): AsyncIterableIterator<responses.ListNotebookSessionsResponse> {
    return paginateResponses(request, req => this.listNotebookSessions(req));
  }

  /**
   * Lists projects in the specified compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListProjectsRequest
   * @return ListProjectsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListProjects.ts.html |here} to see how to use ListProjects API.
   */
  public async listProjects(
    listProjectsRequest: requests.ListProjectsRequest
  ): Promise<responses.ListProjectsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#listProjects.");
    const operationName = "listProjects";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/ProjectSummary/ListProjects";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listProjectsRequest.compartmentId,
      "id": listProjectsRequest.id,
      "displayName": listProjectsRequest.displayName,
      "lifecycleState": listProjectsRequest.lifecycleState,
      "createdBy": listProjectsRequest.createdBy,
      "limit": listProjectsRequest.limit,
      "page": listProjectsRequest.page,
      "sortOrder": listProjectsRequest.sortOrder,
      "sortBy": listProjectsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listProjectsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listProjectsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/projects",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListProjectsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ProjectSummary,
        type: "Array<model.ProjectSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listProjectsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.ProjectSummary objects
   * contained in responses from the listProjects operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllProjects(
    request: requests.ListProjectsRequest
  ): AsyncIterableIterator<model.ProjectSummary> {
    return paginateRecords(request, req => this.listProjects(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listProjectsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listProjects operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllProjectsResponses(
    request: requests.ListProjectsRequest
  ): AsyncIterableIterator<responses.ListProjectsResponse> {
    return paginateResponses(request, req => this.listProjects(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.ProjectSummary objects
   * contained in responses from the listProjects operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listProjectsRecordIterator(
    request: requests.ListProjectsRequest
  ): AsyncIterableIterator<model.ProjectSummary> {
    return paginateRecords(request, req => this.listProjects(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listProjects operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listProjectsResponseIterator(
    request: requests.ListProjectsRequest
  ): AsyncIterableIterator<responses.ListProjectsResponse> {
    return paginateResponses(request, req => this.listProjects(req));
  }

  /**
   * Lists work request errors for the specified work request.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#listWorkRequestErrors.");
    const operationName = "listWorkRequestErrors";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/WorkRequest/ListWorkRequestErrors";
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestError,
        type: "Array<model.WorkRequestError>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists work request logs for the specified work request.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#listWorkRequestLogs.");
    const operationName = "listWorkRequestLogs";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/WorkRequest/ListWorkRequestLogs";
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestLogEntry,
        type: "Array<model.WorkRequestLogEntry>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists work requests in the specified compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#listWorkRequests.");
    const operationName = "listWorkRequests";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/WorkRequestSummary/ListWorkRequests";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "id": listWorkRequestsRequest.id,
      "operationType": listWorkRequestsRequest.operationType,
      "status": listWorkRequestsRequest.status,
      "limit": listWorkRequestsRequest.limit,
      "page": listWorkRequestsRequest.page,
      "sortOrder": listWorkRequestsRequest.sortOrder,
      "sortBy": listWorkRequestsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestSummary,
        type: "Array<model.WorkRequestSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
   * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequests(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<model.WorkRequestSummary> {
    return paginateRecords(request, req => this.listWorkRequests(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestsResponses(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestsResponse> {
    return paginateResponses(request, req => this.listWorkRequests(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
   * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestsRecordIterator(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<model.WorkRequestSummary> {
    return paginateRecords(request, req => this.listWorkRequests(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestsResponseIterator(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestsResponse> {
    return paginateResponses(request, req => this.listWorkRequests(req));
  }

  /**
   * Updates a job.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateJobRequest
   * @return UpdateJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/UpdateJob.ts.html |here} to see how to use UpdateJob API.
   */
  public async updateJob(
    updateJobRequest: requests.UpdateJobRequest
  ): Promise<responses.UpdateJobResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#updateJob.");
    const operationName = "updateJob";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Job/UpdateJob";
    const pathParams = {
      "{jobId}": updateJobRequest.jobId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateJobRequest.opcRequestId,
      "if-match": updateJobRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobs/{jobId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateJobRequest.updateJobDetails,
        "UpdateJobDetails",
        model.UpdateJobDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateJobResponse>{},
        body: await response.json(),
        bodyKey: "job",
        bodyModel: model.Job,
        type: "model.Job",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates a job run.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateJobRunRequest
   * @return UpdateJobRunResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/UpdateJobRun.ts.html |here} to see how to use UpdateJobRun API.
   */
  public async updateJobRun(
    updateJobRunRequest: requests.UpdateJobRunRequest
  ): Promise<responses.UpdateJobRunResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#updateJobRun.");
    const operationName = "updateJobRun";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/JobRun/UpdateJobRun";
    const pathParams = {
      "{jobRunId}": updateJobRunRequest.jobRunId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateJobRunRequest.opcRequestId,
      "if-match": updateJobRunRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateJobRunRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/jobRuns/{jobRunId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateJobRunRequest.updateJobRunDetails,
        "UpdateJobRunDetails",
        model.UpdateJobRunDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateJobRunResponse>{},
        body: await response.json(),
        bodyKey: "jobRun",
        bodyModel: model.JobRun,
        type: "model.JobRun",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the properties of a model. You can update the `displayName`, `description`, `freeformTags`, and `definedTags` properties.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateModelRequest
   * @return UpdateModelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/UpdateModel.ts.html |here} to see how to use UpdateModel API.
   */
  public async updateModel(
    updateModelRequest: requests.UpdateModelRequest
  ): Promise<responses.UpdateModelResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#updateModel.");
    const operationName = "updateModel";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/UpdateModel";
    const pathParams = {
      "{modelId}": updateModelRequest.modelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateModelRequest.ifMatch,
      "opc-request-id": updateModelRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateModelRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models/{modelId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateModelRequest.updateModelDetails,
        "UpdateModelDetails",
        model.UpdateModelDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateModelResponse>{},
        body: await response.json(),
        bodyKey: "model",
        bodyModel: model.Model,
        type: "model.Model",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the properties of a model deployment. Some of the properties of `modelDeploymentConfigurationDetails` or `CategoryLogDetails` can also be updated with zero down time
   * when the model deployment's lifecycle state is ACTIVE or NEEDS_ATTENTION i.e `instanceShapeName`, `instanceCount` and `modelId`, separately `loadBalancerShape` or `CategoryLogDetails`
   * can also be updated independently. All of the fields can be updated when the deployment is in the INACTIVE lifecycle state. Changes will take effect the next time the model
   * deployment is activated.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateModelDeploymentRequest
   * @return UpdateModelDeploymentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/UpdateModelDeployment.ts.html |here} to see how to use UpdateModelDeployment API.
   */
  public async updateModelDeployment(
    updateModelDeploymentRequest: requests.UpdateModelDeploymentRequest
  ): Promise<responses.UpdateModelDeploymentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#updateModelDeployment.");
    const operationName = "updateModelDeployment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/ModelDeployment/UpdateModelDeployment";
    const pathParams = {
      "{modelDeploymentId}": updateModelDeploymentRequest.modelDeploymentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateModelDeploymentRequest.ifMatch,
      "opc-request-id": updateModelDeploymentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateModelDeploymentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/modelDeployments/{modelDeploymentId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateModelDeploymentRequest.updateModelDeploymentDetails,
        "UpdateModelDeploymentDetails",
        model.UpdateModelDeploymentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateModelDeploymentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the provenance information for the specified model.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateModelProvenanceRequest
   * @return UpdateModelProvenanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/UpdateModelProvenance.ts.html |here} to see how to use UpdateModelProvenance API.
   */
  public async updateModelProvenance(
    updateModelProvenanceRequest: requests.UpdateModelProvenanceRequest
  ): Promise<responses.UpdateModelProvenanceResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#updateModelProvenance.");
    const operationName = "updateModelProvenance";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Model/UpdateModelProvenance";
    const pathParams = {
      "{modelId}": updateModelProvenanceRequest.modelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateModelProvenanceRequest.opcRequestId,
      "if-match": updateModelProvenanceRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateModelProvenanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/models/{modelId}/provenance",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateModelProvenanceRequest.updateModelProvenanceDetails,
        "UpdateModelProvenanceDetails",
        model.UpdateModelProvenanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateModelProvenanceResponse>{},
        body: await response.json(),
        bodyKey: "modelProvenance",
        bodyModel: model.ModelProvenance,
        type: "model.ModelProvenance",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the properties of a notebook session. You can update the `displayName`, `freeformTags`, and `definedTags` properties.
   * When the notebook session is in the INACTIVE lifecycle state, you can update `notebookSessionConfigurationDetails` and change `shape`, `subnetId`, and `blockStorageSizeInGBs`.
   * Changes to the `notebookSessionConfigurationDetails` take effect the next time the `ActivateNotebookSession` action is invoked on the notebook session resource.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateNotebookSessionRequest
   * @return UpdateNotebookSessionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/UpdateNotebookSession.ts.html |here} to see how to use UpdateNotebookSession API.
   */
  public async updateNotebookSession(
    updateNotebookSessionRequest: requests.UpdateNotebookSessionRequest
  ): Promise<responses.UpdateNotebookSessionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataScienceClient#updateNotebookSession.");
    const operationName = "updateNotebookSession";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/NotebookSession/UpdateNotebookSession";
    const pathParams = {
      "{notebookSessionId}": updateNotebookSessionRequest.notebookSessionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateNotebookSessionRequest.ifMatch,
      "opc-request-id": updateNotebookSessionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateNotebookSessionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/notebookSessions/{notebookSessionId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateNotebookSessionRequest.updateNotebookSessionDetails,
        "UpdateNotebookSessionDetails",
        model.UpdateNotebookSessionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateNotebookSessionResponse>{},
        body: await response.json(),
        bodyKey: "notebookSession",
        bodyModel: model.NotebookSession,
        type: "model.NotebookSession",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the properties of a project. You can update the `displayName`, `description`, `freeformTags`, and `definedTags` properties.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateProjectRequest
   * @return UpdateProjectResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/datascience/UpdateProject.ts.html |here} to see how to use UpdateProject API.
   */
  public async updateProject(
    updateProjectRequest: requests.UpdateProjectRequest
  ): Promise<responses.UpdateProjectResponse> {
    if (this.logger) this.logger.debug("Calling operation DataScienceClient#updateProject.");
    const operationName = "updateProject";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/data-science/20190101/Project/UpdateProject";
    const pathParams = {
      "{projectId}": updateProjectRequest.projectId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateProjectRequest.ifMatch,
      "opc-request-id": updateProjectRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateProjectRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/projects/{projectId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateProjectRequest.updateProjectDetails,
        "UpdateProjectDetails",
        model.UpdateProjectDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateProjectResponse>{},
        body: await response.json(),
        bodyKey: "project",
        bodyModel: model.Project,
        type: "model.Project",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
