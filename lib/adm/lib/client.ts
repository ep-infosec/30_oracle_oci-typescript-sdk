/**
 * Application Dependency Management API
 * Use the Application Dependency Management API to create knowledge bases and vulnerability audits.  For more information, see [ADM](/Content/application-dependency-management/home.htm).
 * OpenAPI spec version: 20220421
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { ApplicationDependencyManagementWaiter } from "./applicationdependencymanagement-waiter";
import { composeResponse, composeRequest, GenericRetrier } from "oci-common";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum ApplicationDependencyManagementApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class ApplicationDependencyManagementClient {
  protected static serviceEndpointTemplate = "https://adm.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": ApplicationDependencyManagementWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker = null;
  protected _httpOptions: any = undefined;
  public targetService = "ApplicationDependencyManagement";

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
    }
    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20220421";
    if (this.logger)
      this.logger.info(`ApplicationDependencyManagementClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      ApplicationDependencyManagementClient.serviceEndpointTemplate,
      region,
      ApplicationDependencyManagementClient.endpointServiceName
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      ApplicationDependencyManagementClient.serviceEndpointTemplate,
      regionId,
      ApplicationDependencyManagementClient.endpointServiceName
    );
  }

  /**
   * Creates a new ApplicationDependencyManagementWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): ApplicationDependencyManagementWaiter {
    this._waiters = new ApplicationDependencyManagementWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): ApplicationDependencyManagementWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Cancel work request with the given ID.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CancelWorkRequestRequest
   * @return CancelWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/adm/CancelWorkRequest.ts.html |here} to see how to use CancelWorkRequest API.
   */
  public async cancelWorkRequest(
    cancelWorkRequestRequest: requests.CancelWorkRequestRequest
  ): Promise<responses.CancelWorkRequestResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ApplicationDependencyManagementClient#cancelWorkRequest."
      );
    const operationName = "cancelWorkRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": cancelWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": cancelWorkRequestRequest.ifMatch,
      "opc-request-id": cancelWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      cancelWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CancelWorkRequestResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a Knowledge Base from one compartment to another.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeKnowledgeBaseCompartmentRequest
   * @return ChangeKnowledgeBaseCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/adm/ChangeKnowledgeBaseCompartment.ts.html |here} to see how to use ChangeKnowledgeBaseCompartment API.
   */
  public async changeKnowledgeBaseCompartment(
    changeKnowledgeBaseCompartmentRequest: requests.ChangeKnowledgeBaseCompartmentRequest
  ): Promise<responses.ChangeKnowledgeBaseCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ApplicationDependencyManagementClient#changeKnowledgeBaseCompartment."
      );
    const operationName = "changeKnowledgeBaseCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{knowledgeBaseId}": changeKnowledgeBaseCompartmentRequest.knowledgeBaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeKnowledgeBaseCompartmentRequest.ifMatch,
      "opc-request-id": changeKnowledgeBaseCompartmentRequest.opcRequestId,
      "opc-retry-token": changeKnowledgeBaseCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeKnowledgeBaseCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/knowledgeBases/{knowledgeBaseId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeKnowledgeBaseCompartmentRequest.changeKnowledgeBaseCompartmentDetails,
        "ChangeKnowledgeBaseCompartmentDetails",
        model.ChangeKnowledgeBaseCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeKnowledgeBaseCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a Vulnerability Audit from one compartment to another.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeVulnerabilityAuditCompartmentRequest
   * @return ChangeVulnerabilityAuditCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/adm/ChangeVulnerabilityAuditCompartment.ts.html |here} to see how to use ChangeVulnerabilityAuditCompartment API.
   */
  public async changeVulnerabilityAuditCompartment(
    changeVulnerabilityAuditCompartmentRequest: requests.ChangeVulnerabilityAuditCompartmentRequest
  ): Promise<responses.ChangeVulnerabilityAuditCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ApplicationDependencyManagementClient#changeVulnerabilityAuditCompartment."
      );
    const operationName = "changeVulnerabilityAuditCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{vulnerabilityAuditId}": changeVulnerabilityAuditCompartmentRequest.vulnerabilityAuditId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeVulnerabilityAuditCompartmentRequest.ifMatch,
      "opc-request-id": changeVulnerabilityAuditCompartmentRequest.opcRequestId,
      "opc-retry-token": changeVulnerabilityAuditCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeVulnerabilityAuditCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vulnerabilityAudits/{vulnerabilityAuditId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeVulnerabilityAuditCompartmentRequest.changeVulnerabilityAuditCompartmentDetails,
        "ChangeVulnerabilityAuditCompartmentDetails",
        model.ChangeVulnerabilityAuditCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeVulnerabilityAuditCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Knowledge Base.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateKnowledgeBaseRequest
   * @return CreateKnowledgeBaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/adm/CreateKnowledgeBase.ts.html |here} to see how to use CreateKnowledgeBase API.
   */
  public async createKnowledgeBase(
    createKnowledgeBaseRequest: requests.CreateKnowledgeBaseRequest
  ): Promise<responses.CreateKnowledgeBaseResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ApplicationDependencyManagementClient#createKnowledgeBase."
      );
    const operationName = "createKnowledgeBase";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createKnowledgeBaseRequest.opcRequestId,
      "opc-retry-token": createKnowledgeBaseRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createKnowledgeBaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/knowledgeBases",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createKnowledgeBaseRequest.createKnowledgeBaseDetails,
        "CreateKnowledgeBaseDetails",
        model.CreateKnowledgeBaseDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateKnowledgeBaseResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Vulnerability Audit by providing a tree of Application Dependencies.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateVulnerabilityAuditRequest
   * @return CreateVulnerabilityAuditResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/adm/CreateVulnerabilityAudit.ts.html |here} to see how to use CreateVulnerabilityAudit API.
   */
  public async createVulnerabilityAudit(
    createVulnerabilityAuditRequest: requests.CreateVulnerabilityAuditRequest
  ): Promise<responses.CreateVulnerabilityAuditResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ApplicationDependencyManagementClient#createVulnerabilityAudit."
      );
    const operationName = "createVulnerabilityAudit";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createVulnerabilityAuditRequest.opcRequestId,
      "opc-retry-token": createVulnerabilityAuditRequest.opcRetryToken,
      "if-match": createVulnerabilityAuditRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createVulnerabilityAuditRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vulnerabilityAudits",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createVulnerabilityAuditRequest.createVulnerabilityAuditDetails,
        "CreateVulnerabilityAuditDetails",
        model.CreateVulnerabilityAuditDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateVulnerabilityAuditResponse>{},
        body: await response.json(),
        bodyKey: "vulnerabilityAudit",
        bodyModel: model.VulnerabilityAudit,
        type: "model.VulnerabilityAudit",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified Knowledge Base.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteKnowledgeBaseRequest
   * @return DeleteKnowledgeBaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/adm/DeleteKnowledgeBase.ts.html |here} to see how to use DeleteKnowledgeBase API.
   */
  public async deleteKnowledgeBase(
    deleteKnowledgeBaseRequest: requests.DeleteKnowledgeBaseRequest
  ): Promise<responses.DeleteKnowledgeBaseResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ApplicationDependencyManagementClient#deleteKnowledgeBase."
      );
    const operationName = "deleteKnowledgeBase";
    const apiReferenceLink = "";
    const pathParams = {
      "{knowledgeBaseId}": deleteKnowledgeBaseRequest.knowledgeBaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteKnowledgeBaseRequest.ifMatch,
      "opc-request-id": deleteKnowledgeBaseRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteKnowledgeBaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/knowledgeBases/{knowledgeBaseId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteKnowledgeBaseResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the specified Vulnerability Audit.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteVulnerabilityAuditRequest
   * @return DeleteVulnerabilityAuditResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/adm/DeleteVulnerabilityAudit.ts.html |here} to see how to use DeleteVulnerabilityAudit API.
   */
  public async deleteVulnerabilityAudit(
    deleteVulnerabilityAuditRequest: requests.DeleteVulnerabilityAuditRequest
  ): Promise<responses.DeleteVulnerabilityAuditResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ApplicationDependencyManagementClient#deleteVulnerabilityAudit."
      );
    const operationName = "deleteVulnerabilityAudit";
    const apiReferenceLink = "";
    const pathParams = {
      "{vulnerabilityAuditId}": deleteVulnerabilityAuditRequest.vulnerabilityAuditId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteVulnerabilityAuditRequest.ifMatch,
      "opc-request-id": deleteVulnerabilityAuditRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteVulnerabilityAuditRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vulnerabilityAudits/{vulnerabilityAuditId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteVulnerabilityAuditResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the details of the specified Knowledge Base.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetKnowledgeBaseRequest
   * @return GetKnowledgeBaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/adm/GetKnowledgeBase.ts.html |here} to see how to use GetKnowledgeBase API.
   */
  public async getKnowledgeBase(
    getKnowledgeBaseRequest: requests.GetKnowledgeBaseRequest
  ): Promise<responses.GetKnowledgeBaseResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ApplicationDependencyManagementClient#getKnowledgeBase."
      );
    const operationName = "getKnowledgeBase";
    const apiReferenceLink = "";
    const pathParams = {
      "{knowledgeBaseId}": getKnowledgeBaseRequest.knowledgeBaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getKnowledgeBaseRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getKnowledgeBaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/knowledgeBases/{knowledgeBaseId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetKnowledgeBaseResponse>{},
        body: await response.json(),
        bodyKey: "knowledgeBase",
        bodyModel: model.KnowledgeBase,
        type: "model.KnowledgeBase",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the details of the specified Vulnerability Audit.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetVulnerabilityAuditRequest
   * @return GetVulnerabilityAuditResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/adm/GetVulnerabilityAudit.ts.html |here} to see how to use GetVulnerabilityAudit API.
   */
  public async getVulnerabilityAudit(
    getVulnerabilityAuditRequest: requests.GetVulnerabilityAuditRequest
  ): Promise<responses.GetVulnerabilityAuditResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ApplicationDependencyManagementClient#getVulnerabilityAudit."
      );
    const operationName = "getVulnerabilityAudit";
    const apiReferenceLink = "";
    const pathParams = {
      "{vulnerabilityAuditId}": getVulnerabilityAuditRequest.vulnerabilityAuditId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getVulnerabilityAuditRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getVulnerabilityAuditRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vulnerabilityAudits/{vulnerabilityAuditId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetVulnerabilityAuditResponse>{},
        body: await response.json(),
        bodyKey: "vulnerabilityAudit",
        bodyModel: model.VulnerabilityAudit,
        type: "model.VulnerabilityAudit",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the status of the work request with the given ID.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/adm/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ApplicationDependencyManagementClient#getWorkRequest.");
    const operationName = "getWorkRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of Application Dependencies with their associated vulnerabilities.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListApplicationDependencyVulnerabilitiesRequest
   * @return ListApplicationDependencyVulnerabilitiesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/adm/ListApplicationDependencyVulnerabilities.ts.html |here} to see how to use ListApplicationDependencyVulnerabilities API.
   */
  public async listApplicationDependencyVulnerabilities(
    listApplicationDependencyVulnerabilitiesRequest: requests.ListApplicationDependencyVulnerabilitiesRequest
  ): Promise<responses.ListApplicationDependencyVulnerabilitiesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ApplicationDependencyManagementClient#listApplicationDependencyVulnerabilities."
      );
    const operationName = "listApplicationDependencyVulnerabilities";
    const apiReferenceLink = "";
    const pathParams = {
      "{vulnerabilityAuditId}": listApplicationDependencyVulnerabilitiesRequest.vulnerabilityAuditId
    };

    const queryParams = {
      "vulnerabilityId": listApplicationDependencyVulnerabilitiesRequest.vulnerabilityId,
      "cvssV3GreaterThanOrEqual":
        listApplicationDependencyVulnerabilitiesRequest.cvssV3GreaterThanOrEqual,
      "cvssV2GreaterThanOrEqual":
        listApplicationDependencyVulnerabilitiesRequest.cvssV2GreaterThanOrEqual,
      "limit": listApplicationDependencyVulnerabilitiesRequest.limit,
      "page": listApplicationDependencyVulnerabilitiesRequest.page,
      "sortOrder": listApplicationDependencyVulnerabilitiesRequest.sortOrder,
      "sortBy": listApplicationDependencyVulnerabilitiesRequest.sortBy,
      "rootNodeId": listApplicationDependencyVulnerabilitiesRequest.rootNodeId,
      "depth": listApplicationDependencyVulnerabilitiesRequest.depth,
      "gav": listApplicationDependencyVulnerabilitiesRequest.gav
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listApplicationDependencyVulnerabilitiesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listApplicationDependencyVulnerabilitiesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vulnerabilityAudits/{vulnerabilityAuditId}/applicationDependencyVulnerabilities",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListApplicationDependencyVulnerabilitiesResponse>{},
        body: await response.json(),
        bodyKey: "applicationDependencyVulnerabilityCollection",
        bodyModel: model.ApplicationDependencyVulnerabilityCollection,
        type: "model.ApplicationDependencyVulnerabilityCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of KnowledgeBases based on the specified query parameters.
   * At least id or compartmentId query parameter must be provided.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListKnowledgeBasesRequest
   * @return ListKnowledgeBasesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/adm/ListKnowledgeBases.ts.html |here} to see how to use ListKnowledgeBases API.
   */
  public async listKnowledgeBases(
    listKnowledgeBasesRequest: requests.ListKnowledgeBasesRequest
  ): Promise<responses.ListKnowledgeBasesResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ApplicationDependencyManagementClient#listKnowledgeBases."
      );
    const operationName = "listKnowledgeBases";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "id": listKnowledgeBasesRequest.id,
      "sortBy": listKnowledgeBasesRequest.sortBy,
      "lifecycleState": listKnowledgeBasesRequest.lifecycleState,
      "sortOrder": listKnowledgeBasesRequest.sortOrder,
      "displayName": listKnowledgeBasesRequest.displayName,
      "limit": listKnowledgeBasesRequest.limit,
      "page": listKnowledgeBasesRequest.page,
      "compartmentId": listKnowledgeBasesRequest.compartmentId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listKnowledgeBasesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listKnowledgeBasesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/knowledgeBases",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListKnowledgeBasesResponse>{},
        body: await response.json(),
        bodyKey: "knowledgeBaseCollection",
        bodyModel: model.KnowledgeBaseCollection,
        type: "model.KnowledgeBaseCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of Vulnerability Audits based on the specified query parameters.
   * At least one of id, compartmentId or knowledgeBaseId query parameter must be provided.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListVulnerabilityAuditsRequest
   * @return ListVulnerabilityAuditsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/adm/ListVulnerabilityAudits.ts.html |here} to see how to use ListVulnerabilityAudits API.
   */
  public async listVulnerabilityAudits(
    listVulnerabilityAuditsRequest: requests.ListVulnerabilityAuditsRequest
  ): Promise<responses.ListVulnerabilityAuditsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ApplicationDependencyManagementClient#listVulnerabilityAudits."
      );
    const operationName = "listVulnerabilityAudits";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "id": listVulnerabilityAuditsRequest.id,
      "compartmentId": listVulnerabilityAuditsRequest.compartmentId,
      "knowledgeBaseId": listVulnerabilityAuditsRequest.knowledgeBaseId,
      "isSuccess": listVulnerabilityAuditsRequest.isSuccess,
      "lifecycleState": listVulnerabilityAuditsRequest.lifecycleState,
      "sortOrder": listVulnerabilityAuditsRequest.sortOrder,
      "limit": listVulnerabilityAuditsRequest.limit,
      "page": listVulnerabilityAuditsRequest.page,
      "sortBy": listVulnerabilityAuditsRequest.sortBy,
      "displayName": listVulnerabilityAuditsRequest.displayName
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listVulnerabilityAuditsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listVulnerabilityAuditsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vulnerabilityAudits",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListVulnerabilityAuditsResponse>{},
        body: await response.json(),
        bodyKey: "vulnerabilityAuditCollection",
        bodyModel: model.VulnerabilityAuditCollection,
        type: "model.VulnerabilityAuditCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Return a (paginated) list of errors for a given work request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/adm/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ApplicationDependencyManagementClient#listWorkRequestErrors."
      );
    const operationName = "listWorkRequestErrors";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit,
      "sortBy": listWorkRequestErrorsRequest.sortBy,
      "sortOrder": listWorkRequestErrorsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestErrorCollection",
        bodyModel: model.WorkRequestErrorCollection,
        type: "model.WorkRequestErrorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Return a (paginated) list of logs for a given work request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/adm/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ApplicationDependencyManagementClient#listWorkRequestLogs."
      );
    const operationName = "listWorkRequestLogs";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit,
      "sortBy": listWorkRequestLogsRequest.sortBy,
      "sortOrder": listWorkRequestLogsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestLogEntryCollection",
        bodyModel: model.WorkRequestLogEntryCollection,
        type: "model.WorkRequestLogEntryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the work requests in a compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/adm/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ApplicationDependencyManagementClient#listWorkRequests."
      );
    const operationName = "listWorkRequests";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "workRequestId": listWorkRequestsRequest.workRequestId,
      "status": listWorkRequestsRequest.status,
      "resourceId": listWorkRequestsRequest.resourceId,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit,
      "sortOrder": listWorkRequestsRequest.sortOrder,
      "sortBy": listWorkRequestsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestSummaryCollection",
        bodyModel: model.WorkRequestSummaryCollection,
        type: "model.WorkRequestSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates one or more attributes of the specified Knowledge Base.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateKnowledgeBaseRequest
   * @return UpdateKnowledgeBaseResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/adm/UpdateKnowledgeBase.ts.html |here} to see how to use UpdateKnowledgeBase API.
   */
  public async updateKnowledgeBase(
    updateKnowledgeBaseRequest: requests.UpdateKnowledgeBaseRequest
  ): Promise<responses.UpdateKnowledgeBaseResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ApplicationDependencyManagementClient#updateKnowledgeBase."
      );
    const operationName = "updateKnowledgeBase";
    const apiReferenceLink = "";
    const pathParams = {
      "{knowledgeBaseId}": updateKnowledgeBaseRequest.knowledgeBaseId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateKnowledgeBaseRequest.ifMatch,
      "opc-request-id": updateKnowledgeBaseRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateKnowledgeBaseRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/knowledgeBases/{knowledgeBaseId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateKnowledgeBaseRequest.updateKnowledgeBaseDetails,
        "UpdateKnowledgeBaseDetails",
        model.UpdateKnowledgeBaseDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateKnowledgeBaseResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates one or more attributes of the specified Vulnerability Audit.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateVulnerabilityAuditRequest
   * @return UpdateVulnerabilityAuditResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/adm/UpdateVulnerabilityAudit.ts.html |here} to see how to use UpdateVulnerabilityAudit API.
   */
  public async updateVulnerabilityAudit(
    updateVulnerabilityAuditRequest: requests.UpdateVulnerabilityAuditRequest
  ): Promise<responses.UpdateVulnerabilityAuditResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation ApplicationDependencyManagementClient#updateVulnerabilityAudit."
      );
    const operationName = "updateVulnerabilityAudit";
    const apiReferenceLink = "";
    const pathParams = {
      "{vulnerabilityAuditId}": updateVulnerabilityAuditRequest.vulnerabilityAuditId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateVulnerabilityAuditRequest.ifMatch,
      "opc-request-id": updateVulnerabilityAuditRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateVulnerabilityAuditRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/vulnerabilityAudits/{vulnerabilityAuditId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateVulnerabilityAuditRequest.updateVulnerabilityAuditDetails,
        "UpdateVulnerabilityAuditDetails",
        model.UpdateVulnerabilityAuditDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateVulnerabilityAuditResponse>{},
        body: await response.json(),
        bodyKey: "vulnerabilityAudit",
        bodyModel: model.VulnerabilityAudit,
        type: "model.VulnerabilityAudit",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
