/**
 * Digital Assistant Service Instance API
 * API to create and maintain Oracle Digital Assistant service instances.
 * OpenAPI spec version: 20190506
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { paginateRecords, paginateResponses } from "oci-common";
import { ManagementWaiter } from "./management-waiter";
import { OdaWaiter } from "./oda-waiter";
import { composeResponse, composeRequest, GenericRetrier } from "oci-common";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum ManagementApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class ManagementClient {
  protected static serviceEndpointTemplate =
    "https://digitalassistant-api.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": ManagementWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker = null;
  protected _httpOptions: any = undefined;
  public targetService = "Management";

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
    }
    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20190506";
    if (this.logger) this.logger.info(`ManagementClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      ManagementClient.serviceEndpointTemplate,
      region,
      ManagementClient.endpointServiceName
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      ManagementClient.serviceEndpointTemplate,
      regionId,
      ManagementClient.endpointServiceName
    );
  }

  /**
   * Creates a new ManagementWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): ManagementWaiter {
    this._waiters = new ManagementWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): ManagementWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * This will store the provided parameters in the Digital Assistant instance and update any Digital Assistants with matching parameters.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ConfigureDigitalAssistantParametersRequest
   * @return ConfigureDigitalAssistantParametersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/ConfigureDigitalAssistantParameters.ts.html |here} to see how to use ConfigureDigitalAssistantParameters API.
   */
  public async configureDigitalAssistantParameters(
    configureDigitalAssistantParametersRequest: requests.ConfigureDigitalAssistantParametersRequest
  ): Promise<responses.ConfigureDigitalAssistantParametersResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ManagementClient#configureDigitalAssistantParameters.");
    const operationName = "configureDigitalAssistantParameters";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/DigitalAssistantParameter/ConfigureDigitalAssistantParameters";
    const pathParams = {
      "{odaInstanceId}": configureDigitalAssistantParametersRequest.odaInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": configureDigitalAssistantParametersRequest.opcRequestId,
      "opc-retry-token": configureDigitalAssistantParametersRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      configureDigitalAssistantParametersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/actions/configureDigitalAssistantParameters",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        configureDigitalAssistantParametersRequest.configureDigitalAssistantParametersDetails,
        "ConfigureDigitalAssistantParametersDetails",
        model.ConfigureDigitalAssistantParametersDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ConfigureDigitalAssistantParametersResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Authentication Provider
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateAuthenticationProviderRequest
   * @return CreateAuthenticationProviderResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/CreateAuthenticationProvider.ts.html |here} to see how to use CreateAuthenticationProvider API.
   */
  public async createAuthenticationProvider(
    createAuthenticationProviderRequest: requests.CreateAuthenticationProviderRequest
  ): Promise<responses.CreateAuthenticationProviderResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ManagementClient#createAuthenticationProvider.");
    const operationName = "createAuthenticationProvider";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/AuthenticationProvider/CreateAuthenticationProvider";
    const pathParams = {
      "{odaInstanceId}": createAuthenticationProviderRequest.odaInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createAuthenticationProviderRequest.opcRequestId,
      "opc-retry-token": createAuthenticationProviderRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createAuthenticationProviderRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/authenticationProviders",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createAuthenticationProviderRequest.createAuthenticationProviderDetails,
        "CreateAuthenticationProviderDetails",
        model.CreateAuthenticationProviderDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateAuthenticationProviderResponse>{},
        body: await response.json(),
        bodyKey: "authenticationProvider",
        bodyModel: model.AuthenticationProvider,
        type: "model.AuthenticationProvider",
        responseHeaders: [
          {
            value: response.headers.get("Location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Channel.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateChannelRequest
   * @return CreateChannelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/CreateChannel.ts.html |here} to see how to use CreateChannel API.
   */
  public async createChannel(
    createChannelRequest: requests.CreateChannelRequest
  ): Promise<responses.CreateChannelResponse> {
    if (this.logger) this.logger.debug("Calling operation ManagementClient#createChannel.");
    const operationName = "createChannel";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/Channel/CreateChannel";
    const pathParams = {
      "{odaInstanceId}": createChannelRequest.odaInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createChannelRequest.opcRequestId,
      "opc-retry-token": createChannelRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createChannelRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/channels",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createChannelRequest.createChannelDetails,
        "CreateChannelDetails",
        model.CreateChannelDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateChannelResponse>{},
        body: await response.json(),
        bodyKey: "createChannelResult",
        bodyModel: model.CreateChannelResult,
        type: "model.CreateChannelResult",
        responseHeaders: [
          {
            value: response.headers.get("Location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Digital Assistant.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateDigitalAssistantRequest
   * @return CreateDigitalAssistantResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/CreateDigitalAssistant.ts.html |here} to see how to use CreateDigitalAssistant API.
   */
  public async createDigitalAssistant(
    createDigitalAssistantRequest: requests.CreateDigitalAssistantRequest
  ): Promise<responses.CreateDigitalAssistantResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ManagementClient#createDigitalAssistant.");
    const operationName = "createDigitalAssistant";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/DigitalAssistant/CreateDigitalAssistant";
    const pathParams = {
      "{odaInstanceId}": createDigitalAssistantRequest.odaInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createDigitalAssistantRequest.opcRequestId,
      "opc-retry-token": createDigitalAssistantRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDigitalAssistantRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/digitalAssistants",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDigitalAssistantRequest.createDigitalAssistantDetails,
        "CreateDigitalAssistantDetails",
        model.CreateDigitalAssistantDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDigitalAssistantResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Skill from scratch.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateSkillRequest
   * @return CreateSkillResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/CreateSkill.ts.html |here} to see how to use CreateSkill API.
   */
  public async createSkill(
    createSkillRequest: requests.CreateSkillRequest
  ): Promise<responses.CreateSkillResponse> {
    if (this.logger) this.logger.debug("Calling operation ManagementClient#createSkill.");
    const operationName = "createSkill";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/Skill/CreateSkill";
    const pathParams = {
      "{odaInstanceId}": createSkillRequest.odaInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createSkillRequest.opcRequestId,
      "opc-retry-token": createSkillRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createSkillRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/skills",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createSkillRequest.createSkillDetails,
        "CreateSkillDetails",
        model.CreateSkillDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateSkillResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Skill Parameter.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateSkillParameterRequest
   * @return CreateSkillParameterResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/CreateSkillParameter.ts.html |here} to see how to use CreateSkillParameter API.
   */
  public async createSkillParameter(
    createSkillParameterRequest: requests.CreateSkillParameterRequest
  ): Promise<responses.CreateSkillParameterResponse> {
    if (this.logger) this.logger.debug("Calling operation ManagementClient#createSkillParameter.");
    const operationName = "createSkillParameter";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/SkillParameter/CreateSkillParameter";
    const pathParams = {
      "{odaInstanceId}": createSkillParameterRequest.odaInstanceId,
      "{skillId}": createSkillParameterRequest.skillId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createSkillParameterRequest.opcRequestId,
      "opc-retry-token": createSkillParameterRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createSkillParameterRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/skills/{skillId}/parameters",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createSkillParameterRequest.createSkillParameterDetails,
        "CreateSkillParameterDetails",
        model.CreateSkillParameterDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateSkillParameterResponse>{},
        body: await response.json(),
        bodyKey: "skillParameter",
        bodyModel: model.SkillParameter,
        type: "model.SkillParameter",
        responseHeaders: [
          {
            value: response.headers.get("Location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Translator
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateTranslatorRequest
   * @return CreateTranslatorResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/CreateTranslator.ts.html |here} to see how to use CreateTranslator API.
   */
  public async createTranslator(
    createTranslatorRequest: requests.CreateTranslatorRequest
  ): Promise<responses.CreateTranslatorResponse> {
    if (this.logger) this.logger.debug("Calling operation ManagementClient#createTranslator.");
    const operationName = "createTranslator";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/Translator/CreateTranslator";
    const pathParams = {
      "{odaInstanceId}": createTranslatorRequest.odaInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createTranslatorRequest.opcRequestId,
      "opc-retry-token": createTranslatorRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createTranslatorRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/translators",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createTranslatorRequest.createTranslatorDetails,
        "CreateTranslatorDetails",
        model.CreateTranslatorDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateTranslatorResponse>{},
        body: await response.json(),
        bodyKey: "translator",
        bodyModel: model.Translator,
        type: "model.Translator",
        responseHeaders: [
          {
            value: response.headers.get("Location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete the specified Authentication Provider.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteAuthenticationProviderRequest
   * @return DeleteAuthenticationProviderResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/DeleteAuthenticationProvider.ts.html |here} to see how to use DeleteAuthenticationProvider API.
   */
  public async deleteAuthenticationProvider(
    deleteAuthenticationProviderRequest: requests.DeleteAuthenticationProviderRequest
  ): Promise<responses.DeleteAuthenticationProviderResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ManagementClient#deleteAuthenticationProvider.");
    const operationName = "deleteAuthenticationProvider";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/AuthenticationProvider/DeleteAuthenticationProvider";
    const pathParams = {
      "{odaInstanceId}": deleteAuthenticationProviderRequest.odaInstanceId,
      "{authenticationProviderId}": deleteAuthenticationProviderRequest.authenticationProviderId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteAuthenticationProviderRequest.ifMatch,
      "opc-request-id": deleteAuthenticationProviderRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteAuthenticationProviderRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/authenticationProviders/{authenticationProviderId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteAuthenticationProviderResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete the specified Channel.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteChannelRequest
   * @return DeleteChannelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/DeleteChannel.ts.html |here} to see how to use DeleteChannel API.
   */
  public async deleteChannel(
    deleteChannelRequest: requests.DeleteChannelRequest
  ): Promise<responses.DeleteChannelResponse> {
    if (this.logger) this.logger.debug("Calling operation ManagementClient#deleteChannel.");
    const operationName = "deleteChannel";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/Channel/DeleteChannel";
    const pathParams = {
      "{odaInstanceId}": deleteChannelRequest.odaInstanceId,
      "{channelId}": deleteChannelRequest.channelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteChannelRequest.ifMatch,
      "opc-request-id": deleteChannelRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteChannelRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/channels/{channelId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteChannelResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete the specified Digital Assistant.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteDigitalAssistantRequest
   * @return DeleteDigitalAssistantResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/DeleteDigitalAssistant.ts.html |here} to see how to use DeleteDigitalAssistant API.
   */
  public async deleteDigitalAssistant(
    deleteDigitalAssistantRequest: requests.DeleteDigitalAssistantRequest
  ): Promise<responses.DeleteDigitalAssistantResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ManagementClient#deleteDigitalAssistant.");
    const operationName = "deleteDigitalAssistant";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/DigitalAssistant/DeleteDigitalAssistant";
    const pathParams = {
      "{odaInstanceId}": deleteDigitalAssistantRequest.odaInstanceId,
      "{digitalAssistantId}": deleteDigitalAssistantRequest.digitalAssistantId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDigitalAssistantRequest.ifMatch,
      "opc-request-id": deleteDigitalAssistantRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDigitalAssistantRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/digitalAssistants/{digitalAssistantId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDigitalAssistantResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete the specified Skill.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteSkillRequest
   * @return DeleteSkillResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/DeleteSkill.ts.html |here} to see how to use DeleteSkill API.
   */
  public async deleteSkill(
    deleteSkillRequest: requests.DeleteSkillRequest
  ): Promise<responses.DeleteSkillResponse> {
    if (this.logger) this.logger.debug("Calling operation ManagementClient#deleteSkill.");
    const operationName = "deleteSkill";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/Skill/DeleteSkill";
    const pathParams = {
      "{odaInstanceId}": deleteSkillRequest.odaInstanceId,
      "{skillId}": deleteSkillRequest.skillId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteSkillRequest.ifMatch,
      "opc-request-id": deleteSkillRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteSkillRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/skills/{skillId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteSkillResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete the specified Skill Parameter.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteSkillParameterRequest
   * @return DeleteSkillParameterResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/DeleteSkillParameter.ts.html |here} to see how to use DeleteSkillParameter API.
   */
  public async deleteSkillParameter(
    deleteSkillParameterRequest: requests.DeleteSkillParameterRequest
  ): Promise<responses.DeleteSkillParameterResponse> {
    if (this.logger) this.logger.debug("Calling operation ManagementClient#deleteSkillParameter.");
    const operationName = "deleteSkillParameter";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/SkillParameter/DeleteSkillParameter";
    const pathParams = {
      "{odaInstanceId}": deleteSkillParameterRequest.odaInstanceId,
      "{skillId}": deleteSkillParameterRequest.skillId,
      "{parameterName}": deleteSkillParameterRequest.parameterName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteSkillParameterRequest.ifMatch,
      "opc-request-id": deleteSkillParameterRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteSkillParameterRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/skills/{skillId}/parameters/{parameterName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteSkillParameterResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete the specified Translator.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteTranslatorRequest
   * @return DeleteTranslatorResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/DeleteTranslator.ts.html |here} to see how to use DeleteTranslator API.
   */
  public async deleteTranslator(
    deleteTranslatorRequest: requests.DeleteTranslatorRequest
  ): Promise<responses.DeleteTranslatorResponse> {
    if (this.logger) this.logger.debug("Calling operation ManagementClient#deleteTranslator.");
    const operationName = "deleteTranslator";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/Translator/DeleteTranslator";
    const pathParams = {
      "{odaInstanceId}": deleteTranslatorRequest.odaInstanceId,
      "{translatorId}": deleteTranslatorRequest.translatorId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteTranslatorRequest.ifMatch,
      "opc-request-id": deleteTranslatorRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteTranslatorRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/translators/{translatorId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteTranslatorResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Exports the specified Digital Assistant as an archive to Object Storage.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ExportDigitalAssistantRequest
   * @return ExportDigitalAssistantResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/ExportDigitalAssistant.ts.html |here} to see how to use ExportDigitalAssistant API.
   */
  public async exportDigitalAssistant(
    exportDigitalAssistantRequest: requests.ExportDigitalAssistantRequest
  ): Promise<responses.ExportDigitalAssistantResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ManagementClient#exportDigitalAssistant.");
    const operationName = "exportDigitalAssistant";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/Skill/ExportDigitalAssistant";
    const pathParams = {
      "{odaInstanceId}": exportDigitalAssistantRequest.odaInstanceId,
      "{digitalAssistantId}": exportDigitalAssistantRequest.digitalAssistantId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": exportDigitalAssistantRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      exportDigitalAssistantRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/digitalAssistants/{digitalAssistantId}/actions/export",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        exportDigitalAssistantRequest.exportDigitalAssistantDetails,
        "ExportDigitalAssistantDetails",
        model.ExportDigitalAssistantDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ExportDigitalAssistantResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Exports the specified Skill as an archive to Object Storage.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ExportSkillRequest
   * @return ExportSkillResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/ExportSkill.ts.html |here} to see how to use ExportSkill API.
   */
  public async exportSkill(
    exportSkillRequest: requests.ExportSkillRequest
  ): Promise<responses.ExportSkillResponse> {
    if (this.logger) this.logger.debug("Calling operation ManagementClient#exportSkill.");
    const operationName = "exportSkill";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/Skill/ExportSkill";
    const pathParams = {
      "{odaInstanceId}": exportSkillRequest.odaInstanceId,
      "{skillId}": exportSkillRequest.skillId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": exportSkillRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      exportSkillRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/skills/{skillId}/actions/export",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        exportSkillRequest.exportSkillDetails,
        "ExportSkillDetails",
        model.ExportSkillDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ExportSkillResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified Authentication Provider.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetAuthenticationProviderRequest
   * @return GetAuthenticationProviderResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/GetAuthenticationProvider.ts.html |here} to see how to use GetAuthenticationProvider API.
   */
  public async getAuthenticationProvider(
    getAuthenticationProviderRequest: requests.GetAuthenticationProviderRequest
  ): Promise<responses.GetAuthenticationProviderResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ManagementClient#getAuthenticationProvider.");
    const operationName = "getAuthenticationProvider";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/AuthenticationProvider/GetAuthenticationProvider";
    const pathParams = {
      "{odaInstanceId}": getAuthenticationProviderRequest.odaInstanceId,
      "{authenticationProviderId}": getAuthenticationProviderRequest.authenticationProviderId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getAuthenticationProviderRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getAuthenticationProviderRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/authenticationProviders/{authenticationProviderId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAuthenticationProviderResponse>{},
        body: await response.json(),
        bodyKey: "authenticationProvider",
        bodyModel: model.AuthenticationProvider,
        type: "model.AuthenticationProvider",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified Channel.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetChannelRequest
   * @return GetChannelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/GetChannel.ts.html |here} to see how to use GetChannel API.
   */
  public async getChannel(
    getChannelRequest: requests.GetChannelRequest
  ): Promise<responses.GetChannelResponse> {
    if (this.logger) this.logger.debug("Calling operation ManagementClient#getChannel.");
    const operationName = "getChannel";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/Channel/GetChannel";
    const pathParams = {
      "{odaInstanceId}": getChannelRequest.odaInstanceId,
      "{channelId}": getChannelRequest.channelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getChannelRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getChannelRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/channels/{channelId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetChannelResponse>{},
        body: await response.json(),
        bodyKey: "channel",
        bodyModel: model.Channel,
        type: "model.Channel",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified Digital Assistant.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetDigitalAssistantRequest
   * @return GetDigitalAssistantResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/GetDigitalAssistant.ts.html |here} to see how to use GetDigitalAssistant API.
   */
  public async getDigitalAssistant(
    getDigitalAssistantRequest: requests.GetDigitalAssistantRequest
  ): Promise<responses.GetDigitalAssistantResponse> {
    if (this.logger) this.logger.debug("Calling operation ManagementClient#getDigitalAssistant.");
    const operationName = "getDigitalAssistant";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/DigitalAssistant/GetDigitalAssistant";
    const pathParams = {
      "{odaInstanceId}": getDigitalAssistantRequest.odaInstanceId,
      "{digitalAssistantId}": getDigitalAssistantRequest.digitalAssistantId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDigitalAssistantRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDigitalAssistantRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/digitalAssistants/{digitalAssistantId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDigitalAssistantResponse>{},
        body: await response.json(),
        bodyKey: "digitalAssistant",
        bodyModel: model.DigitalAssistant,
        type: "model.DigitalAssistant",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified Digital Assistant Parameter.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetDigitalAssistantParameterRequest
   * @return GetDigitalAssistantParameterResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/GetDigitalAssistantParameter.ts.html |here} to see how to use GetDigitalAssistantParameter API.
   */
  public async getDigitalAssistantParameter(
    getDigitalAssistantParameterRequest: requests.GetDigitalAssistantParameterRequest
  ): Promise<responses.GetDigitalAssistantParameterResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ManagementClient#getDigitalAssistantParameter.");
    const operationName = "getDigitalAssistantParameter";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/DigitalAssistantParameter/GetDigitalAssistantParameter";
    const pathParams = {
      "{odaInstanceId}": getDigitalAssistantParameterRequest.odaInstanceId,
      "{digitalAssistantId}": getDigitalAssistantParameterRequest.digitalAssistantId,
      "{parameterName}": getDigitalAssistantParameterRequest.parameterName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDigitalAssistantParameterRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDigitalAssistantParameterRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/odaInstances/{odaInstanceId}/digitalAssistants/{digitalAssistantId}/parameters/{parameterName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDigitalAssistantParameterResponse>{},
        body: await response.json(),
        bodyKey: "digitalAssistantParameter",
        bodyModel: model.DigitalAssistantParameter,
        type: "model.DigitalAssistantParameter",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified Skill.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetSkillRequest
   * @return GetSkillResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/GetSkill.ts.html |here} to see how to use GetSkill API.
   */
  public async getSkill(
    getSkillRequest: requests.GetSkillRequest
  ): Promise<responses.GetSkillResponse> {
    if (this.logger) this.logger.debug("Calling operation ManagementClient#getSkill.");
    const operationName = "getSkill";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/Skill/GetSkill";
    const pathParams = {
      "{odaInstanceId}": getSkillRequest.odaInstanceId,
      "{skillId}": getSkillRequest.skillId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSkillRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSkillRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/skills/{skillId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSkillResponse>{},
        body: await response.json(),
        bodyKey: "skill",
        bodyModel: model.Skill,
        type: "model.Skill",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified Skill Parameter.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetSkillParameterRequest
   * @return GetSkillParameterResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/GetSkillParameter.ts.html |here} to see how to use GetSkillParameter API.
   */
  public async getSkillParameter(
    getSkillParameterRequest: requests.GetSkillParameterRequest
  ): Promise<responses.GetSkillParameterResponse> {
    if (this.logger) this.logger.debug("Calling operation ManagementClient#getSkillParameter.");
    const operationName = "getSkillParameter";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/SkillParameter/GetSkillParameter";
    const pathParams = {
      "{odaInstanceId}": getSkillParameterRequest.odaInstanceId,
      "{skillId}": getSkillParameterRequest.skillId,
      "{parameterName}": getSkillParameterRequest.parameterName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSkillParameterRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSkillParameterRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/skills/{skillId}/parameters/{parameterName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSkillParameterResponse>{},
        body: await response.json(),
        bodyKey: "skillParameter",
        bodyModel: model.SkillParameter,
        type: "model.SkillParameter",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified Translator.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetTranslatorRequest
   * @return GetTranslatorResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/GetTranslator.ts.html |here} to see how to use GetTranslator API.
   */
  public async getTranslator(
    getTranslatorRequest: requests.GetTranslatorRequest
  ): Promise<responses.GetTranslatorResponse> {
    if (this.logger) this.logger.debug("Calling operation ManagementClient#getTranslator.");
    const operationName = "getTranslator";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/Translator/GetTranslator";
    const pathParams = {
      "{odaInstanceId}": getTranslatorRequest.odaInstanceId,
      "{translatorId}": getTranslatorRequest.translatorId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getTranslatorRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getTranslatorRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/translators/{translatorId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTranslatorResponse>{},
        body: await response.json(),
        bodyKey: "translator",
        bodyModel: model.Translator,
        type: "model.Translator",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Import a Bot archive from Object Storage.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ImportBotRequest
   * @return ImportBotResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/ImportBot.ts.html |here} to see how to use ImportBot API.
   */
  public async importBot(
    importBotRequest: requests.ImportBotRequest
  ): Promise<responses.ImportBotResponse> {
    if (this.logger) this.logger.debug("Calling operation ManagementClient#importBot.");
    const operationName = "importBot";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/Bot/ImportBot";
    const pathParams = {
      "{odaInstanceId}": importBotRequest.odaInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": importBotRequest.opcRequestId,
      "opc-retry-token": importBotRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      importBotRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/actions/importBot",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        importBotRequest.importBotDetails,
        "ImportBotDetails",
        model.ImportBotDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ImportBotResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Returns a page of Authentication Providers that belong to the specified Digital Assistant instance.
* <p>
If the `opc-next-page` header appears in the response, then
* there are more items to retrieve. To get the next page in the subsequent
* GET request, include the header's value as the `page` query parameter.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListAuthenticationProvidersRequest
     * @return ListAuthenticationProvidersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/ListAuthenticationProviders.ts.html |here} to see how to use ListAuthenticationProviders API.
     */
  public async listAuthenticationProviders(
    listAuthenticationProvidersRequest: requests.ListAuthenticationProvidersRequest
  ): Promise<responses.ListAuthenticationProvidersResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ManagementClient#listAuthenticationProviders.");
    const operationName = "listAuthenticationProviders";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/AuthenticationProvider/ListAuthenticationProviders";
    const pathParams = {
      "{odaInstanceId}": listAuthenticationProvidersRequest.odaInstanceId
    };

    const queryParams = {
      "id": listAuthenticationProvidersRequest.id,
      "identityProvider": listAuthenticationProvidersRequest.identityProvider,
      "name": listAuthenticationProvidersRequest.name,
      "lifecycleState": listAuthenticationProvidersRequest.lifecycleState,
      "limit": listAuthenticationProvidersRequest.limit,
      "page": listAuthenticationProvidersRequest.page,
      "sortOrder": listAuthenticationProvidersRequest.sortOrder,
      "sortBy": listAuthenticationProvidersRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAuthenticationProvidersRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAuthenticationProvidersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/authenticationProviders",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAuthenticationProvidersResponse>{},
        body: await response.json(),
        bodyKey: "authenticationProviderCollection",
        bodyModel: model.AuthenticationProviderCollection,
        type: "model.AuthenticationProviderCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Returns a page of Channels that belong to the specified Digital Assistant instance.
* <p>
If the `opc-next-page` header appears in the response, then
* there are more items to retrieve. To get the next page in the subsequent
* GET request, include the header's value as the `page` query parameter.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListChannelsRequest
     * @return ListChannelsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/ListChannels.ts.html |here} to see how to use ListChannels API.
     */
  public async listChannels(
    listChannelsRequest: requests.ListChannelsRequest
  ): Promise<responses.ListChannelsResponse> {
    if (this.logger) this.logger.debug("Calling operation ManagementClient#listChannels.");
    const operationName = "listChannels";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/Channel/ListChannels";
    const pathParams = {
      "{odaInstanceId}": listChannelsRequest.odaInstanceId
    };

    const queryParams = {
      "id": listChannelsRequest.id,
      "name": listChannelsRequest.name,
      "category": listChannelsRequest.category,
      "type": listChannelsRequest.type,
      "lifecycleState": listChannelsRequest.lifecycleState,
      "limit": listChannelsRequest.limit,
      "page": listChannelsRequest.page,
      "sortOrder": listChannelsRequest.sortOrder,
      "sortBy": listChannelsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listChannelsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listChannelsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/channels",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListChannelsResponse>{},
        body: await response.json(),
        bodyKey: "channelCollection",
        bodyModel: model.ChannelCollection,
        type: "model.ChannelCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Returns a page of Parameters that belong to the specified Digital Assistant.
* <p>
If the `opc-next-page` header appears in the response, then
* there are more items to retrieve. To get the next page in the subsequent
* GET request, include the header's value as the `page` query parameter.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListDigitalAssistantParametersRequest
     * @return ListDigitalAssistantParametersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/ListDigitalAssistantParameters.ts.html |here} to see how to use ListDigitalAssistantParameters API.
     */
  public async listDigitalAssistantParameters(
    listDigitalAssistantParametersRequest: requests.ListDigitalAssistantParametersRequest
  ): Promise<responses.ListDigitalAssistantParametersResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ManagementClient#listDigitalAssistantParameters.");
    const operationName = "listDigitalAssistantParameters";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/DigitalAssistantParameter/ListDigitalAssistantParameters";
    const pathParams = {
      "{odaInstanceId}": listDigitalAssistantParametersRequest.odaInstanceId,
      "{digitalAssistantId}": listDigitalAssistantParametersRequest.digitalAssistantId
    };

    const queryParams = {
      "name": listDigitalAssistantParametersRequest.name,
      "lifecycleState": listDigitalAssistantParametersRequest.lifecycleState,
      "limit": listDigitalAssistantParametersRequest.limit,
      "page": listDigitalAssistantParametersRequest.page,
      "sortOrder": listDigitalAssistantParametersRequest.sortOrder,
      "sortBy": listDigitalAssistantParametersRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDigitalAssistantParametersRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDigitalAssistantParametersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/digitalAssistants/{digitalAssistantId}/parameters",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDigitalAssistantParametersResponse>{},
        body: await response.json(),
        bodyKey: "digitalAssistantParameterCollection",
        bodyModel: model.DigitalAssistantParameterCollection,
        type: "model.DigitalAssistantParameterCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Returns a page of Digital Assistants that belong to the specified Digital Assistant instance.
* <p>
If the `opc-next-page` header appears in the response, then
* there are more items to retrieve. To get the next page in the subsequent
* GET request, include the header's value as the `page` query parameter.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListDigitalAssistantsRequest
     * @return ListDigitalAssistantsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/ListDigitalAssistants.ts.html |here} to see how to use ListDigitalAssistants API.
     */
  public async listDigitalAssistants(
    listDigitalAssistantsRequest: requests.ListDigitalAssistantsRequest
  ): Promise<responses.ListDigitalAssistantsResponse> {
    if (this.logger) this.logger.debug("Calling operation ManagementClient#listDigitalAssistants.");
    const operationName = "listDigitalAssistants";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/DigitalAssistant/ListDigitalAssistants";
    const pathParams = {
      "{odaInstanceId}": listDigitalAssistantsRequest.odaInstanceId
    };

    const queryParams = {
      "digitalAssistantId": listDigitalAssistantsRequest.digitalAssistantId,
      "category": listDigitalAssistantsRequest.category,
      "name": listDigitalAssistantsRequest.name,
      "version": listDigitalAssistantsRequest.version,
      "namespace": listDigitalAssistantsRequest.namespace,
      "platformVersion": listDigitalAssistantsRequest.platformVersion,
      "lifecycleState": listDigitalAssistantsRequest.lifecycleState,
      "lifecycleDetails": listDigitalAssistantsRequest.lifecycleDetails,
      "limit": listDigitalAssistantsRequest.limit,
      "page": listDigitalAssistantsRequest.page,
      "sortOrder": listDigitalAssistantsRequest.sortOrder,
      "sortBy": listDigitalAssistantsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDigitalAssistantsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDigitalAssistantsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/digitalAssistants",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDigitalAssistantsResponse>{},
        body: await response.json(),
        bodyKey: "digitalAssistantCollection",
        bodyModel: model.DigitalAssistantCollection,
        type: "model.DigitalAssistantCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Returns a page of Skill Parameters that belong to the specified Skill.
* <p>
If the `opc-next-page` header appears in the response, then
* there are more items to retrieve. To get the next page in the subsequent
* GET request, include the header's value as the `page` query parameter.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListSkillParametersRequest
     * @return ListSkillParametersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/ListSkillParameters.ts.html |here} to see how to use ListSkillParameters API.
     */
  public async listSkillParameters(
    listSkillParametersRequest: requests.ListSkillParametersRequest
  ): Promise<responses.ListSkillParametersResponse> {
    if (this.logger) this.logger.debug("Calling operation ManagementClient#listSkillParameters.");
    const operationName = "listSkillParameters";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/SkillParameter/ListSkillParameters";
    const pathParams = {
      "{odaInstanceId}": listSkillParametersRequest.odaInstanceId,
      "{skillId}": listSkillParametersRequest.skillId
    };

    const queryParams = {
      "name": listSkillParametersRequest.name,
      "lifecycleState": listSkillParametersRequest.lifecycleState,
      "limit": listSkillParametersRequest.limit,
      "page": listSkillParametersRequest.page,
      "sortOrder": listSkillParametersRequest.sortOrder,
      "sortBy": listSkillParametersRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSkillParametersRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSkillParametersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/skills/{skillId}/parameters",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSkillParametersResponse>{},
        body: await response.json(),
        bodyKey: "skillParameterCollection",
        bodyModel: model.SkillParameterCollection,
        type: "model.SkillParameterCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Returns a page of Skills that belong to the specified Digital Assistant instance.
* <p>
If the `opc-next-page` header appears in the response, then
* there are more items to retrieve. To get the next page in the subsequent
* GET request, include the header's value as the `page` query parameter.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListSkillsRequest
     * @return ListSkillsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/ListSkills.ts.html |here} to see how to use ListSkills API.
     */
  public async listSkills(
    listSkillsRequest: requests.ListSkillsRequest
  ): Promise<responses.ListSkillsResponse> {
    if (this.logger) this.logger.debug("Calling operation ManagementClient#listSkills.");
    const operationName = "listSkills";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/Skill/ListSkills";
    const pathParams = {
      "{odaInstanceId}": listSkillsRequest.odaInstanceId
    };

    const queryParams = {
      "skillId": listSkillsRequest.skillId,
      "category": listSkillsRequest.category,
      "name": listSkillsRequest.name,
      "version": listSkillsRequest.version,
      "namespace": listSkillsRequest.namespace,
      "platformVersion": listSkillsRequest.platformVersion,
      "lifecycleState": listSkillsRequest.lifecycleState,
      "lifecycleDetails": listSkillsRequest.lifecycleDetails,
      "limit": listSkillsRequest.limit,
      "page": listSkillsRequest.page,
      "sortOrder": listSkillsRequest.sortOrder,
      "sortBy": listSkillsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSkillsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSkillsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/skills",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSkillsResponse>{},
        body: await response.json(),
        bodyKey: "skillCollection",
        bodyModel: model.SkillCollection,
        type: "model.SkillCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Returns a page of Translators that belong to the specified Digital Assistant instance.
* <p>
If the `opc-next-page` header appears in the response, then
* there are more items to retrieve. To get the next page in the subsequent
* GET request, include the header's value as the `page` query parameter.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListTranslatorsRequest
     * @return ListTranslatorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/ListTranslators.ts.html |here} to see how to use ListTranslators API.
     */
  public async listTranslators(
    listTranslatorsRequest: requests.ListTranslatorsRequest
  ): Promise<responses.ListTranslatorsResponse> {
    if (this.logger) this.logger.debug("Calling operation ManagementClient#listTranslators.");
    const operationName = "listTranslators";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/Translator/ListTranslators";
    const pathParams = {
      "{odaInstanceId}": listTranslatorsRequest.odaInstanceId
    };

    const queryParams = {
      "id": listTranslatorsRequest.id,
      "type": listTranslatorsRequest.type,
      "name": listTranslatorsRequest.name,
      "lifecycleState": listTranslatorsRequest.lifecycleState,
      "limit": listTranslatorsRequest.limit,
      "page": listTranslatorsRequest.page,
      "sortOrder": listTranslatorsRequest.sortOrder,
      "sortBy": listTranslatorsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTranslatorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listTranslatorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/translators",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTranslatorsResponse>{},
        body: await response.json(),
        bodyKey: "translatorCollection",
        bodyModel: model.TranslatorCollection,
        type: "model.TranslatorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Publish a draft Digital Assistant.
   * Once published the Digital Assistant cannot be modified.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PublishDigitalAssistantRequest
   * @return PublishDigitalAssistantResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/PublishDigitalAssistant.ts.html |here} to see how to use PublishDigitalAssistant API.
   */
  public async publishDigitalAssistant(
    publishDigitalAssistantRequest: requests.PublishDigitalAssistantRequest
  ): Promise<responses.PublishDigitalAssistantResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ManagementClient#publishDigitalAssistant.");
    const operationName = "publishDigitalAssistant";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/DigitalAssistant/PublishDigitalAssistant";
    const pathParams = {
      "{odaInstanceId}": publishDigitalAssistantRequest.odaInstanceId,
      "{digitalAssistantId}": publishDigitalAssistantRequest.digitalAssistantId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": publishDigitalAssistantRequest.ifMatch,
      "opc-request-id": publishDigitalAssistantRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      publishDigitalAssistantRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/digitalAssistants/{digitalAssistantId}/actions/publish",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PublishDigitalAssistantResponse>{},
        body: await response.json(),
        bodyKey: "digitalAssistant",
        bodyModel: model.DigitalAssistant,
        type: "model.DigitalAssistant",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Publish a draft Skill.
   * Once published it cannot be modified.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param PublishSkillRequest
   * @return PublishSkillResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/PublishSkill.ts.html |here} to see how to use PublishSkill API.
   */
  public async publishSkill(
    publishSkillRequest: requests.PublishSkillRequest
  ): Promise<responses.PublishSkillResponse> {
    if (this.logger) this.logger.debug("Calling operation ManagementClient#publishSkill.");
    const operationName = "publishSkill";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/Skill/PublishSkill";
    const pathParams = {
      "{odaInstanceId}": publishSkillRequest.odaInstanceId,
      "{skillId}": publishSkillRequest.skillId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": publishSkillRequest.ifMatch,
      "opc-request-id": publishSkillRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      publishSkillRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/skills/{skillId}/actions/publish",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PublishSkillResponse>{},
        body: await response.json(),
        bodyKey: "skill",
        bodyModel: model.Skill,
        type: "model.Skill",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This will generate new keys for any generated keys in the Channel (eg. secretKey, verifyToken).
   * If a Channel has no generated keys then no changes will be made.
   * Ensure that you take note of the newly generated keys in the response as they will not be returned again.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RotateChannelKeysRequest
   * @return RotateChannelKeysResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/RotateChannelKeys.ts.html |here} to see how to use RotateChannelKeys API.
   */
  public async rotateChannelKeys(
    rotateChannelKeysRequest: requests.RotateChannelKeysRequest
  ): Promise<responses.RotateChannelKeysResponse> {
    if (this.logger) this.logger.debug("Calling operation ManagementClient#rotateChannelKeys.");
    const operationName = "rotateChannelKeys";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/Channel/RotateChannelKeys";
    const pathParams = {
      "{odaInstanceId}": rotateChannelKeysRequest.odaInstanceId,
      "{channelId}": rotateChannelKeysRequest.channelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": rotateChannelKeysRequest.opcRequestId,
      "if-match": rotateChannelKeysRequest.ifMatch,
      "opc-retry-token": rotateChannelKeysRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      rotateChannelKeysRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/channels/{channelId}/actions/rotateKeys",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RotateChannelKeysResponse>{},
        body: await response.json(),
        bodyKey: "createChannelResult",
        bodyModel: model.CreateChannelResult,
        type: "model.CreateChannelResult",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Starts a Channel so that it will begin accepting messages.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param StartChannelRequest
   * @return StartChannelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/StartChannel.ts.html |here} to see how to use StartChannel API.
   */
  public async startChannel(
    startChannelRequest: requests.StartChannelRequest
  ): Promise<responses.StartChannelResponse> {
    if (this.logger) this.logger.debug("Calling operation ManagementClient#startChannel.");
    const operationName = "startChannel";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/Channel/StartChannel";
    const pathParams = {
      "{odaInstanceId}": startChannelRequest.odaInstanceId,
      "{channelId}": startChannelRequest.channelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": startChannelRequest.opcRequestId,
      "if-match": startChannelRequest.ifMatch,
      "opc-retry-token": startChannelRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      startChannelRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/channels/{channelId}/actions/start",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.StartChannelResponse>{},
        body: await response.json(),
        bodyKey: "channel",
        bodyModel: model.Channel,
        type: "model.Channel",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Stops a Channel so that it will no longer accept messages.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param StopChannelRequest
   * @return StopChannelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/StopChannel.ts.html |here} to see how to use StopChannel API.
   */
  public async stopChannel(
    stopChannelRequest: requests.StopChannelRequest
  ): Promise<responses.StopChannelResponse> {
    if (this.logger) this.logger.debug("Calling operation ManagementClient#stopChannel.");
    const operationName = "stopChannel";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/Channel/StopChannel";
    const pathParams = {
      "{odaInstanceId}": stopChannelRequest.odaInstanceId,
      "{channelId}": stopChannelRequest.channelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": stopChannelRequest.opcRequestId,
      "if-match": stopChannelRequest.ifMatch,
      "opc-retry-token": stopChannelRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      stopChannelRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/channels/{channelId}/actions/stop",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.StopChannelResponse>{},
        body: await response.json(),
        bodyKey: "channel",
        bodyModel: model.Channel,
        type: "model.Channel",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified Authentication Provider with the information in the request body.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateAuthenticationProviderRequest
   * @return UpdateAuthenticationProviderResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/UpdateAuthenticationProvider.ts.html |here} to see how to use UpdateAuthenticationProvider API.
   */
  public async updateAuthenticationProvider(
    updateAuthenticationProviderRequest: requests.UpdateAuthenticationProviderRequest
  ): Promise<responses.UpdateAuthenticationProviderResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ManagementClient#updateAuthenticationProvider.");
    const operationName = "updateAuthenticationProvider";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/AuthenticationProvider/UpdateAuthenticationProvider";
    const pathParams = {
      "{odaInstanceId}": updateAuthenticationProviderRequest.odaInstanceId,
      "{authenticationProviderId}": updateAuthenticationProviderRequest.authenticationProviderId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateAuthenticationProviderRequest.ifMatch,
      "opc-request-id": updateAuthenticationProviderRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateAuthenticationProviderRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/authenticationProviders/{authenticationProviderId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateAuthenticationProviderRequest.updateAuthenticationProviderDetails,
        "UpdateAuthenticationProviderDetails",
        model.UpdateAuthenticationProviderDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateAuthenticationProviderResponse>{},
        body: await response.json(),
        bodyKey: "authenticationProvider",
        bodyModel: model.AuthenticationProvider,
        type: "model.AuthenticationProvider",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified Channel with the information in the request body.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateChannelRequest
   * @return UpdateChannelResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/UpdateChannel.ts.html |here} to see how to use UpdateChannel API.
   */
  public async updateChannel(
    updateChannelRequest: requests.UpdateChannelRequest
  ): Promise<responses.UpdateChannelResponse> {
    if (this.logger) this.logger.debug("Calling operation ManagementClient#updateChannel.");
    const operationName = "updateChannel";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/Channel/UpdateChannel";
    const pathParams = {
      "{odaInstanceId}": updateChannelRequest.odaInstanceId,
      "{channelId}": updateChannelRequest.channelId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateChannelRequest.ifMatch,
      "opc-request-id": updateChannelRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateChannelRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/channels/{channelId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateChannelRequest.updateChannelDetails,
        "UpdateChannelDetails",
        model.UpdateChannelDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateChannelResponse>{},
        body: await response.json(),
        bodyKey: "channel",
        bodyModel: model.Channel,
        type: "model.Channel",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified Digital Assistant with the information in the request body.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateDigitalAssistantRequest
   * @return UpdateDigitalAssistantResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/UpdateDigitalAssistant.ts.html |here} to see how to use UpdateDigitalAssistant API.
   */
  public async updateDigitalAssistant(
    updateDigitalAssistantRequest: requests.UpdateDigitalAssistantRequest
  ): Promise<responses.UpdateDigitalAssistantResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ManagementClient#updateDigitalAssistant.");
    const operationName = "updateDigitalAssistant";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/DigitalAssistant/UpdateDigitalAssistant";
    const pathParams = {
      "{odaInstanceId}": updateDigitalAssistantRequest.odaInstanceId,
      "{digitalAssistantId}": updateDigitalAssistantRequest.digitalAssistantId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDigitalAssistantRequest.ifMatch,
      "opc-request-id": updateDigitalAssistantRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDigitalAssistantRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/digitalAssistants/{digitalAssistantId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDigitalAssistantRequest.updateDigitalAssistantDetails,
        "UpdateDigitalAssistantDetails",
        model.UpdateDigitalAssistantDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDigitalAssistantResponse>{},
        body: await response.json(),
        bodyKey: "digitalAssistant",
        bodyModel: model.DigitalAssistant,
        type: "model.DigitalAssistant",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified Digital Assistant Parameter with the information in the request body.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateDigitalAssistantParameterRequest
   * @return UpdateDigitalAssistantParameterResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/UpdateDigitalAssistantParameter.ts.html |here} to see how to use UpdateDigitalAssistantParameter API.
   */
  public async updateDigitalAssistantParameter(
    updateDigitalAssistantParameterRequest: requests.UpdateDigitalAssistantParameterRequest
  ): Promise<responses.UpdateDigitalAssistantParameterResponse> {
    if (this.logger)
      this.logger.debug("Calling operation ManagementClient#updateDigitalAssistantParameter.");
    const operationName = "updateDigitalAssistantParameter";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/DigitalAssistantParameter/UpdateDigitalAssistantParameter";
    const pathParams = {
      "{odaInstanceId}": updateDigitalAssistantParameterRequest.odaInstanceId,
      "{digitalAssistantId}": updateDigitalAssistantParameterRequest.digitalAssistantId,
      "{parameterName}": updateDigitalAssistantParameterRequest.parameterName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDigitalAssistantParameterRequest.ifMatch,
      "opc-request-id": updateDigitalAssistantParameterRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDigitalAssistantParameterRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/odaInstances/{odaInstanceId}/digitalAssistants/{digitalAssistantId}/parameters/{parameterName}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDigitalAssistantParameterRequest.updateDigitalAssistantParameterDetails,
        "UpdateDigitalAssistantParameterDetails",
        model.UpdateDigitalAssistantParameterDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDigitalAssistantParameterResponse>{},
        body: await response.json(),
        bodyKey: "digitalAssistantParameter",
        bodyModel: model.DigitalAssistantParameter,
        type: "model.DigitalAssistantParameter",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified Skill with the information in the request body.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateSkillRequest
   * @return UpdateSkillResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/UpdateSkill.ts.html |here} to see how to use UpdateSkill API.
   */
  public async updateSkill(
    updateSkillRequest: requests.UpdateSkillRequest
  ): Promise<responses.UpdateSkillResponse> {
    if (this.logger) this.logger.debug("Calling operation ManagementClient#updateSkill.");
    const operationName = "updateSkill";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/Skill/UpdateSkill";
    const pathParams = {
      "{odaInstanceId}": updateSkillRequest.odaInstanceId,
      "{skillId}": updateSkillRequest.skillId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateSkillRequest.ifMatch,
      "opc-request-id": updateSkillRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateSkillRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/skills/{skillId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateSkillRequest.updateSkillDetails,
        "UpdateSkillDetails",
        model.UpdateSkillDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateSkillResponse>{},
        body: await response.json(),
        bodyKey: "skill",
        bodyModel: model.Skill,
        type: "model.Skill",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified Skill Parameter with the information in the request body.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateSkillParameterRequest
   * @return UpdateSkillParameterResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/UpdateSkillParameter.ts.html |here} to see how to use UpdateSkillParameter API.
   */
  public async updateSkillParameter(
    updateSkillParameterRequest: requests.UpdateSkillParameterRequest
  ): Promise<responses.UpdateSkillParameterResponse> {
    if (this.logger) this.logger.debug("Calling operation ManagementClient#updateSkillParameter.");
    const operationName = "updateSkillParameter";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/SkillParameter/UpdateSkillParameter";
    const pathParams = {
      "{odaInstanceId}": updateSkillParameterRequest.odaInstanceId,
      "{skillId}": updateSkillParameterRequest.skillId,
      "{parameterName}": updateSkillParameterRequest.parameterName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateSkillParameterRequest.ifMatch,
      "opc-request-id": updateSkillParameterRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateSkillParameterRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/skills/{skillId}/parameters/{parameterName}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateSkillParameterRequest.updateSkillParameterDetails,
        "UpdateSkillParameterDetails",
        model.UpdateSkillParameterDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateSkillParameterResponse>{},
        body: await response.json(),
        bodyKey: "skillParameter",
        bodyModel: model.SkillParameter,
        type: "model.SkillParameter",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified Translator with the information in the request body.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateTranslatorRequest
   * @return UpdateTranslatorResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/UpdateTranslator.ts.html |here} to see how to use UpdateTranslator API.
   */
  public async updateTranslator(
    updateTranslatorRequest: requests.UpdateTranslatorRequest
  ): Promise<responses.UpdateTranslatorResponse> {
    if (this.logger) this.logger.debug("Calling operation ManagementClient#updateTranslator.");
    const operationName = "updateTranslator";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/Translator/UpdateTranslator";
    const pathParams = {
      "{odaInstanceId}": updateTranslatorRequest.odaInstanceId,
      "{translatorId}": updateTranslatorRequest.translatorId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateTranslatorRequest.ifMatch,
      "opc-request-id": updateTranslatorRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateTranslatorRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/translators/{translatorId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateTranslatorRequest.updateTranslatorDetails,
        "UpdateTranslatorDetails",
        model.UpdateTranslatorDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateTranslatorResponse>{},
        body: await response.json(),
        bodyKey: "translator",
        bodyModel: model.Translator,
        type: "model.Translator",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum OdaApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class OdaClient {
  protected static serviceEndpointTemplate =
    "https://digitalassistant-api.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": OdaWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker = null;
  protected _httpOptions: any = undefined;
  public targetService = "Oda";

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
    }
    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20190506";
    if (this.logger) this.logger.info(`OdaClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      OdaClient.serviceEndpointTemplate,
      region,
      OdaClient.endpointServiceName
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      OdaClient.serviceEndpointTemplate,
      regionId,
      OdaClient.endpointServiceName
    );
  }

  /**
   * Creates a new OdaWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): OdaWaiter {
    this._waiters = new OdaWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): OdaWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Moves an Digital Assistant instance into a different compartment. When provided, If-Match is checked against
   * ETag values of the resource.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeOdaInstanceCompartmentRequest
   * @return ChangeOdaInstanceCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/ChangeOdaInstanceCompartment.ts.html |here} to see how to use ChangeOdaInstanceCompartment API.
   */
  public async changeOdaInstanceCompartment(
    changeOdaInstanceCompartmentRequest: requests.ChangeOdaInstanceCompartmentRequest
  ): Promise<responses.ChangeOdaInstanceCompartmentResponse> {
    if (this.logger) this.logger.debug("Calling operation OdaClient#changeOdaInstanceCompartment.");
    const operationName = "changeOdaInstanceCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/OdaInstance/ChangeOdaInstanceCompartment";
    const pathParams = {
      "{odaInstanceId}": changeOdaInstanceCompartmentRequest.odaInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeOdaInstanceCompartmentRequest.ifMatch,
      "opc-request-id": changeOdaInstanceCompartmentRequest.opcRequestId,
      "opc-retry-token": changeOdaInstanceCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeOdaInstanceCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeOdaInstanceCompartmentRequest.changeOdaInstanceCompartmentDetails,
        "ChangeOdaInstanceCompartmentDetails",
        model.ChangeOdaInstanceCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeOdaInstanceCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Starts an asynchronous job to create a Digital Assistant instance.
* <p>
To monitor the status of the job, take the `opc-work-request-id` response
* header value and use it to call `GET /workRequests/{workRequestId}`.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateOdaInstanceRequest
     * @return CreateOdaInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/CreateOdaInstance.ts.html |here} to see how to use CreateOdaInstance API.
     */
  public async createOdaInstance(
    createOdaInstanceRequest: requests.CreateOdaInstanceRequest
  ): Promise<responses.CreateOdaInstanceResponse> {
    if (this.logger) this.logger.debug("Calling operation OdaClient#createOdaInstance.");
    const operationName = "createOdaInstance";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createOdaInstanceRequest.opcRequestId,
      "opc-retry-token": createOdaInstanceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createOdaInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createOdaInstanceRequest.createOdaInstanceDetails,
        "CreateOdaInstanceDetails",
        model.CreateOdaInstanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateOdaInstanceResponse>{},
        body: await response.json(),
        bodyKey: "odaInstance",
        bodyModel: model.OdaInstance,
        type: "model.OdaInstance",
        responseHeaders: [
          {
            value: response.headers.get("Location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Starts an asynchronous job to create a Digital Assistant instance attachment.
* <p>
To monitor the status of the job, take the `opc-work-request-id` response
* header value and use it to call `GET /workRequests/{workRequestId}`.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateOdaInstanceAttachmentRequest
     * @return CreateOdaInstanceAttachmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/CreateOdaInstanceAttachment.ts.html |here} to see how to use CreateOdaInstanceAttachment API.
     */
  public async createOdaInstanceAttachment(
    createOdaInstanceAttachmentRequest: requests.CreateOdaInstanceAttachmentRequest
  ): Promise<responses.CreateOdaInstanceAttachmentResponse> {
    if (this.logger) this.logger.debug("Calling operation OdaClient#createOdaInstanceAttachment.");
    const operationName = "createOdaInstanceAttachment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/OdaInstanceAttachment/CreateOdaInstanceAttachment";
    const pathParams = {
      "{odaInstanceId}": createOdaInstanceAttachmentRequest.odaInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createOdaInstanceAttachmentRequest.opcRequestId,
      "opc-retry-token": createOdaInstanceAttachmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createOdaInstanceAttachmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/attachments",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createOdaInstanceAttachmentRequest.createOdaInstanceAttachmentDetails,
        "CreateOdaInstanceAttachmentDetails",
        model.CreateOdaInstanceAttachmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateOdaInstanceAttachmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Starts an asynchronous job to delete the specified Digital Assistant instance.
   * To monitor the status of the job, take the `opc-work-request-id` response header value and use it to call `GET /workRequests/{workRequestId}`.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteOdaInstanceRequest
   * @return DeleteOdaInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/DeleteOdaInstance.ts.html |here} to see how to use DeleteOdaInstance API.
   */
  public async deleteOdaInstance(
    deleteOdaInstanceRequest: requests.DeleteOdaInstanceRequest
  ): Promise<responses.DeleteOdaInstanceResponse> {
    if (this.logger) this.logger.debug("Calling operation OdaClient#deleteOdaInstance.");
    const operationName = "deleteOdaInstance";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/OdaInstance/DeleteOdaInstance";
    const pathParams = {
      "{odaInstanceId}": deleteOdaInstanceRequest.odaInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteOdaInstanceRequest.ifMatch,
      "opc-request-id": deleteOdaInstanceRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteOdaInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteOdaInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Starts an asynchronous job to delete the specified Digital Assistant instance attachment.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteOdaInstanceAttachmentRequest
   * @return DeleteOdaInstanceAttachmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/DeleteOdaInstanceAttachment.ts.html |here} to see how to use DeleteOdaInstanceAttachment API.
   */
  public async deleteOdaInstanceAttachment(
    deleteOdaInstanceAttachmentRequest: requests.DeleteOdaInstanceAttachmentRequest
  ): Promise<responses.DeleteOdaInstanceAttachmentResponse> {
    if (this.logger) this.logger.debug("Calling operation OdaClient#deleteOdaInstanceAttachment.");
    const operationName = "deleteOdaInstanceAttachment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/OdaInstanceAttachment/DeleteOdaInstanceAttachment";
    const pathParams = {
      "{odaInstanceId}": deleteOdaInstanceAttachmentRequest.odaInstanceId,
      "{attachmentId}": deleteOdaInstanceAttachmentRequest.attachmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteOdaInstanceAttachmentRequest.ifMatch,
      "opc-request-id": deleteOdaInstanceAttachmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteOdaInstanceAttachmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/attachments/{attachmentId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteOdaInstanceAttachmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the specified Digital Assistant instance.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetOdaInstanceRequest
   * @return GetOdaInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/GetOdaInstance.ts.html |here} to see how to use GetOdaInstance API.
   */
  public async getOdaInstance(
    getOdaInstanceRequest: requests.GetOdaInstanceRequest
  ): Promise<responses.GetOdaInstanceResponse> {
    if (this.logger) this.logger.debug("Calling operation OdaClient#getOdaInstance.");
    const operationName = "getOdaInstance";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/OdaInstance/GetOdaInstance";
    const pathParams = {
      "{odaInstanceId}": getOdaInstanceRequest.odaInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getOdaInstanceRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getOdaInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetOdaInstanceResponse>{},
        body: await response.json(),
        bodyKey: "odaInstance",
        bodyModel: model.OdaInstance,
        type: "model.OdaInstance",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets an ODA instance attachment by identifier
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetOdaInstanceAttachmentRequest
   * @return GetOdaInstanceAttachmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/GetOdaInstanceAttachment.ts.html |here} to see how to use GetOdaInstanceAttachment API.
   */
  public async getOdaInstanceAttachment(
    getOdaInstanceAttachmentRequest: requests.GetOdaInstanceAttachmentRequest
  ): Promise<responses.GetOdaInstanceAttachmentResponse> {
    if (this.logger) this.logger.debug("Calling operation OdaClient#getOdaInstanceAttachment.");
    const operationName = "getOdaInstanceAttachment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/OdaInstanceAttachment/GetOdaInstanceAttachment";
    const pathParams = {
      "{odaInstanceId}": getOdaInstanceAttachmentRequest.odaInstanceId,
      "{attachmentId}": getOdaInstanceAttachmentRequest.attachmentId
    };

    const queryParams = {
      "includeOwnerMetadata": getOdaInstanceAttachmentRequest.includeOwnerMetadata
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getOdaInstanceAttachmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getOdaInstanceAttachmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/attachments/{attachmentId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetOdaInstanceAttachmentResponse>{},
        body: await response.json(),
        bodyKey: "odaInstanceAttachment",
        bodyModel: model.OdaInstanceAttachment,
        type: "model.OdaInstanceAttachment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Gets information about the work request with the specified ID, including its status.
* <p>
You can use this operation to monitor the status of jobs that you
* requested to create, delete, and update instances.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation OdaClient#getWorkRequest.");
    const operationName = "getWorkRequest";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/WorkRequest/GetWorkRequest";
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of ODA instance attachments
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListOdaInstanceAttachmentsRequest
   * @return ListOdaInstanceAttachmentsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/ListOdaInstanceAttachments.ts.html |here} to see how to use ListOdaInstanceAttachments API.
   */
  public async listOdaInstanceAttachments(
    listOdaInstanceAttachmentsRequest: requests.ListOdaInstanceAttachmentsRequest
  ): Promise<responses.ListOdaInstanceAttachmentsResponse> {
    if (this.logger) this.logger.debug("Calling operation OdaClient#listOdaInstanceAttachments.");
    const operationName = "listOdaInstanceAttachments";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/OdaInstanceAttachmentCollection/ListOdaInstanceAttachments";
    const pathParams = {
      "{odaInstanceId}": listOdaInstanceAttachmentsRequest.odaInstanceId
    };

    const queryParams = {
      "includeOwnerMetadata": listOdaInstanceAttachmentsRequest.includeOwnerMetadata,
      "limit": listOdaInstanceAttachmentsRequest.limit,
      "page": listOdaInstanceAttachmentsRequest.page,
      "lifecycleState": listOdaInstanceAttachmentsRequest.lifecycleState,
      "sortOrder": listOdaInstanceAttachmentsRequest.sortOrder,
      "sortBy": listOdaInstanceAttachmentsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listOdaInstanceAttachmentsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listOdaInstanceAttachmentsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/attachments",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListOdaInstanceAttachmentsResponse>{},
        body: await response.json(),
        bodyKey: "odaInstanceAttachmentCollection",
        bodyModel: model.OdaInstanceAttachmentCollection,
        type: "model.OdaInstanceAttachmentCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Returns a page of Digital Assistant instances that belong to the specified
* compartment.
* <p>
If the `opc-next-page` header appears in the response, then
* there are more items to retrieve. To get the next page in the subsequent
* GET request, include the header's value as the `page` query parameter.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListOdaInstancesRequest
     * @return ListOdaInstancesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/ListOdaInstances.ts.html |here} to see how to use ListOdaInstances API.
     */
  public async listOdaInstances(
    listOdaInstancesRequest: requests.ListOdaInstancesRequest
  ): Promise<responses.ListOdaInstancesResponse> {
    if (this.logger) this.logger.debug("Calling operation OdaClient#listOdaInstances.");
    const operationName = "listOdaInstances";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/OdaInstanceSummary/ListOdaInstances";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listOdaInstancesRequest.compartmentId,
      "displayName": listOdaInstancesRequest.displayName,
      "lifecycleState": listOdaInstancesRequest.lifecycleState,
      "limit": listOdaInstancesRequest.limit,
      "page": listOdaInstancesRequest.page,
      "sortOrder": listOdaInstancesRequest.sortOrder,
      "sortBy": listOdaInstancesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listOdaInstancesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listOdaInstancesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListOdaInstancesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.OdaInstanceSummary,
        type: "Array<model.OdaInstanceSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listOdaInstancesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.OdaInstanceSummary objects
   * contained in responses from the listOdaInstances operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllOdaInstances(
    request: requests.ListOdaInstancesRequest
  ): AsyncIterableIterator<model.OdaInstanceSummary> {
    return paginateRecords(request, req => this.listOdaInstances(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listOdaInstancesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listOdaInstances operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllOdaInstancesResponses(
    request: requests.ListOdaInstancesRequest
  ): AsyncIterableIterator<responses.ListOdaInstancesResponse> {
    return paginateResponses(request, req => this.listOdaInstances(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.OdaInstanceSummary objects
   * contained in responses from the listOdaInstances operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listOdaInstancesRecordIterator(
    request: requests.ListOdaInstancesRequest
  ): AsyncIterableIterator<model.OdaInstanceSummary> {
    return paginateRecords(request, req => this.listOdaInstances(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listOdaInstances operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listOdaInstancesResponseIterator(
    request: requests.ListOdaInstancesRequest
  ): AsyncIterableIterator<responses.ListOdaInstancesResponse> {
    return paginateResponses(request, req => this.listOdaInstances(req));
  }

  /**
     * Returns a page of errors for the specified work request.
* <p>
If the `opc-next-page` header appears in the response, then
* there are more items to retrieve. To get the next page in the subsequent
* GET request, include the header's value as the `page` query parameter.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger) this.logger.debug("Calling operation OdaClient#listWorkRequestErrors.");
    const operationName = "listWorkRequestErrors";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/WorkRequestError/ListWorkRequestErrors";
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit,
      "sortBy": listWorkRequestErrorsRequest.sortBy,
      "sortOrder": listWorkRequestErrorsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestError,
        type: "Array<model.WorkRequestError>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestErrorsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.WorkRequestError objects
   * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestErrors(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<model.WorkRequestError> {
    return paginateRecords(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestErrorsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestErrorsResponses(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestErrorsResponse> {
    return paginateResponses(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestError objects
   * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestErrorsRecordIterator(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<model.WorkRequestError> {
    return paginateRecords(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestErrorsResponseIterator(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestErrorsResponse> {
    return paginateResponses(request, req => this.listWorkRequestErrors(req));
  }

  /**
     * Returns a page of of log messages for a given work request.
* <p>
If the `opc-next-page` header appears in the response, then
* there are more items to retrieve. To get the next page in the subsequent
* GET request, include the header's value as the `page` query parameter.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger) this.logger.debug("Calling operation OdaClient#listWorkRequestLogs.");
    const operationName = "listWorkRequestLogs";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/WorkRequestLogEntry/ListWorkRequestLogs";
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit,
      "sortBy": listWorkRequestLogsRequest.sortBy,
      "sortOrder": listWorkRequestLogsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestLogEntry,
        type: "Array<model.WorkRequestLogEntry>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestLogsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
   * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestLogs(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<model.WorkRequestLogEntry> {
    return paginateRecords(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestLogsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestLogsResponses(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestLogsResponse> {
    return paginateResponses(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
   * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestLogsRecordIterator(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<model.WorkRequestLogEntry> {
    return paginateRecords(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestLogsResponseIterator(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestLogsResponse> {
    return paginateResponses(request, req => this.listWorkRequestLogs(req));
  }

  /**
     * Returns a page of work requests for the specified compartment.
* <p>
If the `opc-next-page` header appears in the response, then
* there are more items to retrieve. To get the next page in the subsequent
* GET request, include the header's value as the `page` query parameter.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger) this.logger.debug("Calling operation OdaClient#listWorkRequests.");
    const operationName = "listWorkRequests";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/WorkRequest/ListWorkRequests";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "odaInstanceId": listWorkRequestsRequest.odaInstanceId,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit,
      "sortBy": listWorkRequestsRequest.sortBy,
      "sortOrder": listWorkRequestsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestSummary,
        type: "Array<model.WorkRequestSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
   * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequests(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<model.WorkRequestSummary> {
    return paginateRecords(request, req => this.listWorkRequests(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestsResponses(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestsResponse> {
    return paginateResponses(request, req => this.listWorkRequests(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
   * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestsRecordIterator(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<model.WorkRequestSummary> {
    return paginateRecords(request, req => this.listWorkRequests(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestsResponseIterator(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestsResponse> {
    return paginateResponses(request, req => this.listWorkRequests(req));
  }

  /**
   * Starts an inactive Digital Assistant instance. Once active, the instance will be accessible and metering
   * of requests will be started again.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param StartOdaInstanceRequest
   * @return StartOdaInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/StartOdaInstance.ts.html |here} to see how to use StartOdaInstance API.
   */
  public async startOdaInstance(
    startOdaInstanceRequest: requests.StartOdaInstanceRequest
  ): Promise<responses.StartOdaInstanceResponse> {
    if (this.logger) this.logger.debug("Calling operation OdaClient#startOdaInstance.");
    const operationName = "startOdaInstance";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/OdaInstance/StartOdaInstance";
    const pathParams = {
      "{odaInstanceId}": startOdaInstanceRequest.odaInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": startOdaInstanceRequest.opcRequestId,
      "if-match": startOdaInstanceRequest.ifMatch,
      "opc-retry-token": startOdaInstanceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      startOdaInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/actions/start",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.StartOdaInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Stops an active Digital Assistant instance. Once inactive, the instance will not be accessible and metering
   * of requests will be stopped until the instance is started again. Data associated with the instance
   * is not affected.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param StopOdaInstanceRequest
   * @return StopOdaInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/StopOdaInstance.ts.html |here} to see how to use StopOdaInstance API.
   */
  public async stopOdaInstance(
    stopOdaInstanceRequest: requests.StopOdaInstanceRequest
  ): Promise<responses.StopOdaInstanceResponse> {
    if (this.logger) this.logger.debug("Calling operation OdaClient#stopOdaInstance.");
    const operationName = "stopOdaInstance";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/OdaInstance/StopOdaInstance";
    const pathParams = {
      "{odaInstanceId}": stopOdaInstanceRequest.odaInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": stopOdaInstanceRequest.opcRequestId,
      "if-match": stopOdaInstanceRequest.ifMatch,
      "opc-retry-token": stopOdaInstanceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      stopOdaInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/actions/stop",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.StopOdaInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the specified Digital Assistant instance with the information in the request body.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateOdaInstanceRequest
   * @return UpdateOdaInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/UpdateOdaInstance.ts.html |here} to see how to use UpdateOdaInstance API.
   */
  public async updateOdaInstance(
    updateOdaInstanceRequest: requests.UpdateOdaInstanceRequest
  ): Promise<responses.UpdateOdaInstanceResponse> {
    if (this.logger) this.logger.debug("Calling operation OdaClient#updateOdaInstance.");
    const operationName = "updateOdaInstance";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/OdaInstance/UpdateOdaInstance";
    const pathParams = {
      "{odaInstanceId}": updateOdaInstanceRequest.odaInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateOdaInstanceRequest.ifMatch,
      "opc-request-id": updateOdaInstanceRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateOdaInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateOdaInstanceRequest.updateOdaInstanceDetails,
        "UpdateOdaInstanceDetails",
        model.UpdateOdaInstanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateOdaInstanceResponse>{},
        body: await response.json(),
        bodyKey: "odaInstance",
        bodyModel: model.OdaInstance,
        type: "model.OdaInstance",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the ODA instance attachment
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateOdaInstanceAttachmentRequest
   * @return UpdateOdaInstanceAttachmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/UpdateOdaInstanceAttachment.ts.html |here} to see how to use UpdateOdaInstanceAttachment API.
   */
  public async updateOdaInstanceAttachment(
    updateOdaInstanceAttachmentRequest: requests.UpdateOdaInstanceAttachmentRequest
  ): Promise<responses.UpdateOdaInstanceAttachmentResponse> {
    if (this.logger) this.logger.debug("Calling operation OdaClient#updateOdaInstanceAttachment.");
    const operationName = "updateOdaInstanceAttachment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/OdaInstanceAttachment/UpdateOdaInstanceAttachment";
    const pathParams = {
      "{odaInstanceId}": updateOdaInstanceAttachmentRequest.odaInstanceId,
      "{attachmentId}": updateOdaInstanceAttachmentRequest.attachmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateOdaInstanceAttachmentRequest.ifMatch,
      "opc-request-id": updateOdaInstanceAttachmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateOdaInstanceAttachmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/attachments/{attachmentId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateOdaInstanceAttachmentRequest.updateOdaInstanceAttachmentDetails,
        "UpdateOdaInstanceAttachmentDetails",
        model.UpdateOdaInstanceAttachmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateOdaInstanceAttachmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum OdapackageApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class OdapackageClient {
  protected static serviceEndpointTemplate =
    "https://digitalassistant-api.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker = null;
  protected _httpOptions: any = undefined;
  public targetService = "Odapackage";

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
    }
    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20190506";
    if (this.logger) this.logger.info(`OdapackageClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      OdapackageClient.serviceEndpointTemplate,
      region,
      OdapackageClient.endpointServiceName
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      OdapackageClient.serviceEndpointTemplate,
      regionId,
      OdapackageClient.endpointServiceName
    );
  }

  /**
     * Starts an asynchronous job to import a package into a Digital Assistant instance.
* <p>
To monitor the status of the job, take the `opc-work-request-id` response
* header value and use it to call `GET /workRequests/{workRequestId}`.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateImportedPackageRequest
     * @return CreateImportedPackageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/CreateImportedPackage.ts.html |here} to see how to use CreateImportedPackage API.
     */
  public async createImportedPackage(
    createImportedPackageRequest: requests.CreateImportedPackageRequest
  ): Promise<responses.CreateImportedPackageResponse> {
    if (this.logger) this.logger.debug("Calling operation OdapackageClient#createImportedPackage.");
    const operationName = "createImportedPackage";
    const apiReferenceLink = "";
    const pathParams = {
      "{odaInstanceId}": createImportedPackageRequest.odaInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createImportedPackageRequest.opcRetryToken,
      "opc-request-id": createImportedPackageRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createImportedPackageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/importedPackages",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createImportedPackageRequest.createImportedPackageDetails,
        "CreateImportedPackageDetails",
        model.CreateImportedPackageDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateImportedPackageResponse>{},
        body: await response.json(),
        bodyKey: "importedPackage",
        bodyModel: model.ImportedPackage,
        type: "model.ImportedPackage",
        responseHeaders: [
          {
            value: response.headers.get("Location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Starts an asynchronous job to delete a package from a Digital Assistant instance.
* <p>
To monitor the status of the job, take the `opc-work-request-id` response
* header value and use it to call `GET /workRequests/{workRequestId}`.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteImportedPackageRequest
     * @return DeleteImportedPackageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/DeleteImportedPackage.ts.html |here} to see how to use DeleteImportedPackage API.
     */
  public async deleteImportedPackage(
    deleteImportedPackageRequest: requests.DeleteImportedPackageRequest
  ): Promise<responses.DeleteImportedPackageResponse> {
    if (this.logger) this.logger.debug("Calling operation OdapackageClient#deleteImportedPackage.");
    const operationName = "deleteImportedPackage";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/ImportedPackage/DeleteImportedPackage";
    const pathParams = {
      "{odaInstanceId}": deleteImportedPackageRequest.odaInstanceId,
      "{packageId}": deleteImportedPackageRequest.packageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": deleteImportedPackageRequest.opcRetryToken,
      "if-match": deleteImportedPackageRequest.ifMatch,
      "opc-request-id": deleteImportedPackageRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteImportedPackageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/importedPackages/{packageId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteImportedPackageResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of summaries for imported packages in the instance.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetImportedPackageRequest
   * @return GetImportedPackageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/GetImportedPackage.ts.html |here} to see how to use GetImportedPackage API.
   */
  public async getImportedPackage(
    getImportedPackageRequest: requests.GetImportedPackageRequest
  ): Promise<responses.GetImportedPackageResponse> {
    if (this.logger) this.logger.debug("Calling operation OdapackageClient#getImportedPackage.");
    const operationName = "getImportedPackage";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/ImportedPackage/GetImportedPackage";
    const pathParams = {
      "{odaInstanceId}": getImportedPackageRequest.odaInstanceId,
      "{packageId}": getImportedPackageRequest.packageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getImportedPackageRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getImportedPackageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/importedPackages/{packageId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetImportedPackageResponse>{},
        body: await response.json(),
        bodyKey: "importedPackage",
        bodyModel: model.ImportedPackage,
        type: "model.ImportedPackage",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns details about a package, and how to import it.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetPackageRequest
   * @return GetPackageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/GetPackage.ts.html |here} to see how to use GetPackage API.
   */
  public async getPackage(
    getPackageRequest: requests.GetPackageRequest
  ): Promise<responses.GetPackageResponse> {
    if (this.logger) this.logger.debug("Calling operation OdapackageClient#getPackage.");
    const operationName = "getPackage";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/Package/GetPackage";
    const pathParams = {
      "{odaInstanceId}": getPackageRequest.odaInstanceId,
      "{packageId}": getPackageRequest.packageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getPackageRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getPackageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/packages/{packageId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetPackageResponse>{},
        body: await response.json(),
        bodyKey: "package",
        bodyModel: model.Package,
        type: "model.Package",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of summaries for imported packages in the instance.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListImportedPackagesRequest
   * @return ListImportedPackagesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/ListImportedPackages.ts.html |here} to see how to use ListImportedPackages API.
   */
  public async listImportedPackages(
    listImportedPackagesRequest: requests.ListImportedPackagesRequest
  ): Promise<responses.ListImportedPackagesResponse> {
    if (this.logger) this.logger.debug("Calling operation OdapackageClient#listImportedPackages.");
    const operationName = "listImportedPackages";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/ImportedPackageSummary/ListImportedPackages";
    const pathParams = {
      "{odaInstanceId}": listImportedPackagesRequest.odaInstanceId
    };

    const queryParams = {
      "name": listImportedPackagesRequest.name,
      "limit": listImportedPackagesRequest.limit,
      "page": listImportedPackagesRequest.page,
      "sortOrder": listImportedPackagesRequest.sortOrder,
      "sortBy": listImportedPackagesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listImportedPackagesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listImportedPackagesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/importedPackages",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListImportedPackagesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.ImportedPackageSummary,
        type: "Array<model.ImportedPackageSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listImportedPackagesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.ImportedPackageSummary objects
   * contained in responses from the listImportedPackages operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllImportedPackages(
    request: requests.ListImportedPackagesRequest
  ): AsyncIterableIterator<model.ImportedPackageSummary> {
    return paginateRecords(request, req => this.listImportedPackages(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listImportedPackagesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listImportedPackages operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllImportedPackagesResponses(
    request: requests.ListImportedPackagesRequest
  ): AsyncIterableIterator<responses.ListImportedPackagesResponse> {
    return paginateResponses(request, req => this.listImportedPackages(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.ImportedPackageSummary objects
   * contained in responses from the listImportedPackages operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listImportedPackagesRecordIterator(
    request: requests.ListImportedPackagesRequest
  ): AsyncIterableIterator<model.ImportedPackageSummary> {
    return paginateRecords(request, req => this.listImportedPackages(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listImportedPackages operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listImportedPackagesResponseIterator(
    request: requests.ListImportedPackagesRequest
  ): AsyncIterableIterator<responses.ListImportedPackagesResponse> {
    return paginateResponses(request, req => this.listImportedPackages(req));
  }

  /**
     * Returns a page of summaries for packages that are available for import. The optional odaInstanceId query
* parameter can be used to filter packages that are available for import by a specific instance. If odaInstanceId
* query parameter is not provided, the returned list will
* include packages available within the region indicated by the request URL. The optional resourceType query
* param may be specified to filter packages that contain the indicated resource type. If no resourceType query
* param is given, packages containing all resource types will be returned. The optional name query parameter can
* be used to limit the list to packages whose name matches the given name. The optional displayName query
* parameter can be used to limit the list to packages whose displayName matches the given name. The optional
* isLatestVersionOnly query parameter can be used to limit the returned list to include only the latest version
* of any given package. If not specified, all versions of any otherwise matching package will be returned.
* <p>
If the `opc-next-page` header appears in the response, then
* there are more items to retrieve. To get the next page in the subsequent
* GET request, include the header's value as the `page` query parameter.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListPackagesRequest
     * @return ListPackagesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/ListPackages.ts.html |here} to see how to use ListPackages API.
     */
  public async listPackages(
    listPackagesRequest: requests.ListPackagesRequest
  ): Promise<responses.ListPackagesResponse> {
    if (this.logger) this.logger.debug("Calling operation OdapackageClient#listPackages.");
    const operationName = "listPackages";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/digital-assistant/20190506/PackageSummary/ListPackages";
    const pathParams = {};

    const queryParams = {
      "odaInstanceId": listPackagesRequest.odaInstanceId,
      "resourceType": listPackagesRequest.resourceType,
      "name": listPackagesRequest.name,
      "displayName": listPackagesRequest.displayName,
      "isLatestSkillOnly": listPackagesRequest.isLatestSkillOnly,
      "limit": listPackagesRequest.limit,
      "page": listPackagesRequest.page,
      "sortOrder": listPackagesRequest.sortOrder,
      "sortBy": listPackagesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPackagesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPackagesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/packages",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPackagesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.PackageSummary,
        type: "Array<model.PackageSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listPackagesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.PackageSummary objects
   * contained in responses from the listPackages operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllPackages(
    request: requests.ListPackagesRequest
  ): AsyncIterableIterator<model.PackageSummary> {
    return paginateRecords(request, req => this.listPackages(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listPackagesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listPackages operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllPackagesResponses(
    request: requests.ListPackagesRequest
  ): AsyncIterableIterator<responses.ListPackagesResponse> {
    return paginateResponses(request, req => this.listPackages(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.PackageSummary objects
   * contained in responses from the listPackages operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listPackagesRecordIterator(
    request: requests.ListPackagesRequest
  ): AsyncIterableIterator<model.PackageSummary> {
    return paginateRecords(request, req => this.listPackages(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listPackages operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listPackagesResponseIterator(
    request: requests.ListPackagesRequest
  ): AsyncIterableIterator<responses.ListPackagesResponse> {
    return paginateResponses(request, req => this.listPackages(req));
  }

  /**
     * Starts an asynchronous job to update a package within a Digital Assistant instance.
* <p>
To monitor the status of the job, take the `opc-work-request-id` response
* header value and use it to call `GET /workRequests/{workRequestId}`.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateImportedPackageRequest
     * @return UpdateImportedPackageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/oda/UpdateImportedPackage.ts.html |here} to see how to use UpdateImportedPackage API.
     */
  public async updateImportedPackage(
    updateImportedPackageRequest: requests.UpdateImportedPackageRequest
  ): Promise<responses.UpdateImportedPackageResponse> {
    if (this.logger) this.logger.debug("Calling operation OdapackageClient#updateImportedPackage.");
    const operationName = "updateImportedPackage";
    const apiReferenceLink = "";
    const pathParams = {
      "{odaInstanceId}": updateImportedPackageRequest.odaInstanceId,
      "{packageId}": updateImportedPackageRequest.packageId
    };

    const queryParams = {
      "isReplaceSkills": updateImportedPackageRequest.isReplaceSkills
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": updateImportedPackageRequest.opcRetryToken,
      "if-match": updateImportedPackageRequest.ifMatch,
      "opc-request-id": updateImportedPackageRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateImportedPackageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/odaInstances/{odaInstanceId}/importedPackages/{packageId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateImportedPackageRequest.updateImportedPackageDetails,
        "UpdateImportedPackageDetails",
        model.UpdateImportedPackageDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateImportedPackageResponse>{},
        body: await response.json(),
        bodyKey: "importedPackage",
        bodyModel: model.ImportedPackage,
        type: "model.ImportedPackage",
        responseHeaders: [
          {
            value: response.headers.get("Location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
