/**
 * Organizations API
 * The Organizations API allows you to consolidate multiple OCI tenancies into an organization, and centrally manage your tenancies and its resources.
 * OpenAPI spec version: 20200801
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { SubscriptionClient } from "./client";
import { genericWaiter, genericTerminalConditionWaiter, WaiterConfiguration } from "oci-common";

export class SubscriptionWaiter {
  public constructor(
    private client: SubscriptionClient,
    private readonly config?: WaiterConfiguration
  ) {}

  /**
   * Waits forAssignedSubscription till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetAssignedSubscriptionResponse | null (null in case of 404 response)
   */
  public async forAssignedSubscription(
    request: serviceRequests.GetAssignedSubscriptionRequest,
    ...targetStates: models.SubscriptionLifecycleState[]
  ): Promise<serviceResponses.GetAssignedSubscriptionResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getAssignedSubscription(request),
      response => targetStates.includes(response.assignedSubscription.lifecycleState!),
      targetStates.includes(models.SubscriptionLifecycleState.Deleted)
    );
  }

  /**
   * Waits forSubscription till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetSubscriptionResponse | null (null in case of 404 response)
   */
  public async forSubscription(
    request: serviceRequests.GetSubscriptionRequest,
    ...targetStates: models.SubscriptionLifecycleState[]
  ): Promise<serviceResponses.GetSubscriptionResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getSubscription(request),
      response => targetStates.includes(response.subscription.lifecycleState!),
      targetStates.includes(models.SubscriptionLifecycleState.Deleted)
    );
  }

  /**
   * Waits forSubscriptionMapping till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetSubscriptionMappingResponse | null (null in case of 404 response)
   */
  public async forSubscriptionMapping(
    request: serviceRequests.GetSubscriptionMappingRequest,
    ...targetStates: models.SubscriptionMapping.LifecycleState[]
  ): Promise<serviceResponses.GetSubscriptionMappingResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getSubscriptionMapping(request),
      response => targetStates.includes(response.subscriptionMapping.lifecycleState!),
      targetStates.includes(models.SubscriptionMapping.LifecycleState.Deleted)
    );
  }
}
