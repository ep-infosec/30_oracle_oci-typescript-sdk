/**
 * Monitoring API
 * Use the Monitoring API to manage metric queries and alarms for assessing the health, capacity, and performance of your cloud resources.
Endpoints vary by operation. For PostMetric, use the `telemetry-ingestion` endpoints; for all other operations, use the `telemetry` endpoints.
For information about monitoring, see [Monitoring Overview](/iaas/Content/Monitoring/Concepts/monitoringoverview.htm).

 * OpenAPI spec version: 20180401
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { paginateRecords, paginateResponses } from "oci-common";
import { MonitoringWaiter } from "./monitoring-waiter";
import { composeResponse, composeRequest, GenericRetrier } from "oci-common";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum MonitoringApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class MonitoringClient {
  protected static serviceEndpointTemplate = "https://telemetry.{region}.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": MonitoringWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker = null;
  protected _httpOptions: any = undefined;
  public targetService = "Monitoring";

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
    }
    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20180401";
    if (this.logger) this.logger.info(`MonitoringClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      MonitoringClient.serviceEndpointTemplate,
      region,
      MonitoringClient.endpointServiceName
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      MonitoringClient.serviceEndpointTemplate,
      regionId,
      MonitoringClient.endpointServiceName
    );
  }

  /**
   * Creates a new MonitoringWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): MonitoringWaiter {
    this._waiters = new MonitoringWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): MonitoringWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
     * Moves an alarm into a different compartment within the same tenancy.
* <p>
For information about moving resources between compartments, see [Moving Resources Between Compartments](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ChangeAlarmCompartmentRequest
     * @return ChangeAlarmCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/ChangeAlarmCompartment.ts.html |here} to see how to use ChangeAlarmCompartment API.
     */
  public async changeAlarmCompartment(
    changeAlarmCompartmentRequest: requests.ChangeAlarmCompartmentRequest
  ): Promise<responses.ChangeAlarmCompartmentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MonitoringClient#changeAlarmCompartment.");
    const operationName = "changeAlarmCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/monitoring/20180401/Alarm/ChangeAlarmCompartment";
    const pathParams = {
      "{alarmId}": changeAlarmCompartmentRequest.alarmId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeAlarmCompartmentRequest.ifMatch,
      "opc-request-id": changeAlarmCompartmentRequest.opcRequestId,
      "opc-retry-token": changeAlarmCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeAlarmCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/alarms/{alarmId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeAlarmCompartmentRequest.changeAlarmCompartmentDetails,
        "ChangeAlarmCompartmentDetails",
        model.ChangeAlarmCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeAlarmCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Creates a new alarm in the specified compartment.
* For important limits information, see [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#Limits).
* <p>
This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
* Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
* or transactions, per second (TPS) for a given tenancy.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param CreateAlarmRequest
     * @return CreateAlarmResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/CreateAlarm.ts.html |here} to see how to use CreateAlarm API.
     */
  public async createAlarm(
    createAlarmRequest: requests.CreateAlarmRequest
  ): Promise<responses.CreateAlarmResponse> {
    if (this.logger) this.logger.debug("Calling operation MonitoringClient#createAlarm.");
    const operationName = "createAlarm";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/monitoring/20180401/Alarm/CreateAlarm";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createAlarmRequest.opcRequestId,
      "opc-retry-token": createAlarmRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createAlarmRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/alarms",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createAlarmRequest.createAlarmDetails,
        "CreateAlarmDetails",
        model.CreateAlarmDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateAlarmResponse>{},
        body: await response.json(),
        bodyKey: "alarm",
        bodyModel: model.Alarm,
        type: "model.Alarm",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Deletes the specified alarm.
* For important limits information, see [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#Limits).
* <p>
This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
* Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
* or transactions, per second (TPS) for a given tenancy.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param DeleteAlarmRequest
     * @return DeleteAlarmResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/DeleteAlarm.ts.html |here} to see how to use DeleteAlarm API.
     */
  public async deleteAlarm(
    deleteAlarmRequest: requests.DeleteAlarmRequest
  ): Promise<responses.DeleteAlarmResponse> {
    if (this.logger) this.logger.debug("Calling operation MonitoringClient#deleteAlarm.");
    const operationName = "deleteAlarm";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/monitoring/20180401/Alarm/DeleteAlarm";
    const pathParams = {
      "{alarmId}": deleteAlarmRequest.alarmId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteAlarmRequest.ifMatch,
      "opc-request-id": deleteAlarmRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteAlarmRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/alarms/{alarmId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteAlarmResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Gets the specified alarm.
* For important limits information, see [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#Limits).
* <p>
This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
* Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
* or transactions, per second (TPS) for a given tenancy.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetAlarmRequest
     * @return GetAlarmResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/GetAlarm.ts.html |here} to see how to use GetAlarm API.
     */
  public async getAlarm(
    getAlarmRequest: requests.GetAlarmRequest
  ): Promise<responses.GetAlarmResponse> {
    if (this.logger) this.logger.debug("Calling operation MonitoringClient#getAlarm.");
    const operationName = "getAlarm";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/monitoring/20180401/Alarm/GetAlarm";
    const pathParams = {
      "{alarmId}": getAlarmRequest.alarmId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getAlarmRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getAlarmRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/alarms/{alarmId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAlarmResponse>{},
        body: await response.json(),
        bodyKey: "alarm",
        bodyModel: model.Alarm,
        type: "model.Alarm",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Get the history of the specified alarm.
* For important limits information, see [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#Limits).
* <p>
This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
* Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
* or transactions, per second (TPS) for a given tenancy.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param GetAlarmHistoryRequest
     * @return GetAlarmHistoryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/GetAlarmHistory.ts.html |here} to see how to use GetAlarmHistory API.
     */
  public async getAlarmHistory(
    getAlarmHistoryRequest: requests.GetAlarmHistoryRequest
  ): Promise<responses.GetAlarmHistoryResponse> {
    if (this.logger) this.logger.debug("Calling operation MonitoringClient#getAlarmHistory.");
    const operationName = "getAlarmHistory";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/monitoring/20180401/AlarmHistoryCollection/GetAlarmHistory";
    const pathParams = {
      "{alarmId}": getAlarmHistoryRequest.alarmId
    };

    const queryParams = {
      "alarmHistorytype": getAlarmHistoryRequest.alarmHistorytype,
      "page": getAlarmHistoryRequest.page,
      "limit": getAlarmHistoryRequest.limit,
      "timestampGreaterThanOrEqualTo": getAlarmHistoryRequest.timestampGreaterThanOrEqualTo,
      "timestampLessThan": getAlarmHistoryRequest.timestampLessThan
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getAlarmHistoryRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getAlarmHistoryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/alarms/{alarmId}/history",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAlarmHistoryResponse>{},
        body: await response.json(),
        bodyKey: "alarmHistoryCollection",
        bodyModel: model.AlarmHistoryCollection,
        type: "model.AlarmHistoryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Lists the alarms for the specified compartment.
* For important limits information, see [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#Limits).
* <p>
This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
* Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
* or transactions, per second (TPS) for a given tenancy.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListAlarmsRequest
     * @return ListAlarmsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/ListAlarms.ts.html |here} to see how to use ListAlarms API.
     */
  public async listAlarms(
    listAlarmsRequest: requests.ListAlarmsRequest
  ): Promise<responses.ListAlarmsResponse> {
    if (this.logger) this.logger.debug("Calling operation MonitoringClient#listAlarms.");
    const operationName = "listAlarms";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/monitoring/20180401/AlarmSummary/ListAlarms";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listAlarmsRequest.compartmentId,
      "page": listAlarmsRequest.page,
      "limit": listAlarmsRequest.limit,
      "displayName": listAlarmsRequest.displayName,
      "lifecycleState": listAlarmsRequest.lifecycleState,
      "sortBy": listAlarmsRequest.sortBy,
      "sortOrder": listAlarmsRequest.sortOrder,
      "compartmentIdInSubtree": listAlarmsRequest.compartmentIdInSubtree
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAlarmsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAlarmsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/alarms",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAlarmsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.AlarmSummary,
        type: "Array<model.AlarmSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listAlarmsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.AlarmSummary objects
   * contained in responses from the listAlarms operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAlarms(
    request: requests.ListAlarmsRequest
  ): AsyncIterableIterator<model.AlarmSummary> {
    return paginateRecords(request, req => this.listAlarms(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listAlarmsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listAlarms operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAlarmsResponses(
    request: requests.ListAlarmsRequest
  ): AsyncIterableIterator<responses.ListAlarmsResponse> {
    return paginateResponses(request, req => this.listAlarms(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.AlarmSummary objects
   * contained in responses from the listAlarms operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAlarmsRecordIterator(
    request: requests.ListAlarmsRequest
  ): AsyncIterableIterator<model.AlarmSummary> {
    return paginateRecords(request, req => this.listAlarms(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listAlarms operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAlarmsResponseIterator(
    request: requests.ListAlarmsRequest
  ): AsyncIterableIterator<responses.ListAlarmsResponse> {
    return paginateResponses(request, req => this.listAlarms(req));
  }

  /**
     * List the status of each alarm in the specified compartment.
* Status is collective, across all metric streams in the alarm.
* To list alarm status for each metric stream, use {@link #retrieveDimensionStates(RetrieveDimensionStatesRequest) retrieveDimensionStates}.
* The alarm attribute `isNotificationsPerMetricDimensionEnabled` must be set to `true`.
* For important limits information, see [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#Limits).
* <p>
This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
* Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
* or transactions, per second (TPS) for a given tenancy.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListAlarmsStatusRequest
     * @return ListAlarmsStatusResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/ListAlarmsStatus.ts.html |here} to see how to use ListAlarmsStatus API.
     */
  public async listAlarmsStatus(
    listAlarmsStatusRequest: requests.ListAlarmsStatusRequest
  ): Promise<responses.ListAlarmsStatusResponse> {
    if (this.logger) this.logger.debug("Calling operation MonitoringClient#listAlarmsStatus.");
    const operationName = "listAlarmsStatus";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/monitoring/20180401/AlarmStatusSummary/ListAlarmsStatus";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listAlarmsStatusRequest.compartmentId,
      "compartmentIdInSubtree": listAlarmsStatusRequest.compartmentIdInSubtree,
      "page": listAlarmsStatusRequest.page,
      "limit": listAlarmsStatusRequest.limit,
      "displayName": listAlarmsStatusRequest.displayName,
      "sortBy": listAlarmsStatusRequest.sortBy,
      "sortOrder": listAlarmsStatusRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAlarmsStatusRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAlarmsStatusRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/alarms/status",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAlarmsStatusResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.AlarmStatusSummary,
        type: "Array<model.AlarmStatusSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listAlarmsStatusRecordIterator function.
   * Creates a new async iterator which will iterate over the models.AlarmStatusSummary objects
   * contained in responses from the listAlarmsStatus operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAlarmsStatus(
    request: requests.ListAlarmsStatusRequest
  ): AsyncIterableIterator<model.AlarmStatusSummary> {
    return paginateRecords(request, req => this.listAlarmsStatus(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listAlarmsStatusResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listAlarmsStatus operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAlarmsStatusResponses(
    request: requests.ListAlarmsStatusRequest
  ): AsyncIterableIterator<responses.ListAlarmsStatusResponse> {
    return paginateResponses(request, req => this.listAlarmsStatus(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.AlarmStatusSummary objects
   * contained in responses from the listAlarmsStatus operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAlarmsStatusRecordIterator(
    request: requests.ListAlarmsStatusRequest
  ): AsyncIterableIterator<model.AlarmStatusSummary> {
    return paginateRecords(request, req => this.listAlarmsStatus(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listAlarmsStatus operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAlarmsStatusResponseIterator(
    request: requests.ListAlarmsStatusRequest
  ): AsyncIterableIterator<responses.ListAlarmsStatusResponse> {
    return paginateResponses(request, req => this.listAlarmsStatus(req));
  }

  /**
     * Returns metric definitions that match the criteria specified in the request. Compartment OCID required.
* For information about metrics, see [Metrics Overview](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#MetricsOverview).
* For important limits information, see [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#Limits).
* <p>
Transactions Per Second (TPS) per-tenancy limit for this operation: 10.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param ListMetricsRequest
     * @return ListMetricsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/ListMetrics.ts.html |here} to see how to use ListMetrics API.
     */
  public async listMetrics(
    listMetricsRequest: requests.ListMetricsRequest
  ): Promise<responses.ListMetricsResponse> {
    if (this.logger) this.logger.debug("Calling operation MonitoringClient#listMetrics.");
    const operationName = "listMetrics";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/monitoring/20180401/Metric/ListMetrics";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listMetricsRequest.compartmentId,
      "page": listMetricsRequest.page,
      "limit": listMetricsRequest.limit,
      "compartmentIdInSubtree": listMetricsRequest.compartmentIdInSubtree
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listMetricsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMetricsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/metrics/actions/listMetrics",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        listMetricsRequest.listMetricsDetails,
        "ListMetricsDetails",
        model.ListMetricsDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMetricsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.Metric,
        type: "Array<model.Metric>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listMetricsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.Metric objects
   * contained in responses from the listMetrics operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllMetrics(request: requests.ListMetricsRequest): AsyncIterableIterator<model.Metric> {
    return paginateRecords(request, req => this.listMetrics(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listMetricsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listMetrics operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllMetricsResponses(
    request: requests.ListMetricsRequest
  ): AsyncIterableIterator<responses.ListMetricsResponse> {
    return paginateResponses(request, req => this.listMetrics(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.Metric objects
   * contained in responses from the listMetrics operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listMetricsRecordIterator(
    request: requests.ListMetricsRequest
  ): AsyncIterableIterator<model.Metric> {
    return paginateRecords(request, req => this.listMetrics(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listMetrics operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listMetricsResponseIterator(
    request: requests.ListMetricsRequest
  ): AsyncIterableIterator<responses.ListMetricsResponse> {
    return paginateResponses(request, req => this.listMetrics(req));
  }

  /**
     * Publishes raw metric data points to the Monitoring service.
* For more information about publishing metrics, see [Publishing Custom Metrics](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Tasks/publishingcustommetrics.htm).
* For important limits information, see [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#Limits).
* <p>
Per-call limits information follows.
* <p>
* Dimensions per metric group*. Maximum: 20. Minimum: 1.
* * Unique metric streams*. Maximum: 50.
* * Transactions Per Second (TPS) per-tenancy limit for this operation: 50.
* <p>
*A metric group is the combination of a given metric, metric namespace, and tenancy for the purpose of determining limits.
* A dimension is a qualifier provided in a metric definition.
* A metric stream is an individual set of aggregated data for a metric with zero or more dimension values.
* For more information about metric-related concepts, see [Monitoring Concepts](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#concepts).
* <p>
The endpoints for this operation differ from other Monitoring operations. Replace the string `telemetry` with `telemetry-ingestion` in the endpoint, as in the following example:
* <p>
https://telemetry-ingestion.eu-frankfurt-1.oraclecloud.com
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param PostMetricDataRequest
     * @return PostMetricDataResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/PostMetricData.ts.html |here} to see how to use PostMetricData API.
     */
  public async postMetricData(
    postMetricDataRequest: requests.PostMetricDataRequest
  ): Promise<responses.PostMetricDataResponse> {
    if (this.logger) this.logger.debug("Calling operation MonitoringClient#postMetricData.");
    const operationName = "postMetricData";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/monitoring/20180401/MetricData/PostMetricData";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": postMetricDataRequest.opcRequestId,
      "content-encoding": postMetricDataRequest.contentEncoding
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      postMetricDataRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/metrics",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        postMetricDataRequest.postMetricDataDetails,
        "PostMetricDataDetails",
        model.PostMetricDataDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PostMetricDataResponse>{},
        body: await response.json(),
        bodyKey: "postMetricDataResponseDetails",
        bodyModel: model.PostMetricDataResponseDetails,
        type: "model.PostMetricDataResponseDetails",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Removes any existing suppression for the specified alarm.
* For important limits information, see [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#Limits).
* <p>
This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
* Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
* or transactions, per second (TPS) for a given tenancy.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RemoveAlarmSuppressionRequest
     * @return RemoveAlarmSuppressionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/RemoveAlarmSuppression.ts.html |here} to see how to use RemoveAlarmSuppression API.
     */
  public async removeAlarmSuppression(
    removeAlarmSuppressionRequest: requests.RemoveAlarmSuppressionRequest
  ): Promise<responses.RemoveAlarmSuppressionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MonitoringClient#removeAlarmSuppression.");
    const operationName = "removeAlarmSuppression";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/monitoring/20180401/Suppression/RemoveAlarmSuppression";
    const pathParams = {
      "{alarmId}": removeAlarmSuppressionRequest.alarmId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": removeAlarmSuppressionRequest.ifMatch,
      "opc-request-id": removeAlarmSuppressionRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      removeAlarmSuppressionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/alarms/{alarmId}/actions/removeSuppression",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RemoveAlarmSuppressionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Lists the current alarm status of each metric stream, where status is derived from the metric stream's last associated transition. 
* Optionally filter by status value and one or more dimension key-value pairs.
* This operation is only valid for alarms that have notifications per dimension enabled (`isNotificationsPerMetricDimensionEnabled=true`).
*  If `isNotificationsPerMetricDimensionEnabled` for the alarm is false or null, then no results are returned.
* <p>
For important limits information, see [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#Limits).
*  
*  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
*  Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
*  or transactions, per second (TPS) for a given tenancy.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param RetrieveDimensionStatesRequest
     * @return RetrieveDimensionStatesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/RetrieveDimensionStates.ts.html |here} to see how to use RetrieveDimensionStates API.
     */
  public async retrieveDimensionStates(
    retrieveDimensionStatesRequest: requests.RetrieveDimensionStatesRequest
  ): Promise<responses.RetrieveDimensionStatesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation MonitoringClient#retrieveDimensionStates.");
    const operationName = "retrieveDimensionStates";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/monitoring/20180401/AlarmDimensionStatesCollection/RetrieveDimensionStates";
    const pathParams = {
      "{alarmId}": retrieveDimensionStatesRequest.alarmId
    };

    const queryParams = {
      "page": retrieveDimensionStatesRequest.page,
      "limit": retrieveDimensionStatesRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": retrieveDimensionStatesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      retrieveDimensionStatesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/alarms/{alarmId}/actions/retrieveDimensionStates",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        retrieveDimensionStatesRequest.retrieveDimensionStatesDetails,
        "RetrieveDimensionStatesDetails",
        model.RetrieveDimensionStatesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RetrieveDimensionStatesResponse>{},
        body: await response.json(),
        bodyKey: "alarmDimensionStatesCollection",
        bodyModel: model.AlarmDimensionStatesCollection,
        type: "model.AlarmDimensionStatesCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Returns aggregated data that match the criteria specified in the request. Compartment OCID required.
* For information on metric queries, see [Building Metric Queries](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Tasks/buildingqueries.htm).
* For important limits information, see [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#Limits).
* <p>
Transactions Per Second (TPS) per-tenancy limit for this operation: 10.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param SummarizeMetricsDataRequest
     * @return SummarizeMetricsDataResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/SummarizeMetricsData.ts.html |here} to see how to use SummarizeMetricsData API.
     */
  public async summarizeMetricsData(
    summarizeMetricsDataRequest: requests.SummarizeMetricsDataRequest
  ): Promise<responses.SummarizeMetricsDataResponse> {
    if (this.logger) this.logger.debug("Calling operation MonitoringClient#summarizeMetricsData.");
    const operationName = "summarizeMetricsData";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/monitoring/20180401/MetricData/SummarizeMetricsData";
    const pathParams = {};

    const queryParams = {
      "compartmentId": summarizeMetricsDataRequest.compartmentId,
      "compartmentIdInSubtree": summarizeMetricsDataRequest.compartmentIdInSubtree
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": summarizeMetricsDataRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      summarizeMetricsDataRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/metrics/actions/summarizeMetricsData",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        summarizeMetricsDataRequest.summarizeMetricsDataDetails,
        "SummarizeMetricsDataDetails",
        model.SummarizeMetricsDataDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.SummarizeMetricsDataResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.MetricData,
        type: "Array<model.MetricData>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
     * Updates the specified alarm.
* For important limits information, see [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#Limits).
* <p>
This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
* Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
* or transactions, per second (TPS) for a given tenancy.
* 
     * This operation does not retry by default if the user has not defined a retry configuration.
     * @param UpdateAlarmRequest
     * @return UpdateAlarmResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/monitoring/UpdateAlarm.ts.html |here} to see how to use UpdateAlarm API.
     */
  public async updateAlarm(
    updateAlarmRequest: requests.UpdateAlarmRequest
  ): Promise<responses.UpdateAlarmResponse> {
    if (this.logger) this.logger.debug("Calling operation MonitoringClient#updateAlarm.");
    const operationName = "updateAlarm";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/monitoring/20180401/Alarm/UpdateAlarm";
    const pathParams = {
      "{alarmId}": updateAlarmRequest.alarmId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateAlarmRequest.ifMatch,
      "opc-request-id": updateAlarmRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateAlarmRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/alarms/{alarmId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateAlarmRequest.updateAlarmDetails,
        "UpdateAlarmDetails",
        model.UpdateAlarmDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateAlarmResponse>{},
        body: await response.json(),
        bodyKey: "alarm",
        bodyModel: model.Alarm,
        type: "model.Alarm",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
