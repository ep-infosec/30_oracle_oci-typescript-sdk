/**
 * Big Data Service API
 * REST API for Oracle Big Data Service. Use this API to build, deploy, and manage fully elastic Big Data Service clusters. Build on Hadoop, Spark and Data Science distributions, which can be fully integrated with existing enterprise data in Oracle Database and Oracle applications.

 * OpenAPI spec version: 20190531
 * Contact: rahul.ra.arora@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { paginateRecords, paginateResponses } from "oci-common";
import { BdsWaiter } from "./bds-waiter";
import { composeResponse, composeRequest, GenericRetrier } from "oci-common";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum BdsApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class BdsClient {
  protected static serviceEndpointTemplate =
    "https://bigdataservice.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": BdsWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker = null;
  protected _httpOptions: any = undefined;
  public targetService = "Bds";

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
    }
    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20190531";
    if (this.logger) this.logger.info(`BdsClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      BdsClient.serviceEndpointTemplate,
      region,
      BdsClient.endpointServiceName
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      BdsClient.serviceEndpointTemplate,
      regionId,
      BdsClient.endpointServiceName
    );
  }

  /**
   * Creates a new BdsWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): BdsWaiter {
    this._waiters = new BdsWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): BdsWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Activate specified metastore configuration.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ActivateBdsMetastoreConfigurationRequest
   * @return ActivateBdsMetastoreConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/ActivateBdsMetastoreConfiguration.ts.html |here} to see how to use ActivateBdsMetastoreConfiguration API.
   */
  public async activateBdsMetastoreConfiguration(
    activateBdsMetastoreConfigurationRequest: requests.ActivateBdsMetastoreConfigurationRequest
  ): Promise<responses.ActivateBdsMetastoreConfigurationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BdsClient#activateBdsMetastoreConfiguration.");
    const operationName = "activateBdsMetastoreConfiguration";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/BdsMetastoreConfiguration/ActivateBdsMetastoreConfiguration";
    const pathParams = {
      "{bdsInstanceId}": activateBdsMetastoreConfigurationRequest.bdsInstanceId,
      "{metastoreConfigId}": activateBdsMetastoreConfigurationRequest.metastoreConfigId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": activateBdsMetastoreConfigurationRequest.opcRequestId,
      "opc-retry-token": activateBdsMetastoreConfigurationRequest.opcRetryToken,
      "if-match": activateBdsMetastoreConfigurationRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      activateBdsMetastoreConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bdsInstances/{bdsInstanceId}/metastoreConfigs/{metastoreConfigId}/actions/activate",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        activateBdsMetastoreConfigurationRequest.activateBdsMetastoreConfigurationDetails,
        "ActivateBdsMetastoreConfigurationDetails",
        model.ActivateBdsMetastoreConfigurationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ActivateBdsMetastoreConfigurationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Add an autoscale configuration to the cluster.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param AddAutoScalingConfigurationRequest
   * @return AddAutoScalingConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/AddAutoScalingConfiguration.ts.html |here} to see how to use AddAutoScalingConfiguration API.
   */
  public async addAutoScalingConfiguration(
    addAutoScalingConfigurationRequest: requests.AddAutoScalingConfigurationRequest
  ): Promise<responses.AddAutoScalingConfigurationResponse> {
    if (this.logger) this.logger.debug("Calling operation BdsClient#addAutoScalingConfiguration.");
    const operationName = "addAutoScalingConfiguration";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/BdsInstance/AddAutoScalingConfiguration";
    const pathParams = {
      "{bdsInstanceId}": addAutoScalingConfigurationRequest.bdsInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": addAutoScalingConfigurationRequest.opcRequestId,
      "if-match": addAutoScalingConfigurationRequest.ifMatch,
      "opc-retry-token": addAutoScalingConfigurationRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      addAutoScalingConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bdsInstances/{bdsInstanceId}/autoScalingConfiguration",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        addAutoScalingConfigurationRequest.addAutoScalingConfigurationDetails,
        "AddAutoScalingConfigurationDetails",
        model.AddAutoScalingConfigurationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AddAutoScalingConfigurationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Adds block storage to existing worker/compute only worker nodes. The same amount of  storage will be added to all worker/compute only worker nodes. No change will be made to storage that is already attached. Block storage cannot be removed.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param AddBlockStorageRequest
   * @return AddBlockStorageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/AddBlockStorage.ts.html |here} to see how to use AddBlockStorage API.
   */
  public async addBlockStorage(
    addBlockStorageRequest: requests.AddBlockStorageRequest
  ): Promise<responses.AddBlockStorageResponse> {
    if (this.logger) this.logger.debug("Calling operation BdsClient#addBlockStorage.");
    const operationName = "addBlockStorage";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/BdsInstance/AddBlockStorage";
    const pathParams = {
      "{bdsInstanceId}": addBlockStorageRequest.bdsInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": addBlockStorageRequest.opcRequestId,
      "if-match": addBlockStorageRequest.ifMatch,
      "opc-retry-token": addBlockStorageRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      addBlockStorageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bdsInstances/{bdsInstanceId}/actions/addBlockStorage",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        addBlockStorageRequest.addBlockStorageDetails,
        "AddBlockStorageDetails",
        model.AddBlockStorageDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AddBlockStorageResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Adds Cloud SQL to your cluster. You can use Cloud SQL to query against non-relational data stored in multiple big data sources, including Apache Hive, HDFS, Oracle NoSQL Database, and Apache HBase. Adding Cloud SQL adds a query server node to the cluster and creates cell servers on all the worker nodes in the cluster.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param AddCloudSqlRequest
   * @return AddCloudSqlResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/AddCloudSql.ts.html |here} to see how to use AddCloudSql API.
   */
  public async addCloudSql(
    addCloudSqlRequest: requests.AddCloudSqlRequest
  ): Promise<responses.AddCloudSqlResponse> {
    if (this.logger) this.logger.debug("Calling operation BdsClient#addCloudSql.");
    const operationName = "addCloudSql";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/BdsInstance/AddCloudSql";
    const pathParams = {
      "{bdsInstanceId}": addCloudSqlRequest.bdsInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": addCloudSqlRequest.opcRequestId,
      "if-match": addCloudSqlRequest.ifMatch,
      "opc-retry-token": addCloudSqlRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      addCloudSqlRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bdsInstances/{bdsInstanceId}/actions/addCloudSql",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        addCloudSqlRequest.addCloudSqlDetails,
        "AddCloudSqlDetails",
        model.AddCloudSqlDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AddCloudSqlResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Increases the size (scales out) a cluster by adding worker nodes(data/compute). The added worker nodes will have the same shape and will have the same amount of attached block storage as other worker nodes in the cluster.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param AddWorkerNodesRequest
   * @return AddWorkerNodesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/AddWorkerNodes.ts.html |here} to see how to use AddWorkerNodes API.
   */
  public async addWorkerNodes(
    addWorkerNodesRequest: requests.AddWorkerNodesRequest
  ): Promise<responses.AddWorkerNodesResponse> {
    if (this.logger) this.logger.debug("Calling operation BdsClient#addWorkerNodes.");
    const operationName = "addWorkerNodes";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/BdsInstance/AddWorkerNodes";
    const pathParams = {
      "{bdsInstanceId}": addWorkerNodesRequest.bdsInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": addWorkerNodesRequest.opcRequestId,
      "if-match": addWorkerNodesRequest.ifMatch,
      "opc-retry-token": addWorkerNodesRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      addWorkerNodesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bdsInstances/{bdsInstanceId}/actions/addWorkerNodes",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        addWorkerNodesRequest.addWorkerNodesDetails,
        "AddWorkerNodesDetails",
        model.AddWorkerNodesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.AddWorkerNodesResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a Big Data Service cluster into a different compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeBdsInstanceCompartmentRequest
   * @return ChangeBdsInstanceCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/ChangeBdsInstanceCompartment.ts.html |here} to see how to use ChangeBdsInstanceCompartment API.
   */
  public async changeBdsInstanceCompartment(
    changeBdsInstanceCompartmentRequest: requests.ChangeBdsInstanceCompartmentRequest
  ): Promise<responses.ChangeBdsInstanceCompartmentResponse> {
    if (this.logger) this.logger.debug("Calling operation BdsClient#changeBdsInstanceCompartment.");
    const operationName = "changeBdsInstanceCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/BdsInstance/ChangeBdsInstanceCompartment";
    const pathParams = {
      "{bdsInstanceId}": changeBdsInstanceCompartmentRequest.bdsInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeBdsInstanceCompartmentRequest.opcRequestId,
      "if-match": changeBdsInstanceCompartmentRequest.ifMatch,
      "opc-retry-token": changeBdsInstanceCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeBdsInstanceCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bdsInstances/{bdsInstanceId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeBdsInstanceCompartmentRequest.changeBdsInstanceCompartmentDetails,
        "ChangeBdsInstanceCompartmentDetails",
        model.ChangeBdsInstanceCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeBdsInstanceCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Changes the size of a cluster by scaling up or scaling down the nodes. Nodes are scaled up or down by changing the shapes of all the nodes of the same type to the next larger or smaller shape. The node types are master, utility, worker, and Cloud SQL. Only nodes with VM-STANDARD shapes can be scaled.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeShapeRequest
   * @return ChangeShapeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/ChangeShape.ts.html |here} to see how to use ChangeShape API.
   */
  public async changeShape(
    changeShapeRequest: requests.ChangeShapeRequest
  ): Promise<responses.ChangeShapeResponse> {
    if (this.logger) this.logger.debug("Calling operation BdsClient#changeShape.");
    const operationName = "changeShape";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/BdsInstance/ChangeShape";
    const pathParams = {
      "{bdsInstanceId}": changeShapeRequest.bdsInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": changeShapeRequest.opcRequestId,
      "if-match": changeShapeRequest.ifMatch,
      "opc-retry-token": changeShapeRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeShapeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bdsInstances/{bdsInstanceId}/actions/changeShape",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeShapeRequest.changeShapeDetails,
        "ChangeShapeDetails",
        model.ChangeShapeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeShapeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create an API key on behalf of the specified user.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateBdsApiKeyRequest
   * @return CreateBdsApiKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/CreateBdsApiKey.ts.html |here} to see how to use CreateBdsApiKey API.
   */
  public async createBdsApiKey(
    createBdsApiKeyRequest: requests.CreateBdsApiKeyRequest
  ): Promise<responses.CreateBdsApiKeyResponse> {
    if (this.logger) this.logger.debug("Calling operation BdsClient#createBdsApiKey.");
    const operationName = "createBdsApiKey";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/BdsApiKey/CreateBdsApiKey";
    const pathParams = {
      "{bdsInstanceId}": createBdsApiKeyRequest.bdsInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createBdsApiKeyRequest.opcRetryToken,
      "opc-request-id": createBdsApiKeyRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createBdsApiKeyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bdsInstances/{bdsInstanceId}/apiKeys",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createBdsApiKeyRequest.createBdsApiKeyDetails,
        "CreateBdsApiKeyDetails",
        model.CreateBdsApiKeyDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateBdsApiKeyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a Big Data Service cluster.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateBdsInstanceRequest
   * @return CreateBdsInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/CreateBdsInstance.ts.html |here} to see how to use CreateBdsInstance API.
   */
  public async createBdsInstance(
    createBdsInstanceRequest: requests.CreateBdsInstanceRequest
  ): Promise<responses.CreateBdsInstanceResponse> {
    if (this.logger) this.logger.debug("Calling operation BdsClient#createBdsInstance.");
    const operationName = "createBdsInstance";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/BdsInstance/CreateBdsInstance";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createBdsInstanceRequest.opcRequestId,
      "opc-retry-token": createBdsInstanceRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createBdsInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bdsInstances",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createBdsInstanceRequest.createBdsInstanceDetails,
        "CreateBdsInstanceDetails",
        model.CreateBdsInstanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateBdsInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Create and activate external metastore configuration.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateBdsMetastoreConfigurationRequest
   * @return CreateBdsMetastoreConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/CreateBdsMetastoreConfiguration.ts.html |here} to see how to use CreateBdsMetastoreConfiguration API.
   */
  public async createBdsMetastoreConfiguration(
    createBdsMetastoreConfigurationRequest: requests.CreateBdsMetastoreConfigurationRequest
  ): Promise<responses.CreateBdsMetastoreConfigurationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BdsClient#createBdsMetastoreConfiguration.");
    const operationName = "createBdsMetastoreConfiguration";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/BdsMetastoreConfiguration/CreateBdsMetastoreConfiguration";
    const pathParams = {
      "{bdsInstanceId}": createBdsMetastoreConfigurationRequest.bdsInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createBdsMetastoreConfigurationRequest.opcRetryToken,
      "opc-request-id": createBdsMetastoreConfigurationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createBdsMetastoreConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bdsInstances/{bdsInstanceId}/metastoreConfigs",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createBdsMetastoreConfigurationRequest.createBdsMetastoreConfigurationDetails,
        "CreateBdsMetastoreConfigurationDetails",
        model.CreateBdsMetastoreConfigurationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateBdsMetastoreConfigurationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the user's API key represented by the provided ID.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteBdsApiKeyRequest
   * @return DeleteBdsApiKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/DeleteBdsApiKey.ts.html |here} to see how to use DeleteBdsApiKey API.
   */
  public async deleteBdsApiKey(
    deleteBdsApiKeyRequest: requests.DeleteBdsApiKeyRequest
  ): Promise<responses.DeleteBdsApiKeyResponse> {
    if (this.logger) this.logger.debug("Calling operation BdsClient#deleteBdsApiKey.");
    const operationName = "deleteBdsApiKey";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/BdsApiKey/DeleteBdsApiKey";
    const pathParams = {
      "{bdsInstanceId}": deleteBdsApiKeyRequest.bdsInstanceId,
      "{apiKeyId}": deleteBdsApiKeyRequest.apiKeyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteBdsApiKeyRequest.opcRequestId,
      "if-match": deleteBdsApiKeyRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteBdsApiKeyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bdsInstances/{bdsInstanceId}/apiKeys/{apiKeyId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteBdsApiKeyResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes the cluster identified by the given ID.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteBdsInstanceRequest
   * @return DeleteBdsInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/DeleteBdsInstance.ts.html |here} to see how to use DeleteBdsInstance API.
   */
  public async deleteBdsInstance(
    deleteBdsInstanceRequest: requests.DeleteBdsInstanceRequest
  ): Promise<responses.DeleteBdsInstanceResponse> {
    if (this.logger) this.logger.debug("Calling operation BdsClient#deleteBdsInstance.");
    const operationName = "deleteBdsInstance";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/BdsInstance/DeleteBdsInstance";
    const pathParams = {
      "{bdsInstanceId}": deleteBdsInstanceRequest.bdsInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteBdsInstanceRequest.opcRequestId,
      "if-match": deleteBdsInstanceRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteBdsInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bdsInstances/{bdsInstanceId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteBdsInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Delete the BDS metastore configuration represented by the provided ID.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteBdsMetastoreConfigurationRequest
   * @return DeleteBdsMetastoreConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/DeleteBdsMetastoreConfiguration.ts.html |here} to see how to use DeleteBdsMetastoreConfiguration API.
   */
  public async deleteBdsMetastoreConfiguration(
    deleteBdsMetastoreConfigurationRequest: requests.DeleteBdsMetastoreConfigurationRequest
  ): Promise<responses.DeleteBdsMetastoreConfigurationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BdsClient#deleteBdsMetastoreConfiguration.");
    const operationName = "deleteBdsMetastoreConfiguration";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/BdsMetastoreConfiguration/DeleteBdsMetastoreConfiguration";
    const pathParams = {
      "{bdsInstanceId}": deleteBdsMetastoreConfigurationRequest.bdsInstanceId,
      "{metastoreConfigId}": deleteBdsMetastoreConfigurationRequest.metastoreConfigId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteBdsMetastoreConfigurationRequest.opcRequestId,
      "if-match": deleteBdsMetastoreConfigurationRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteBdsMetastoreConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bdsInstances/{bdsInstanceId}/metastoreConfigs/{metastoreConfigId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteBdsMetastoreConfigurationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns details of the autoscale configuration identified by the given ID.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetAutoScalingConfigurationRequest
   * @return GetAutoScalingConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/GetAutoScalingConfiguration.ts.html |here} to see how to use GetAutoScalingConfiguration API.
   */
  public async getAutoScalingConfiguration(
    getAutoScalingConfigurationRequest: requests.GetAutoScalingConfigurationRequest
  ): Promise<responses.GetAutoScalingConfigurationResponse> {
    if (this.logger) this.logger.debug("Calling operation BdsClient#getAutoScalingConfiguration.");
    const operationName = "getAutoScalingConfiguration";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/BdsInstance/GetAutoScalingConfiguration";
    const pathParams = {
      "{bdsInstanceId}": getAutoScalingConfigurationRequest.bdsInstanceId,
      "{autoScalingConfigurationId}": getAutoScalingConfigurationRequest.autoScalingConfigurationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getAutoScalingConfigurationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getAutoScalingConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bdsInstances/{bdsInstanceId}/autoScalingConfiguration/{autoScalingConfigurationId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetAutoScalingConfigurationResponse>{},
        body: await response.json(),
        bodyKey: "autoScalingConfiguration",
        bodyModel: model.AutoScalingConfiguration,
        type: "model.AutoScalingConfiguration",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the user's API key information for the given ID.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetBdsApiKeyRequest
   * @return GetBdsApiKeyResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/GetBdsApiKey.ts.html |here} to see how to use GetBdsApiKey API.
   */
  public async getBdsApiKey(
    getBdsApiKeyRequest: requests.GetBdsApiKeyRequest
  ): Promise<responses.GetBdsApiKeyResponse> {
    if (this.logger) this.logger.debug("Calling operation BdsClient#getBdsApiKey.");
    const operationName = "getBdsApiKey";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/BdsApiKey/GetBdsApiKey";
    const pathParams = {
      "{bdsInstanceId}": getBdsApiKeyRequest.bdsInstanceId,
      "{apiKeyId}": getBdsApiKeyRequest.apiKeyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getBdsApiKeyRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getBdsApiKeyRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bdsInstances/{bdsInstanceId}/apiKeys/{apiKeyId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetBdsApiKeyResponse>{},
        body: await response.json(),
        bodyKey: "bdsApiKey",
        bodyModel: model.BdsApiKey,
        type: "model.BdsApiKey",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns information about the Big Data Service cluster identified by the given ID.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetBdsInstanceRequest
   * @return GetBdsInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/GetBdsInstance.ts.html |here} to see how to use GetBdsInstance API.
   */
  public async getBdsInstance(
    getBdsInstanceRequest: requests.GetBdsInstanceRequest
  ): Promise<responses.GetBdsInstanceResponse> {
    if (this.logger) this.logger.debug("Calling operation BdsClient#getBdsInstance.");
    const operationName = "getBdsInstance";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/BdsInstance/GetBdsInstance";
    const pathParams = {
      "{bdsInstanceId}": getBdsInstanceRequest.bdsInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getBdsInstanceRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getBdsInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bdsInstances/{bdsInstanceId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetBdsInstanceResponse>{},
        body: await response.json(),
        bodyKey: "bdsInstance",
        bodyModel: model.BdsInstance,
        type: "model.BdsInstance",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the BDS Metastore configuration information for the given ID.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetBdsMetastoreConfigurationRequest
   * @return GetBdsMetastoreConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/GetBdsMetastoreConfiguration.ts.html |here} to see how to use GetBdsMetastoreConfiguration API.
   */
  public async getBdsMetastoreConfiguration(
    getBdsMetastoreConfigurationRequest: requests.GetBdsMetastoreConfigurationRequest
  ): Promise<responses.GetBdsMetastoreConfigurationResponse> {
    if (this.logger) this.logger.debug("Calling operation BdsClient#getBdsMetastoreConfiguration.");
    const operationName = "getBdsMetastoreConfiguration";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/BdsMetastoreConfiguration/GetBdsMetastoreConfiguration";
    const pathParams = {
      "{bdsInstanceId}": getBdsMetastoreConfigurationRequest.bdsInstanceId,
      "{metastoreConfigId}": getBdsMetastoreConfigurationRequest.metastoreConfigId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getBdsMetastoreConfigurationRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getBdsMetastoreConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bdsInstances/{bdsInstanceId}/metastoreConfigs/{metastoreConfigId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetBdsMetastoreConfigurationResponse>{},
        body: await response.json(),
        bodyKey: "bdsMetastoreConfiguration",
        bodyModel: model.BdsMetastoreConfiguration,
        type: "model.BdsMetastoreConfiguration",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the status of the work request identified by the given ID.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation BdsClient#getWorkRequest.");
    const operationName = "getWorkRequest";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/WorkRequest/GetWorkRequest";
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Install the specified patch to this cluster.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param InstallPatchRequest
   * @return InstallPatchResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/InstallPatch.ts.html |here} to see how to use InstallPatch API.
   */
  public async installPatch(
    installPatchRequest: requests.InstallPatchRequest
  ): Promise<responses.InstallPatchResponse> {
    if (this.logger) this.logger.debug("Calling operation BdsClient#installPatch.");
    const operationName = "installPatch";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/BdsInstance/InstallPatch";
    const pathParams = {
      "{bdsInstanceId}": installPatchRequest.bdsInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": installPatchRequest.opcRequestId,
      "if-match": installPatchRequest.ifMatch,
      "opc-retry-token": installPatchRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      installPatchRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bdsInstances/{bdsInstanceId}/actions/installPatch",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        installPatchRequest.installPatchDetails,
        "InstallPatchDetails",
        model.InstallPatchDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.InstallPatchResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns information about the autoscaling configurations for a cluster.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListAutoScalingConfigurationsRequest
   * @return ListAutoScalingConfigurationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/ListAutoScalingConfigurations.ts.html |here} to see how to use ListAutoScalingConfigurations API.
   */
  public async listAutoScalingConfigurations(
    listAutoScalingConfigurationsRequest: requests.ListAutoScalingConfigurationsRequest
  ): Promise<responses.ListAutoScalingConfigurationsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BdsClient#listAutoScalingConfigurations.");
    const operationName = "listAutoScalingConfigurations";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/BdsInstance/ListAutoScalingConfigurations";
    const pathParams = {
      "{bdsInstanceId}": listAutoScalingConfigurationsRequest.bdsInstanceId
    };

    const queryParams = {
      "compartmentId": listAutoScalingConfigurationsRequest.compartmentId,
      "page": listAutoScalingConfigurationsRequest.page,
      "limit": listAutoScalingConfigurationsRequest.limit,
      "sortBy": listAutoScalingConfigurationsRequest.sortBy,
      "sortOrder": listAutoScalingConfigurationsRequest.sortOrder,
      "displayName": listAutoScalingConfigurationsRequest.displayName,
      "lifecycleState": listAutoScalingConfigurationsRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAutoScalingConfigurationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAutoScalingConfigurationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bdsInstances/{bdsInstanceId}/autoScalingConfiguration",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAutoScalingConfigurationsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.AutoScalingConfigurationSummary,
        type: "Array<model.AutoScalingConfigurationSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listAutoScalingConfigurationsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.AutoScalingConfigurationSummary objects
   * contained in responses from the listAutoScalingConfigurations operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAutoScalingConfigurations(
    request: requests.ListAutoScalingConfigurationsRequest
  ): AsyncIterableIterator<model.AutoScalingConfigurationSummary> {
    return paginateRecords(request, req => this.listAutoScalingConfigurations(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listAutoScalingConfigurationsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listAutoScalingConfigurations operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllAutoScalingConfigurationsResponses(
    request: requests.ListAutoScalingConfigurationsRequest
  ): AsyncIterableIterator<responses.ListAutoScalingConfigurationsResponse> {
    return paginateResponses(request, req => this.listAutoScalingConfigurations(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.AutoScalingConfigurationSummary objects
   * contained in responses from the listAutoScalingConfigurations operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAutoScalingConfigurationsRecordIterator(
    request: requests.ListAutoScalingConfigurationsRequest
  ): AsyncIterableIterator<model.AutoScalingConfigurationSummary> {
    return paginateRecords(request, req => this.listAutoScalingConfigurations(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listAutoScalingConfigurations operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAutoScalingConfigurationsResponseIterator(
    request: requests.ListAutoScalingConfigurationsRequest
  ): AsyncIterableIterator<responses.ListAutoScalingConfigurationsResponse> {
    return paginateResponses(request, req => this.listAutoScalingConfigurations(req));
  }

  /**
   * Returns a list of all API keys associated with this Big Data Service cluster.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListBdsApiKeysRequest
   * @return ListBdsApiKeysResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/ListBdsApiKeys.ts.html |here} to see how to use ListBdsApiKeys API.
   */
  public async listBdsApiKeys(
    listBdsApiKeysRequest: requests.ListBdsApiKeysRequest
  ): Promise<responses.ListBdsApiKeysResponse> {
    if (this.logger) this.logger.debug("Calling operation BdsClient#listBdsApiKeys.");
    const operationName = "listBdsApiKeys";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/BdsApiKey/ListBdsApiKeys";
    const pathParams = {
      "{bdsInstanceId}": listBdsApiKeysRequest.bdsInstanceId
    };

    const queryParams = {
      "lifecycleState": listBdsApiKeysRequest.lifecycleState,
      "userId": listBdsApiKeysRequest.userId,
      "page": listBdsApiKeysRequest.page,
      "limit": listBdsApiKeysRequest.limit,
      "sortBy": listBdsApiKeysRequest.sortBy,
      "sortOrder": listBdsApiKeysRequest.sortOrder,
      "displayName": listBdsApiKeysRequest.displayName
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listBdsApiKeysRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listBdsApiKeysRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bdsInstances/{bdsInstanceId}/apiKeys",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListBdsApiKeysResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.BdsApiKeySummary,
        type: "Array<model.BdsApiKeySummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listBdsApiKeysRecordIterator function.
   * Creates a new async iterator which will iterate over the models.BdsApiKeySummary objects
   * contained in responses from the listBdsApiKeys operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllBdsApiKeys(
    request: requests.ListBdsApiKeysRequest
  ): AsyncIterableIterator<model.BdsApiKeySummary> {
    return paginateRecords(request, req => this.listBdsApiKeys(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listBdsApiKeysResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listBdsApiKeys operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllBdsApiKeysResponses(
    request: requests.ListBdsApiKeysRequest
  ): AsyncIterableIterator<responses.ListBdsApiKeysResponse> {
    return paginateResponses(request, req => this.listBdsApiKeys(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.BdsApiKeySummary objects
   * contained in responses from the listBdsApiKeys operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listBdsApiKeysRecordIterator(
    request: requests.ListBdsApiKeysRequest
  ): AsyncIterableIterator<model.BdsApiKeySummary> {
    return paginateRecords(request, req => this.listBdsApiKeys(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listBdsApiKeys operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listBdsApiKeysResponseIterator(
    request: requests.ListBdsApiKeysRequest
  ): AsyncIterableIterator<responses.ListBdsApiKeysResponse> {
    return paginateResponses(request, req => this.listBdsApiKeys(req));
  }

  /**
   * Returns a list of all Big Data Service clusters in a compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListBdsInstancesRequest
   * @return ListBdsInstancesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/ListBdsInstances.ts.html |here} to see how to use ListBdsInstances API.
   */
  public async listBdsInstances(
    listBdsInstancesRequest: requests.ListBdsInstancesRequest
  ): Promise<responses.ListBdsInstancesResponse> {
    if (this.logger) this.logger.debug("Calling operation BdsClient#listBdsInstances.");
    const operationName = "listBdsInstances";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/BdsInstanceSummary/ListBdsInstances";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listBdsInstancesRequest.compartmentId,
      "lifecycleState": listBdsInstancesRequest.lifecycleState,
      "page": listBdsInstancesRequest.page,
      "limit": listBdsInstancesRequest.limit,
      "sortBy": listBdsInstancesRequest.sortBy,
      "sortOrder": listBdsInstancesRequest.sortOrder,
      "displayName": listBdsInstancesRequest.displayName
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listBdsInstancesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listBdsInstancesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bdsInstances",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListBdsInstancesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.BdsInstanceSummary,
        type: "Array<model.BdsInstanceSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listBdsInstancesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.BdsInstanceSummary objects
   * contained in responses from the listBdsInstances operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllBdsInstances(
    request: requests.ListBdsInstancesRequest
  ): AsyncIterableIterator<model.BdsInstanceSummary> {
    return paginateRecords(request, req => this.listBdsInstances(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listBdsInstancesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listBdsInstances operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllBdsInstancesResponses(
    request: requests.ListBdsInstancesRequest
  ): AsyncIterableIterator<responses.ListBdsInstancesResponse> {
    return paginateResponses(request, req => this.listBdsInstances(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.BdsInstanceSummary objects
   * contained in responses from the listBdsInstances operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listBdsInstancesRecordIterator(
    request: requests.ListBdsInstancesRequest
  ): AsyncIterableIterator<model.BdsInstanceSummary> {
    return paginateRecords(request, req => this.listBdsInstances(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listBdsInstances operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listBdsInstancesResponseIterator(
    request: requests.ListBdsInstancesRequest
  ): AsyncIterableIterator<responses.ListBdsInstancesResponse> {
    return paginateResponses(request, req => this.listBdsInstances(req));
  }

  /**
   * Returns a list of metastore configurations ssociated with this Big Data Service cluster.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListBdsMetastoreConfigurationsRequest
   * @return ListBdsMetastoreConfigurationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/ListBdsMetastoreConfigurations.ts.html |here} to see how to use ListBdsMetastoreConfigurations API.
   */
  public async listBdsMetastoreConfigurations(
    listBdsMetastoreConfigurationsRequest: requests.ListBdsMetastoreConfigurationsRequest
  ): Promise<responses.ListBdsMetastoreConfigurationsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BdsClient#listBdsMetastoreConfigurations.");
    const operationName = "listBdsMetastoreConfigurations";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/BdsMetastoreConfiguration/ListBdsMetastoreConfigurations";
    const pathParams = {
      "{bdsInstanceId}": listBdsMetastoreConfigurationsRequest.bdsInstanceId
    };

    const queryParams = {
      "metastoreType": listBdsMetastoreConfigurationsRequest.metastoreType,
      "metastoreId": listBdsMetastoreConfigurationsRequest.metastoreId,
      "lifecycleState": listBdsMetastoreConfigurationsRequest.lifecycleState,
      "bdsApiKeyId": listBdsMetastoreConfigurationsRequest.bdsApiKeyId,
      "page": listBdsMetastoreConfigurationsRequest.page,
      "limit": listBdsMetastoreConfigurationsRequest.limit,
      "sortBy": listBdsMetastoreConfigurationsRequest.sortBy,
      "sortOrder": listBdsMetastoreConfigurationsRequest.sortOrder,
      "displayName": listBdsMetastoreConfigurationsRequest.displayName
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listBdsMetastoreConfigurationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listBdsMetastoreConfigurationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bdsInstances/{bdsInstanceId}/metastoreConfigs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListBdsMetastoreConfigurationsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.BdsMetastoreConfigurationSummary,
        type: "Array<model.BdsMetastoreConfigurationSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listBdsMetastoreConfigurationsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.BdsMetastoreConfigurationSummary objects
   * contained in responses from the listBdsMetastoreConfigurations operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllBdsMetastoreConfigurations(
    request: requests.ListBdsMetastoreConfigurationsRequest
  ): AsyncIterableIterator<model.BdsMetastoreConfigurationSummary> {
    return paginateRecords(request, req => this.listBdsMetastoreConfigurations(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listBdsMetastoreConfigurationsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listBdsMetastoreConfigurations operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllBdsMetastoreConfigurationsResponses(
    request: requests.ListBdsMetastoreConfigurationsRequest
  ): AsyncIterableIterator<responses.ListBdsMetastoreConfigurationsResponse> {
    return paginateResponses(request, req => this.listBdsMetastoreConfigurations(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.BdsMetastoreConfigurationSummary objects
   * contained in responses from the listBdsMetastoreConfigurations operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listBdsMetastoreConfigurationsRecordIterator(
    request: requests.ListBdsMetastoreConfigurationsRequest
  ): AsyncIterableIterator<model.BdsMetastoreConfigurationSummary> {
    return paginateRecords(request, req => this.listBdsMetastoreConfigurations(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listBdsMetastoreConfigurations operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listBdsMetastoreConfigurationsResponseIterator(
    request: requests.ListBdsMetastoreConfigurationsRequest
  ): AsyncIterableIterator<responses.ListBdsMetastoreConfigurationsResponse> {
    return paginateResponses(request, req => this.listBdsMetastoreConfigurations(req));
  }

  /**
   * List the patch history of this cluster.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListPatchHistoriesRequest
   * @return ListPatchHistoriesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/ListPatchHistories.ts.html |here} to see how to use ListPatchHistories API.
   */
  public async listPatchHistories(
    listPatchHistoriesRequest: requests.ListPatchHistoriesRequest
  ): Promise<responses.ListPatchHistoriesResponse> {
    if (this.logger) this.logger.debug("Calling operation BdsClient#listPatchHistories.");
    const operationName = "listPatchHistories";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/BdsInstance/ListPatchHistories";
    const pathParams = {
      "{bdsInstanceId}": listPatchHistoriesRequest.bdsInstanceId
    };

    const queryParams = {
      "lifecycleState": listPatchHistoriesRequest.lifecycleState,
      "sortBy": listPatchHistoriesRequest.sortBy,
      "patchVersion": listPatchHistoriesRequest.patchVersion,
      "sortOrder": listPatchHistoriesRequest.sortOrder,
      "page": listPatchHistoriesRequest.page,
      "limit": listPatchHistoriesRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPatchHistoriesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPatchHistoriesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bdsInstances/{bdsInstanceId}/patchHistory",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPatchHistoriesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.PatchHistorySummary,
        type: "Array<model.PatchHistorySummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listPatchHistoriesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.PatchHistorySummary objects
   * contained in responses from the listPatchHistories operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllPatchHistories(
    request: requests.ListPatchHistoriesRequest
  ): AsyncIterableIterator<model.PatchHistorySummary> {
    return paginateRecords(request, req => this.listPatchHistories(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listPatchHistoriesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listPatchHistories operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllPatchHistoriesResponses(
    request: requests.ListPatchHistoriesRequest
  ): AsyncIterableIterator<responses.ListPatchHistoriesResponse> {
    return paginateResponses(request, req => this.listPatchHistories(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.PatchHistorySummary objects
   * contained in responses from the listPatchHistories operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listPatchHistoriesRecordIterator(
    request: requests.ListPatchHistoriesRequest
  ): AsyncIterableIterator<model.PatchHistorySummary> {
    return paginateRecords(request, req => this.listPatchHistories(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listPatchHistories operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listPatchHistoriesResponseIterator(
    request: requests.ListPatchHistoriesRequest
  ): AsyncIterableIterator<responses.ListPatchHistoriesResponse> {
    return paginateResponses(request, req => this.listPatchHistories(req));
  }

  /**
   * List all the available patches for this cluster.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListPatchesRequest
   * @return ListPatchesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/ListPatches.ts.html |here} to see how to use ListPatches API.
   */
  public async listPatches(
    listPatchesRequest: requests.ListPatchesRequest
  ): Promise<responses.ListPatchesResponse> {
    if (this.logger) this.logger.debug("Calling operation BdsClient#listPatches.");
    const operationName = "listPatches";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/BdsInstance/ListPatches";
    const pathParams = {
      "{bdsInstanceId}": listPatchesRequest.bdsInstanceId
    };

    const queryParams = {
      "page": listPatchesRequest.page,
      "limit": listPatchesRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPatchesRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPatchesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bdsInstances/{bdsInstanceId}/patches",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPatchesResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.PatchSummary,
        type: "Array<model.PatchSummary>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listPatchesRecordIterator function.
   * Creates a new async iterator which will iterate over the models.PatchSummary objects
   * contained in responses from the listPatches operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllPatches(
    request: requests.ListPatchesRequest
  ): AsyncIterableIterator<model.PatchSummary> {
    return paginateRecords(request, req => this.listPatches(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listPatchesResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listPatches operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllPatchesResponses(
    request: requests.ListPatchesRequest
  ): AsyncIterableIterator<responses.ListPatchesResponse> {
    return paginateResponses(request, req => this.listPatches(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.PatchSummary objects
   * contained in responses from the listPatches operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listPatchesRecordIterator(
    request: requests.ListPatchesRequest
  ): AsyncIterableIterator<model.PatchSummary> {
    return paginateRecords(request, req => this.listPatches(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listPatches operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listPatchesResponseIterator(
    request: requests.ListPatchesRequest
  ): AsyncIterableIterator<responses.ListPatchesResponse> {
    return paginateResponses(request, req => this.listPatches(req));
  }

  /**
   * Returns a paginated list of errors for a work request identified by the given ID.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger) this.logger.debug("Calling operation BdsClient#listWorkRequestErrors.");
    const operationName = "listWorkRequestErrors";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/WorkRequestError/ListWorkRequestErrors";
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit,
      "sortBy": listWorkRequestErrorsRequest.sortBy,
      "sortOrder": listWorkRequestErrorsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestError,
        type: "Array<model.WorkRequestError>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestErrorsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.WorkRequestError objects
   * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestErrors(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<model.WorkRequestError> {
    return paginateRecords(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestErrorsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestErrorsResponses(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestErrorsResponse> {
    return paginateResponses(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestError objects
   * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestErrorsRecordIterator(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<model.WorkRequestError> {
    return paginateRecords(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestErrorsResponseIterator(
    request: requests.ListWorkRequestErrorsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestErrorsResponse> {
    return paginateResponses(request, req => this.listWorkRequestErrors(req));
  }

  /**
   * Returns a paginated list of logs for a given work request.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger) this.logger.debug("Calling operation BdsClient#listWorkRequestLogs.");
    const operationName = "listWorkRequestLogs";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/WorkRequestLogEntry/ListWorkRequestLogs";
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit,
      "sortBy": listWorkRequestLogsRequest.sortBy,
      "sortOrder": listWorkRequestLogsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequestLogEntry,
        type: "Array<model.WorkRequestLogEntry>",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestLogsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
   * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestLogs(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<model.WorkRequestLogEntry> {
    return paginateRecords(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestLogsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestLogsResponses(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestLogsResponse> {
    return paginateResponses(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
   * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestLogsRecordIterator(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<model.WorkRequestLogEntry> {
    return paginateRecords(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestLogsResponseIterator(
    request: requests.ListWorkRequestLogsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestLogsResponse> {
    return paginateResponses(request, req => this.listWorkRequestLogs(req));
  }

  /**
   * Lists the work requests in a compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger) this.logger.debug("Calling operation BdsClient#listWorkRequests.");
    const operationName = "listWorkRequests";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/WorkRequest/ListWorkRequests";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "resourceId": listWorkRequestsRequest.resourceId,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit,
      "sortBy": listWorkRequestsRequest.sortBy,
      "sortOrder": listWorkRequestsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "items",
        bodyModel: model.WorkRequest,
        type: "Array<model.WorkRequest>",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestsRecordIterator function.
   * Creates a new async iterator which will iterate over the models.WorkRequest objects
   * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequests(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<model.WorkRequest> {
    return paginateRecords(request, req => this.listWorkRequests(req));
  }

  /**
   * NOTE: This function is deprecated in favor of listWorkRequestsResponseIterator function.
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listAllWorkRequestsResponses(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestsResponse> {
    return paginateResponses(request, req => this.listWorkRequests(req));
  }

  /**
   * Creates a new async iterator which will iterate over the models.WorkRequest objects
   * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
   * server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestsRecordIterator(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<model.WorkRequest> {
    return paginateRecords(request, req => this.listWorkRequests(req));
  }

  /**
   * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
   * will fetch more data from the server as needed.
   *
   * @param request a request which can be sent to the service operation
   */
  public listWorkRequestsResponseIterator(
    request: requests.ListWorkRequestsRequest
  ): AsyncIterableIterator<responses.ListWorkRequestsResponse> {
    return paginateResponses(request, req => this.listWorkRequests(req));
  }

  /**
   * Deletes an autoscale configuration.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RemoveAutoScalingConfigurationRequest
   * @return RemoveAutoScalingConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/RemoveAutoScalingConfiguration.ts.html |here} to see how to use RemoveAutoScalingConfiguration API.
   */
  public async removeAutoScalingConfiguration(
    removeAutoScalingConfigurationRequest: requests.RemoveAutoScalingConfigurationRequest
  ): Promise<responses.RemoveAutoScalingConfigurationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BdsClient#removeAutoScalingConfiguration.");
    const operationName = "removeAutoScalingConfiguration";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/BdsInstance/RemoveAutoScalingConfiguration";
    const pathParams = {
      "{bdsInstanceId}": removeAutoScalingConfigurationRequest.bdsInstanceId,
      "{autoScalingConfigurationId}":
        removeAutoScalingConfigurationRequest.autoScalingConfigurationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": removeAutoScalingConfigurationRequest.opcRequestId,
      "if-match": removeAutoScalingConfigurationRequest.ifMatch,
      "opc-retry-token": removeAutoScalingConfigurationRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      removeAutoScalingConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/bdsInstances/{bdsInstanceId}/autoScalingConfiguration/{autoScalingConfigurationId}/actions/remove",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        removeAutoScalingConfigurationRequest.removeAutoScalingConfigurationDetails,
        "RemoveAutoScalingConfigurationDetails",
        model.RemoveAutoScalingConfigurationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RemoveAutoScalingConfigurationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes Cloud SQL from the cluster.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RemoveCloudSqlRequest
   * @return RemoveCloudSqlResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/RemoveCloudSql.ts.html |here} to see how to use RemoveCloudSql API.
   */
  public async removeCloudSql(
    removeCloudSqlRequest: requests.RemoveCloudSqlRequest
  ): Promise<responses.RemoveCloudSqlResponse> {
    if (this.logger) this.logger.debug("Calling operation BdsClient#removeCloudSql.");
    const operationName = "removeCloudSql";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/BdsInstance/RemoveCloudSql";
    const pathParams = {
      "{bdsInstanceId}": removeCloudSqlRequest.bdsInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": removeCloudSqlRequest.opcRequestId,
      "if-match": removeCloudSqlRequest.ifMatch,
      "opc-retry-token": removeCloudSqlRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      removeCloudSqlRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bdsInstances/{bdsInstanceId}/actions/removeCloudSql",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        removeCloudSqlRequest.removeCloudSqlDetails,
        "RemoveCloudSqlDetails",
        model.RemoveCloudSqlDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RemoveCloudSqlResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Remove a single node of a Big Data Service cluster
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RemoveNodeRequest
   * @return RemoveNodeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/RemoveNode.ts.html |here} to see how to use RemoveNode API.
   */
  public async removeNode(
    removeNodeRequest: requests.RemoveNodeRequest
  ): Promise<responses.RemoveNodeResponse> {
    if (this.logger) this.logger.debug("Calling operation BdsClient#removeNode.");
    const operationName = "removeNode";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/BdsInstance/RemoveNode";
    const pathParams = {
      "{bdsInstanceId}": removeNodeRequest.bdsInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": removeNodeRequest.opcRequestId,
      "if-match": removeNodeRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      removeNodeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bdsInstances/{bdsInstanceId}/actions/removeNode",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        removeNodeRequest.removeNodeDetails,
        "RemoveNodeDetails",
        model.RemoveNodeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RemoveNodeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Restarts a single node of a Big Data Service cluster
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param RestartNodeRequest
   * @return RestartNodeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/RestartNode.ts.html |here} to see how to use RestartNode API.
   */
  public async restartNode(
    restartNodeRequest: requests.RestartNodeRequest
  ): Promise<responses.RestartNodeResponse> {
    if (this.logger) this.logger.debug("Calling operation BdsClient#restartNode.");
    const operationName = "restartNode";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/BdsInstance/RestartNode";
    const pathParams = {
      "{bdsInstanceId}": restartNodeRequest.bdsInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": restartNodeRequest.opcRequestId,
      "if-match": restartNodeRequest.ifMatch,
      "opc-retry-token": restartNodeRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      restartNodeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bdsInstances/{bdsInstanceId}/actions/restartNode",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        restartNodeRequest.restartNodeDetails,
        "RestartNodeDetails",
        model.RestartNodeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.RestartNodeResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Starts the BDS cluster that was stopped earlier.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param StartBdsInstanceRequest
   * @return StartBdsInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/StartBdsInstance.ts.html |here} to see how to use StartBdsInstance API.
   */
  public async startBdsInstance(
    startBdsInstanceRequest: requests.StartBdsInstanceRequest
  ): Promise<responses.StartBdsInstanceResponse> {
    if (this.logger) this.logger.debug("Calling operation BdsClient#startBdsInstance.");
    const operationName = "startBdsInstance";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/BdsInstance/StartBdsInstance";
    const pathParams = {
      "{bdsInstanceId}": startBdsInstanceRequest.bdsInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": startBdsInstanceRequest.opcRequestId,
      "if-match": startBdsInstanceRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      startBdsInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bdsInstances/{bdsInstanceId}/actions/start",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        startBdsInstanceRequest.startBdsInstanceDetails,
        "StartBdsInstanceDetails",
        model.StartBdsInstanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.StartBdsInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Stops the BDS cluster that can be started at later point of time.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param StopBdsInstanceRequest
   * @return StopBdsInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/StopBdsInstance.ts.html |here} to see how to use StopBdsInstance API.
   */
  public async stopBdsInstance(
    stopBdsInstanceRequest: requests.StopBdsInstanceRequest
  ): Promise<responses.StopBdsInstanceResponse> {
    if (this.logger) this.logger.debug("Calling operation BdsClient#stopBdsInstance.");
    const operationName = "stopBdsInstance";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/BdsInstance/StopBdsInstance";
    const pathParams = {
      "{bdsInstanceId}": stopBdsInstanceRequest.bdsInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": stopBdsInstanceRequest.opcRequestId,
      "if-match": stopBdsInstanceRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      stopBdsInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bdsInstances/{bdsInstanceId}/actions/stop",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        stopBdsInstanceRequest.stopBdsInstanceDetails,
        "StopBdsInstanceDetails",
        model.StopBdsInstanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.StopBdsInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Test specified metastore configuration.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param TestBdsMetastoreConfigurationRequest
   * @return TestBdsMetastoreConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/TestBdsMetastoreConfiguration.ts.html |here} to see how to use TestBdsMetastoreConfiguration API.
   */
  public async testBdsMetastoreConfiguration(
    testBdsMetastoreConfigurationRequest: requests.TestBdsMetastoreConfigurationRequest
  ): Promise<responses.TestBdsMetastoreConfigurationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BdsClient#testBdsMetastoreConfiguration.");
    const operationName = "testBdsMetastoreConfiguration";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/BdsMetastoreConfiguration/TestBdsMetastoreConfiguration";
    const pathParams = {
      "{bdsInstanceId}": testBdsMetastoreConfigurationRequest.bdsInstanceId,
      "{metastoreConfigId}": testBdsMetastoreConfigurationRequest.metastoreConfigId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": testBdsMetastoreConfigurationRequest.opcRequestId,
      "if-match": testBdsMetastoreConfigurationRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      testBdsMetastoreConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bdsInstances/{bdsInstanceId}/metastoreConfigs/{metastoreConfigId}/actions/test",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        testBdsMetastoreConfigurationRequest.testBdsMetastoreConfigurationDetails,
        "TestBdsMetastoreConfigurationDetails",
        model.TestBdsMetastoreConfigurationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.TestBdsMetastoreConfigurationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Test access to specified Object Storage bucket using the API key.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param TestBdsObjectStorageConnectionRequest
   * @return TestBdsObjectStorageConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/TestBdsObjectStorageConnection.ts.html |here} to see how to use TestBdsObjectStorageConnection API.
   */
  public async testBdsObjectStorageConnection(
    testBdsObjectStorageConnectionRequest: requests.TestBdsObjectStorageConnectionRequest
  ): Promise<responses.TestBdsObjectStorageConnectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BdsClient#testBdsObjectStorageConnection.");
    const operationName = "testBdsObjectStorageConnection";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/BdsApiKey/TestBdsObjectStorageConnection";
    const pathParams = {
      "{bdsInstanceId}": testBdsObjectStorageConnectionRequest.bdsInstanceId,
      "{apiKeyId}": testBdsObjectStorageConnectionRequest.apiKeyId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": testBdsObjectStorageConnectionRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      testBdsObjectStorageConnectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bdsInstances/{bdsInstanceId}/apiKeys/{apiKeyId}/actions/testObjectStorageConnection",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        testBdsObjectStorageConnectionRequest.testBdsObjectStorageConnectionDetails,
        "TestBdsObjectStorageConnectionDetails",
        model.TestBdsObjectStorageConnectionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.TestBdsObjectStorageConnectionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates fields on an autoscale configuration, including the name, the threshold value, and whether the autoscale configuration is enabled.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateAutoScalingConfigurationRequest
   * @return UpdateAutoScalingConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/UpdateAutoScalingConfiguration.ts.html |here} to see how to use UpdateAutoScalingConfiguration API.
   */
  public async updateAutoScalingConfiguration(
    updateAutoScalingConfigurationRequest: requests.UpdateAutoScalingConfigurationRequest
  ): Promise<responses.UpdateAutoScalingConfigurationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BdsClient#updateAutoScalingConfiguration.");
    const operationName = "updateAutoScalingConfiguration";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/BdsInstance/UpdateAutoScalingConfiguration";
    const pathParams = {
      "{bdsInstanceId}": updateAutoScalingConfigurationRequest.bdsInstanceId,
      "{autoScalingConfigurationId}":
        updateAutoScalingConfigurationRequest.autoScalingConfigurationId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateAutoScalingConfigurationRequest.opcRequestId,
      "if-match": updateAutoScalingConfigurationRequest.ifMatch,
      "opc-retry-token": updateAutoScalingConfigurationRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateAutoScalingConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bdsInstances/{bdsInstanceId}/autoScalingConfiguration/{autoScalingConfigurationId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateAutoScalingConfigurationRequest.updateAutoScalingConfigurationDetails,
        "UpdateAutoScalingConfigurationDetails",
        model.UpdateAutoScalingConfigurationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateAutoScalingConfigurationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Big Data Service cluster identified by the given ID.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateBdsInstanceRequest
   * @return UpdateBdsInstanceResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/UpdateBdsInstance.ts.html |here} to see how to use UpdateBdsInstance API.
   */
  public async updateBdsInstance(
    updateBdsInstanceRequest: requests.UpdateBdsInstanceRequest
  ): Promise<responses.UpdateBdsInstanceResponse> {
    if (this.logger) this.logger.debug("Calling operation BdsClient#updateBdsInstance.");
    const operationName = "updateBdsInstance";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/BdsInstance/UpdateBdsInstance";
    const pathParams = {
      "{bdsInstanceId}": updateBdsInstanceRequest.bdsInstanceId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateBdsInstanceRequest.ifMatch,
      "opc-request-id": updateBdsInstanceRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateBdsInstanceRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bdsInstances/{bdsInstanceId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateBdsInstanceRequest.updateBdsInstanceDetails,
        "UpdateBdsInstanceDetails",
        model.UpdateBdsInstanceDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateBdsInstanceResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Update the BDS metastore configuration represented by the provided ID.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateBdsMetastoreConfigurationRequest
   * @return UpdateBdsMetastoreConfigurationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/bds/UpdateBdsMetastoreConfiguration.ts.html |here} to see how to use UpdateBdsMetastoreConfiguration API.
   */
  public async updateBdsMetastoreConfiguration(
    updateBdsMetastoreConfigurationRequest: requests.UpdateBdsMetastoreConfigurationRequest
  ): Promise<responses.UpdateBdsMetastoreConfigurationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation BdsClient#updateBdsMetastoreConfiguration.");
    const operationName = "updateBdsMetastoreConfiguration";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/bigdata/20190531/BdsMetastoreConfiguration/UpdateBdsMetastoreConfiguration";
    const pathParams = {
      "{bdsInstanceId}": updateBdsMetastoreConfigurationRequest.bdsInstanceId,
      "{metastoreConfigId}": updateBdsMetastoreConfigurationRequest.metastoreConfigId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateBdsMetastoreConfigurationRequest.opcRequestId,
      "if-match": updateBdsMetastoreConfigurationRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateBdsMetastoreConfigurationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/bdsInstances/{bdsInstanceId}/metastoreConfigs/{metastoreConfigId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateBdsMetastoreConfigurationRequest.updateBdsMetastoreConfigurationDetails,
        "UpdateBdsMetastoreConfigurationDetails",
        model.UpdateBdsMetastoreConfigurationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateBdsMetastoreConfigurationResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
