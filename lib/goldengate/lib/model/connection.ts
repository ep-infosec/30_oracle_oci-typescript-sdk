/**
 * GoldenGate API
 * Use the Oracle Cloud Infrastructure GoldenGate APIs to perform data replication operations.

 * OpenAPI spec version: 20200407
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Represents the metadata description of a connection used by deployments in the same compartment.
 *
 */
export interface Connection {
  /**
   * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the connection being
   * referenced.
   *
   */
  "id": string;
  /**
   * An object's Display Name.
   *
   */
  "displayName": string;
  /**
   * Metadata about this specific object.
   *
   */
  "description"?: string;
  /**
   * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
   *
   */
  "compartmentId": string;
  /**
    * A simple key-value pair that is applied without any predefined name, type, or scope. Exists
* for cross-compatibility only.
* <p>
Example: `{\"bar-key\": \"value\"}`
* 
    */
  "freeformTags"?: { [key: string]: string };
  /**
    * Tags defined for this resource. Each key is predefined and scoped to a namespace.
* <p>
Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`
* 
    */
  "definedTags"?: { [key: string]: { [key: string]: any } };
  /**
    * The system tags associated with this resource, if any. The system tags are set by Oracle
* Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more
* information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
* <p>
Example: `{orcl-cloud: {free-tier-retain: true}}`
* 
    */
  "systemTags"?: { [key: string]: { [key: string]: any } };
  /**
   * Possible lifecycle states for connection.
   *
   */
  "lifecycleState": Connection.LifecycleState;
  /**
   * Describes the object's current state in detail. For example, it can be used to provide
   * actionable information for a resource in a Failed state.
   *
   */
  "lifecycleDetails"?: string;
  /**
   * The time the resource was created. The format is defined by
   * [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
   *
   */
  "timeCreated": Date;
  /**
   * The time the resource was last updated. The format is defined by
   * [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
   *
   */
  "timeUpdated": Date;
  /**
   * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the customer vault being
   * referenced.
   * If provided, this will reference a vault which the customer will be required to ensure
   * the policies are established to permit the GoldenGate Service to manage secrets contained
   * within this vault.
   *
   */
  "vaultId"?: string;
  /**
   * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the customer \"Master\" key being
   * referenced.
   * If provided, this will reference a key which the customer will be required to ensure
   * the policies are established to permit the GoldenGate Service to utilize this key to
   * manage secrets.
   *
   */
  "keyId"?: string;
  /**
   * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the subnet being referenced.
   *
   */
  "subnetId"?: string;
  /**
   * List of ingress IP addresses, from where the GoldenGate deployment connects to this connection's privateIp.
   *
   */
  "ingressIps"?: Array<model.IngressIpDetails>;
  /**
   * An array of Network Security Group OCIDs used to define network access for either Deployments or Connections.
   *
   */
  "nsgIds"?: Array<string>;

  "connectionType": string;
}

export namespace Connection {
  export enum LifecycleState {
    Creating = "CREATING",
    Updating = "UPDATING",
    Active = "ACTIVE",
    Deleting = "DELETING",
    Deleted = "DELETED",
    Failed = "FAILED",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: Connection): object {
    const jsonObj = {
      ...obj,
      ...{
        "ingressIps": obj.ingressIps
          ? obj.ingressIps.map(item => {
              return model.IngressIpDetails.getJsonObj(item);
            })
          : undefined
      }
    };

    if (obj && "connectionType" in obj && obj.connectionType) {
      switch (obj.connectionType) {
        case "KAFKA":
          return model.KafkaConnection.getJsonObj(<model.KafkaConnection>(<object>jsonObj), true);
        case "OCI_OBJECT_STORAGE":
          return model.OciObjectStorageConnection.getJsonObj(
            <model.OciObjectStorageConnection>(<object>jsonObj),
            true
          );
        case "GOLDENGATE":
          return model.GoldenGateConnection.getJsonObj(
            <model.GoldenGateConnection>(<object>jsonObj),
            true
          );
        case "MYSQL":
          return model.MysqlConnection.getJsonObj(<model.MysqlConnection>(<object>jsonObj), true);
        case "ORACLE":
          return model.OracleConnection.getJsonObj(<model.OracleConnection>(<object>jsonObj), true);
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.connectionType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: Connection): object {
    const jsonObj = {
      ...obj,
      ...{
        "ingressIps": obj.ingressIps
          ? obj.ingressIps.map(item => {
              return model.IngressIpDetails.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    if (obj && "connectionType" in obj && obj.connectionType) {
      switch (obj.connectionType) {
        case "KAFKA":
          return model.KafkaConnection.getDeserializedJsonObj(
            <model.KafkaConnection>(<object>jsonObj),
            true
          );
        case "OCI_OBJECT_STORAGE":
          return model.OciObjectStorageConnection.getDeserializedJsonObj(
            <model.OciObjectStorageConnection>(<object>jsonObj),
            true
          );
        case "GOLDENGATE":
          return model.GoldenGateConnection.getDeserializedJsonObj(
            <model.GoldenGateConnection>(<object>jsonObj),
            true
          );
        case "MYSQL":
          return model.MysqlConnection.getDeserializedJsonObj(
            <model.MysqlConnection>(<object>jsonObj),
            true
          );
        case "ORACLE":
          return model.OracleConnection.getDeserializedJsonObj(
            <model.OracleConnection>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.connectionType}`);
      }
    }
    return jsonObj;
  }
}
