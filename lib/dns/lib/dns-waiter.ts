/**
 * DNS API
 * API for the DNS service. Use this API to manage DNS zones, records, and other DNS resources.
For more information, see [Overview of the DNS Service](/iaas/Content/DNS/Concepts/dnszonemanagement.htm).

 * OpenAPI spec version: 20180115
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { DnsClient } from "./client";
import { genericWaiter, genericTerminalConditionWaiter, WaiterConfiguration } from "oci-common";

export class DnsWaiter {
  public constructor(private client: DnsClient, private readonly config?: WaiterConfiguration) {}

  /**
   * Waits forResolver till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetResolverResponse | null (null in case of 404 response)
   */
  public async forResolver(
    request: serviceRequests.GetResolverRequest,
    ...targetStates: models.Resolver.LifecycleState[]
  ): Promise<serviceResponses.GetResolverResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getResolver(request),
      response => targetStates.includes(response.resolver.lifecycleState!),
      targetStates.includes(models.Resolver.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forResolverEndpoint till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetResolverEndpointResponse | null (null in case of 404 response)
   */
  public async forResolverEndpoint(
    request: serviceRequests.GetResolverEndpointRequest,
    ...targetStates: models.ResolverEndpoint.LifecycleState[]
  ): Promise<serviceResponses.GetResolverEndpointResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getResolverEndpoint(request),
      response => targetStates.includes(response.resolverEndpoint.lifecycleState!),
      targetStates.includes(models.ResolverEndpoint.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forSteeringPolicy till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetSteeringPolicyResponse | null (null in case of 404 response)
   */
  public async forSteeringPolicy(
    request: serviceRequests.GetSteeringPolicyRequest,
    ...targetStates: models.SteeringPolicy.LifecycleState[]
  ): Promise<serviceResponses.GetSteeringPolicyResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getSteeringPolicy(request),
      response => targetStates.includes(response.steeringPolicy.lifecycleState!),
      targetStates.includes(models.SteeringPolicy.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forSteeringPolicyAttachment till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetSteeringPolicyAttachmentResponse
   */
  public async forSteeringPolicyAttachment(
    request: serviceRequests.GetSteeringPolicyAttachmentRequest,
    ...targetStates: models.SteeringPolicyAttachment.LifecycleState[]
  ): Promise<serviceResponses.GetSteeringPolicyAttachmentResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getSteeringPolicyAttachment(request),
      response => targetStates.includes(response.steeringPolicyAttachment.lifecycleState!)
    );
  }

  /**
   * Waits forTsigKey till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetTsigKeyResponse | null (null in case of 404 response)
   */
  public async forTsigKey(
    request: serviceRequests.GetTsigKeyRequest,
    ...targetStates: models.TsigKey.LifecycleState[]
  ): Promise<serviceResponses.GetTsigKeyResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getTsigKey(request),
      response => targetStates.includes(response.tsigKey.lifecycleState!),
      targetStates.includes(models.TsigKey.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forView till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetViewResponse | null (null in case of 404 response)
   */
  public async forView(
    request: serviceRequests.GetViewRequest,
    ...targetStates: models.View.LifecycleState[]
  ): Promise<serviceResponses.GetViewResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getView(request),
      response => targetStates.includes(response.view.lifecycleState!),
      targetStates.includes(models.View.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forZone till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetZoneResponse | null (null in case of 404 response)
   */
  public async forZone(
    request: serviceRequests.GetZoneRequest,
    ...targetStates: models.Zone.LifecycleState[]
  ): Promise<serviceResponses.GetZoneResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getZone(request),
      response => targetStates.includes(response.zone.lifecycleState!),
      targetStates.includes(models.Zone.LifecycleState.Deleted)
    );
  }
}
