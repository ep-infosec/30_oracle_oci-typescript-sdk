/**
 * Data Connectivity Management API
 * Use the Data Connectivity Management Service APIs to perform common extract, load, and transform (ETL) tasks.
 * OpenAPI spec version: 20210217
 * Contact: di_dcms_dev_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * A `CompositeType` represents a type that is composed of a list of sub-types, for example an `Address` type. The sub-types can be simple `DataType` or other `CompositeType` objects. Typically, a `CompositeType` may represent an arbitrarily deep hierarchy of types.
 */
export interface CompositeType extends model.BaseType {
  "parentType"?: model.CompositeType;
  /**
   * An array of elements.
   */
  "elements"?: Array<model.TypedObject>;
  "configDefinition"?: model.ConfigDefinition;

  "modelType": string;
}

export namespace CompositeType {
  export function getJsonObj(obj: CompositeType, isParentJsonObj?: boolean): object {
    const jsonObj = {
      ...(isParentJsonObj ? obj : (model.BaseType.getJsonObj(obj) as CompositeType)),
      ...{
        "parentType": obj.parentType ? model.CompositeType.getJsonObj(obj.parentType) : undefined,
        "elements": obj.elements
          ? obj.elements.map(item => {
              return model.TypedObject.getJsonObj(item);
            })
          : undefined,
        "configDefinition": obj.configDefinition
          ? model.ConfigDefinition.getJsonObj(obj.configDefinition)
          : undefined
      }
    };

    return jsonObj;
  }
  export const modelType = "COMPOSITE_TYPE";
  export function getDeserializedJsonObj(obj: CompositeType, isParentJsonObj?: boolean): object {
    const jsonObj = {
      ...(isParentJsonObj ? obj : (model.BaseType.getDeserializedJsonObj(obj) as CompositeType)),
      ...{
        "parentType": obj.parentType
          ? model.CompositeType.getDeserializedJsonObj(obj.parentType)
          : undefined,
        "elements": obj.elements
          ? obj.elements.map(item => {
              return model.TypedObject.getDeserializedJsonObj(item);
            })
          : undefined,
        "configDefinition": obj.configDefinition
          ? model.ConfigDefinition.getDeserializedJsonObj(obj.configDefinition)
          : undefined
      }
    };

    return jsonObj;
  }
}
