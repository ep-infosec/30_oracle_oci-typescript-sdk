/**
 * Data Connectivity Management API
 * Use the Data Connectivity Management Service APIs to perform common extract, load, and transform (ETL) tasks.
 * OpenAPI spec version: 20210217
 * Contact: di_dcms_dev_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The data preview response.
 */
export interface DataPreview {
  /**
   * Name of the entity for which data preview is requested.
   */
  "entityName": string;
  /**
   * Total number of rows taken for sampling. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "sampleRowsCount"?: number;
  /**
   * Array of column definition for the preview result.
   */
  "columns"?: Array<model.Column>;
  /**
   * Array of row values for the preview result.
   */
  "rows"?: Array<model.Row>;
}

export namespace DataPreview {
  export function getJsonObj(obj: DataPreview): object {
    const jsonObj = {
      ...obj,
      ...{
        "columns": obj.columns
          ? obj.columns.map(item => {
              return model.Column.getJsonObj(item);
            })
          : undefined,
        "rows": obj.rows
          ? obj.rows.map(item => {
              return model.Row.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: DataPreview): object {
    const jsonObj = {
      ...obj,
      ...{
        "columns": obj.columns
          ? obj.columns.map(item => {
              return model.Column.getDeserializedJsonObj(item);
            })
          : undefined,
        "rows": obj.rows
          ? obj.rows.map(item => {
              return model.Row.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
