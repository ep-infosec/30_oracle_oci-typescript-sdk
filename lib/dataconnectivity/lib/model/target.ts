/**
 * Data Connectivity Management API
 * Use the Data Connectivity Management Service APIs to perform common extract, load, and transform (ETL) tasks.
 * OpenAPI spec version: 20210217
 * Contact: di_dcms_dev_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The information about the target operator. The target operator lets you specify the data entity to store the transformed data.
 */
export interface Target extends model.CreateConnectivityValidationDetails {
  "entity":
    | model.DataEntityFromTable
    | model.DataEntityFromDataStore
    | model.DataEntityFromView
    | model.DataEntityFromSql
    | model.DataEntityFromFile
    | model.DerivedEntity;
  /**
   * Specifies the read access.
   */
  "isReadAccess"?: boolean;
  /**
   * Specifies the copy fields.
   */
  "isCopyFields"?: boolean;
  /**
   * Specifies if this uses a predefined shape.
   */
  "isPredefinedShape"?: boolean;
  /**
   * Specifies the data property.
   */
  "dataProperty"?: Target.DataProperty;
  "schemaDriftConfig"?: model.SchemaDriftConfig;
  "fixedDataShape"?: model.Shape;
  "writeOperationConfig"?: model.WriteOperationConfig;

  "modelType": string;
}

export namespace Target {
  export enum DataProperty {
    Truncate = "TRUNCATE",
    Merge = "MERGE",
    Backup = "BACKUP",
    Overwrite = "OVERWRITE",
    Append = "APPEND",
    Ignore = "IGNORE",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: Target, isParentJsonObj?: boolean): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.CreateConnectivityValidationDetails.getJsonObj(obj) as Target)),
      ...{
        "entity": obj.entity ? model.DataEntity.getJsonObj(obj.entity) : undefined,

        "schemaDriftConfig": obj.schemaDriftConfig
          ? model.SchemaDriftConfig.getJsonObj(obj.schemaDriftConfig)
          : undefined,
        "fixedDataShape": obj.fixedDataShape
          ? model.Shape.getJsonObj(obj.fixedDataShape)
          : undefined,
        "writeOperationConfig": obj.writeOperationConfig
          ? model.WriteOperationConfig.getJsonObj(obj.writeOperationConfig)
          : undefined
      }
    };

    return jsonObj;
  }
  export const modelType = "TARGET_OPERATOR";
  export function getDeserializedJsonObj(obj: Target, isParentJsonObj?: boolean): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.CreateConnectivityValidationDetails.getDeserializedJsonObj(obj) as Target)),
      ...{
        "entity": obj.entity ? model.DataEntity.getDeserializedJsonObj(obj.entity) : undefined,

        "schemaDriftConfig": obj.schemaDriftConfig
          ? model.SchemaDriftConfig.getDeserializedJsonObj(obj.schemaDriftConfig)
          : undefined,
        "fixedDataShape": obj.fixedDataShape
          ? model.Shape.getDeserializedJsonObj(obj.fixedDataShape)
          : undefined,
        "writeOperationConfig": obj.writeOperationConfig
          ? model.WriteOperationConfig.getDeserializedJsonObj(obj.writeOperationConfig)
          : undefined
      }
    };

    return jsonObj;
  }
}
