/**
 * Data Connectivity Management API
 * Use the Data Connectivity Management Service APIs to perform common extract, load, and transform (ETL) tasks.
 * OpenAPI spec version: 20210217
 * Contact: di_dcms_dev_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Profiling configuration.
 */
export interface ProfileConfig {
  /**
   * Array of column names to profile. If empty, all the columns in the entity are profiled.
   */
  "attributes"?: Array<string>;
  /**
   * Array of enum strings to decide which profile functions to run. If empty, all the supported functions are run.
   */
  "functions"?: Array<ProfileConfig.Functions>;
  /**
   * The maximum number of value frequencies to return per column. The VFs are sorted descending on frequency, and ascending on value, and then topN are returned and rest discarded. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "topNValFreq"?: number;
  /**
   * A pattern has to qualify at least this percentage threshold to be considered a pattern on its own. Patterns that do not qualify are clubbed together into 'Others' pattern. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "patternThreshold"?: number;
  /**
   * A data type has to qualify at least this percentage threshold to be considered an inferred data type for a column. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "dataTypeThreshold"?: number;
}

export namespace ProfileConfig {
  export enum Functions {
    AttributeCount = "ATTRIBUTE_COUNT",
    RowCount = "ROW_COUNT",
    DataType = "DATA_TYPE",
    DistinctCount = "DISTINCT_COUNT",
    DuplicateCount = "DUPLICATE_COUNT",
    Histogram = "HISTOGRAM",
    Max = "MAX",
    MaxLength = "MAX_LENGTH",
    Mean = "MEAN",
    MeanLength = "MEAN_LENGTH",
    Median = "MEDIAN",
    Min = "MIN",
    MinLength = "MIN_LENGTH",
    NullCount = "NULL_COUNT",
    Outlier = "OUTLIER",
    Pattern = "PATTERN",
    StandardDeviation = "STANDARD_DEVIATION",
    UniqueCount = "UNIQUE_COUNT",
    Variance = "VARIANCE",
    ValueFrequency = "VALUE_FREQUENCY"
  }

  export function getJsonObj(obj: ProfileConfig): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: ProfileConfig): object {
    const jsonObj = { ...obj, ...{} };

    return jsonObj;
  }
}
