/**
 * Data Connectivity Management API
 * Use the Data Connectivity Management Service APIs to perform common extract, load, and transform (ETL) tasks.
 * OpenAPI spec version: 20210217
 * Contact: di_dcms_dev_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * BICC Connector Attribute. Object Storage as External storage where the BICC extracted files are written.
 */
export interface ExternalStorage extends model.ConnectorAttribute {
  /**
   * ID of the external stoarge configured in the BICC console. Usually it's numeric.
   */
  "storageId"?: string;
  /**
   * Name of the external storage configured in the BICC console.
   */
  "storageName"?: string;
  /**
   * Object Storage host URL. DO not give http/https.
   */
  "host"?: string;
  /**
   * Tenancy OCID of the OOS bucket.
   */
  "tenancyId"?: string;
  /**
   * Namespace of the OOS bucket.
   */
  "namespace"?: string;
  /**
   * Bucket name where BICC extracts and stores the files.
   */
  "bucket"?: string;

  "modelType": string;
}

export namespace ExternalStorage {
  export function getJsonObj(obj: ExternalStorage, isParentJsonObj?: boolean): object {
    const jsonObj = {
      ...(isParentJsonObj ? obj : (model.ConnectorAttribute.getJsonObj(obj) as ExternalStorage)),
      ...{}
    };

    return jsonObj;
  }
  export const modelType = "EXTERNAL_STORAGE";
  export function getDeserializedJsonObj(obj: ExternalStorage, isParentJsonObj?: boolean): object {
    const jsonObj = {
      ...(isParentJsonObj
        ? obj
        : (model.ConnectorAttribute.getDeserializedJsonObj(obj) as ExternalStorage)),
      ...{}
    };

    return jsonObj;
  }
}
