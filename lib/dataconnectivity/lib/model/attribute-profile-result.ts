/**
 * Data Connectivity Management API
 * Use the Data Connectivity Management Service APIs to perform common extract, load, and transform (ETL) tasks.
 * OpenAPI spec version: 20210217
 * Contact: di_dcms_dev_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * A summary of profiling results of a specific attribute.
 */
export interface AttributeProfileResult {
  /**
   * Name of the attribute
   */
  "name"?: string;
  "min"?: model.ProfileStat;
  "max"?: model.ProfileStat;
  "nullCount"?: model.ProfileStat;
  "distinctCount"?: model.ProfileStat;
  "uniqueCount"?: model.ProfileStat;
  "duplicateCount"?: model.ProfileStat;
  /**
   * Top N value frequencies for the column as described already in the topNValueFrequency profile config property.
   */
  "valueFrequencies"?: Array<model.ObjectFreqStat>;

  "type": string;
}

export namespace AttributeProfileResult {
  export function getJsonObj(obj: AttributeProfileResult): object {
    const jsonObj = {
      ...obj,
      ...{
        "min": obj.min ? model.ProfileStat.getJsonObj(obj.min) : undefined,
        "max": obj.max ? model.ProfileStat.getJsonObj(obj.max) : undefined,
        "nullCount": obj.nullCount ? model.ProfileStat.getJsonObj(obj.nullCount) : undefined,
        "distinctCount": obj.distinctCount
          ? model.ProfileStat.getJsonObj(obj.distinctCount)
          : undefined,
        "uniqueCount": obj.uniqueCount ? model.ProfileStat.getJsonObj(obj.uniqueCount) : undefined,
        "duplicateCount": obj.duplicateCount
          ? model.ProfileStat.getJsonObj(obj.duplicateCount)
          : undefined,
        "valueFrequencies": obj.valueFrequencies
          ? obj.valueFrequencies.map(item => {
              return model.ObjectFreqStat.getJsonObj(item);
            })
          : undefined
      }
    };

    if (obj && "type" in obj && obj.type) {
      switch (obj.type) {
        case "STRING":
          return model.StringAttribute.getJsonObj(<model.StringAttribute>(<object>jsonObj), true);
        case "NUMERIC":
          return model.NumericAttribute.getJsonObj(<model.NumericAttribute>(<object>jsonObj), true);
        case "DATE_TIME":
          return model.DateAttribute.getJsonObj(<model.DateAttribute>(<object>jsonObj), true);
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.type}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: AttributeProfileResult): object {
    const jsonObj = {
      ...obj,
      ...{
        "min": obj.min ? model.ProfileStat.getDeserializedJsonObj(obj.min) : undefined,
        "max": obj.max ? model.ProfileStat.getDeserializedJsonObj(obj.max) : undefined,
        "nullCount": obj.nullCount
          ? model.ProfileStat.getDeserializedJsonObj(obj.nullCount)
          : undefined,
        "distinctCount": obj.distinctCount
          ? model.ProfileStat.getDeserializedJsonObj(obj.distinctCount)
          : undefined,
        "uniqueCount": obj.uniqueCount
          ? model.ProfileStat.getDeserializedJsonObj(obj.uniqueCount)
          : undefined,
        "duplicateCount": obj.duplicateCount
          ? model.ProfileStat.getDeserializedJsonObj(obj.duplicateCount)
          : undefined,
        "valueFrequencies": obj.valueFrequencies
          ? obj.valueFrequencies.map(item => {
              return model.ObjectFreqStat.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    if (obj && "type" in obj && obj.type) {
      switch (obj.type) {
        case "STRING":
          return model.StringAttribute.getDeserializedJsonObj(
            <model.StringAttribute>(<object>jsonObj),
            true
          );
        case "NUMERIC":
          return model.NumericAttribute.getDeserializedJsonObj(
            <model.NumericAttribute>(<object>jsonObj),
            true
          );
        case "DATE_TIME":
          return model.DateAttribute.getDeserializedJsonObj(
            <model.DateAttribute>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.type}`);
      }
    }
    return jsonObj;
  }
}
