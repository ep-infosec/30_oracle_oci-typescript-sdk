/**
 * Data Connectivity Management API
 * Use the Data Connectivity Management Service APIs to perform common extract, load, and transform (ETL) tasks.
 * OpenAPI spec version: 20210217
 * Contact: di_dcms_dev_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { DataConnectivityManagementWaiter } from "./dataconnectivitymanagement-waiter";
import { composeResponse, composeRequest, GenericRetrier } from "oci-common";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum DataConnectivityManagementApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class DataConnectivityManagementClient {
  protected static serviceEndpointTemplate =
    "https://dataconnectivity.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": DataConnectivityManagementWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker = null;
  protected _httpOptions: any = undefined;
  public targetService = "DataConnectivityManagement";

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
    }
    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20210217";
    if (this.logger)
      this.logger.info(`DataConnectivityManagementClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      DataConnectivityManagementClient.serviceEndpointTemplate,
      region,
      DataConnectivityManagementClient.endpointServiceName
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      DataConnectivityManagementClient.serviceEndpointTemplate,
      regionId,
      DataConnectivityManagementClient.endpointServiceName
    );
  }

  /**
   * Creates a new DataConnectivityManagementWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): DataConnectivityManagementWaiter {
    this._waiters = new DataConnectivityManagementWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): DataConnectivityManagementWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * The endpoint will be moved to the specified compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeEndpointCompartmentRequest
   * @return ChangeEndpointCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/ChangeEndpointCompartment.ts.html |here} to see how to use ChangeEndpointCompartment API.
   */
  public async changeEndpointCompartment(
    changeEndpointCompartmentRequest: requests.ChangeEndpointCompartmentRequest
  ): Promise<responses.ChangeEndpointCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataConnectivityManagementClient#changeEndpointCompartment."
      );
    const operationName = "changeEndpointCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{endpointId}": changeEndpointCompartmentRequest.endpointId
    };

    const queryParams = {
      "registryId": changeEndpointCompartmentRequest.registryId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeEndpointCompartmentRequest.ifMatch,
      "opc-request-id": changeEndpointCompartmentRequest.opcRequestId,
      "opc-retry-token": changeEndpointCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeEndpointCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/endpoints/{endpointId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeEndpointCompartmentRequest.changeEndpointCompartmentDetails,
        "ChangeEndpointCompartmentDetails",
        model.ChangeEndpointCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeEndpointCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * The registry will be moved to the specified compartment.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ChangeRegistryCompartmentRequest
   * @return ChangeRegistryCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/ChangeRegistryCompartment.ts.html |here} to see how to use ChangeRegistryCompartment API.
   */
  public async changeRegistryCompartment(
    changeRegistryCompartmentRequest: requests.ChangeRegistryCompartmentRequest
  ): Promise<responses.ChangeRegistryCompartmentResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataConnectivityManagementClient#changeRegistryCompartment."
      );
    const operationName = "changeRegistryCompartment";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": changeRegistryCompartmentRequest.registryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeRegistryCompartmentRequest.ifMatch,
      "opc-request-id": changeRegistryCompartmentRequest.opcRequestId,
      "opc-retry-token": changeRegistryCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeRegistryCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeRegistryCompartmentRequest.changeRegistryCompartmentDetails,
        "ChangeRegistryCompartmentDetails",
        model.ChangeRegistryCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeRegistryCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Attaches a list of data assets to the given endpoint.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateAttachDataAssetRequest
   * @return CreateAttachDataAssetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/CreateAttachDataAsset.ts.html |here} to see how to use CreateAttachDataAsset API.
   */
  public async createAttachDataAsset(
    createAttachDataAssetRequest: requests.CreateAttachDataAssetRequest
  ): Promise<responses.CreateAttachDataAssetResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataConnectivityManagementClient#createAttachDataAsset."
      );
    const operationName = "createAttachDataAsset";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": createAttachDataAssetRequest.registryId,
      "{endpointId}": createAttachDataAssetRequest.endpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createAttachDataAssetRequest.opcRequestId,
      "opc-retry-token": createAttachDataAssetRequest.opcRetryToken,
      "if-match": createAttachDataAssetRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createAttachDataAssetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}/endpoints/{endpointId}/actions/attachDataAssets",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createAttachDataAssetRequest.createAttachDataAssetDetails,
        "CreateAttachDataAssetDetails",
        model.CreateAttachDataAssetDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateAttachDataAssetResponse>{},
        body: await response.json(),
        bodyKey: "attachDataAssetInfo",
        bodyModel: model.AttachDataAssetInfo,
        type: "model.AttachDataAssetInfo",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a connection under an existing data asset.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateConnectionRequest
   * @return CreateConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/CreateConnection.ts.html |here} to see how to use CreateConnection API.
   */
  public async createConnection(
    createConnectionRequest: requests.CreateConnectionRequest
  ): Promise<responses.CreateConnectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#createConnection.");
    const operationName = "createConnection";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": createConnectionRequest.registryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createConnectionRequest.opcRequestId,
      "opc-retry-token": createConnectionRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createConnectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}/connections",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createConnectionRequest.createConnectionDetails,
        "CreateConnectionDetails",
        model.CreateConnectionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateConnectionResponse>{},
        body: await response.json(),
        bodyKey: "connection",
        bodyModel: model.Connection,
        type: "model.Connection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a connection validation.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateConnectionValidationRequest
   * @return CreateConnectionValidationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/CreateConnectionValidation.ts.html |here} to see how to use CreateConnectionValidation API.
   */
  public async createConnectionValidation(
    createConnectionValidationRequest: requests.CreateConnectionValidationRequest
  ): Promise<responses.CreateConnectionValidationResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataConnectivityManagementClient#createConnectionValidation."
      );
    const operationName = "createConnectionValidation";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": createConnectionValidationRequest.registryId
    };

    const queryParams = {
      "endpointId": createConnectionValidationRequest.endpointId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createConnectionValidationRequest.opcRequestId,
      "opc-retry-token": createConnectionValidationRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createConnectionValidationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}/connectionValidations",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createConnectionValidationRequest.createConnectionValidationDetails,
        "CreateConnectionValidationDetails",
        model.CreateConnectionValidationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateConnectionValidationResponse>{},
        body: await response.json(),
        bodyKey: "connectionValidation",
        bodyModel: model.ConnectionValidation,
        type: "model.ConnectionValidation",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This endpoint is used to trigger validation of dataAsset, connection, schema, entity, dataOperationConfig
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateConnectivityValidationRequest
   * @return CreateConnectivityValidationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/CreateConnectivityValidation.ts.html |here} to see how to use CreateConnectivityValidation API.
   */
  public async createConnectivityValidation(
    createConnectivityValidationRequest: requests.CreateConnectivityValidationRequest
  ): Promise<responses.CreateConnectivityValidationResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataConnectivityManagementClient#createConnectivityValidation."
      );
    const operationName = "createConnectivityValidation";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": createConnectivityValidationRequest.registryId
    };

    const queryParams = {
      "endpointId": createConnectivityValidationRequest.endpointId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createConnectivityValidationRequest.opcRequestId,
      "opc-retry-token": createConnectivityValidationRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createConnectivityValidationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}/actions/connectivityValidation",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createConnectivityValidationRequest.createConnectivityValidationDetails,
        "CreateConnectivityValidationDetails",
        model.CreateConnectivityValidationDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateConnectivityValidationResponse>{},
        body: await response.json(),
        bodyKey: "connectivityValidation",
        bodyModel: model.ConnectivityValidation,
        type: "model.ConnectivityValidation",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a data asset with default connection.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateDataAssetRequest
   * @return CreateDataAssetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/CreateDataAsset.ts.html |here} to see how to use CreateDataAsset API.
   */
  public async createDataAsset(
    createDataAssetRequest: requests.CreateDataAssetRequest
  ): Promise<responses.CreateDataAssetResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#createDataAsset.");
    const operationName = "createDataAsset";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": createDataAssetRequest.registryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createDataAssetRequest.opcRequestId,
      "opc-retry-token": createDataAssetRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDataAssetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}/dataAssets",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDataAssetRequest.createDataAssetDetails,
        "CreateDataAssetDetails",
        model.CreateDataAssetDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDataAssetResponse>{},
        body: await response.json(),
        bodyKey: "dataAsset",
        bodyModel: model.DataAsset,
        type: "model.DataAsset",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Provide data preview on live schema.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateDataPreviewRequest
   * @return CreateDataPreviewResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/CreateDataPreview.ts.html |here} to see how to use CreateDataPreview API.
   */
  public async createDataPreview(
    createDataPreviewRequest: requests.CreateDataPreviewRequest
  ): Promise<responses.CreateDataPreviewResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#createDataPreview.");
    const operationName = "createDataPreview";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": createDataPreviewRequest.registryId
    };

    const queryParams = {
      "endpointId": createDataPreviewRequest.endpointId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createDataPreviewRequest.opcRequestId,
      "opc-retry-token": createDataPreviewRequest.opcRetryToken,
      "if-match": createDataPreviewRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDataPreviewRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}/actions/dataPreview",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDataPreviewRequest.createDataPreviewDetails,
        "CreateDataPreviewDetails",
        model.CreateDataPreviewDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDataPreviewResponse>{},
        body: await response.json(),
        bodyKey: "dataPreview",
        bodyModel: model.DataPreview,
        type: "model.DataPreview",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Execute data profiling on live schema.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateDataProfileRequest
   * @return CreateDataProfileResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/CreateDataProfile.ts.html |here} to see how to use CreateDataProfile API.
   */
  public async createDataProfile(
    createDataProfileRequest: requests.CreateDataProfileRequest
  ): Promise<responses.CreateDataProfileResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#createDataProfile.");
    const operationName = "createDataProfile";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": createDataProfileRequest.registryId
    };

    const queryParams = {
      "endpointId": createDataProfileRequest.endpointId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createDataProfileRequest.opcRequestId,
      "opc-retry-token": createDataProfileRequest.opcRetryToken,
      "if-match": createDataProfileRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDataProfileRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}/actions/dataProfile",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDataProfileRequest.createDataProfileDetails,
        "CreateDataProfileDetails",
        model.CreateDataProfileDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDataProfileResponse>{},
        body: await response.json(),
        bodyKey: "dataProfile",
        bodyModel: model.DataProfile,
        type: "model.DataProfile",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Dereferenced a dcms artifact.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateDeReferenceArtifactRequest
   * @return CreateDeReferenceArtifactResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/CreateDeReferenceArtifact.ts.html |here} to see how to use CreateDeReferenceArtifact API.
   */
  public async createDeReferenceArtifact(
    createDeReferenceArtifactRequest: requests.CreateDeReferenceArtifactRequest
  ): Promise<responses.CreateDeReferenceArtifactResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataConnectivityManagementClient#createDeReferenceArtifact."
      );
    const operationName = "createDeReferenceArtifact";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": createDeReferenceArtifactRequest.registryId,
      "{dcmsArtifactId}": createDeReferenceArtifactRequest.dcmsArtifactId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createDeReferenceArtifactRequest.opcRequestId,
      "opc-retry-token": createDeReferenceArtifactRequest.opcRetryToken,
      "if-match": createDeReferenceArtifactRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDeReferenceArtifactRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}/dcmsArtifacts/{dcmsArtifactId}/actions/deReferenceArtifact",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDeReferenceArtifactRequest.createDeReferenceArtifactDetails,
        "CreateDeReferenceArtifactDetails",
        model.CreateDeReferenceArtifactDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDeReferenceArtifactResponse>{},
        body: await response.json(),
        bodyKey: "deReferenceInfo",
        bodyModel: model.DeReferenceInfo,
        type: "model.DeReferenceInfo",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Detaches a list of data assets to the given endpoint.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateDetachDataAssetRequest
   * @return CreateDetachDataAssetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/CreateDetachDataAsset.ts.html |here} to see how to use CreateDetachDataAsset API.
   */
  public async createDetachDataAsset(
    createDetachDataAssetRequest: requests.CreateDetachDataAssetRequest
  ): Promise<responses.CreateDetachDataAssetResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataConnectivityManagementClient#createDetachDataAsset."
      );
    const operationName = "createDetachDataAsset";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": createDetachDataAssetRequest.registryId,
      "{endpointId}": createDetachDataAssetRequest.endpointId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createDetachDataAssetRequest.opcRequestId,
      "opc-retry-token": createDetachDataAssetRequest.opcRetryToken,
      "if-match": createDetachDataAssetRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDetachDataAssetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}/endpoints/{endpointId}/actions/detachDataAssets",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDetachDataAssetRequest.createDetachDataAssetDetails,
        "CreateDetachDataAssetDetails",
        model.CreateDetachDataAssetDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDetachDataAssetResponse>{},
        body: await response.json(),
        bodyKey: "detachDataAssetInfo",
        bodyModel: model.DetachDataAssetInfo,
        type: "model.DetachDataAssetInfo",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Data Connectivity Management endpoint ready to perform data connectivity.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateEndpointRequest
   * @return CreateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/CreateEndpoint.ts.html |here} to see how to use CreateEndpoint API.
   */
  public async createEndpoint(
    createEndpointRequest: requests.CreateEndpointRequest
  ): Promise<responses.CreateEndpointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#createEndpoint.");
    const operationName = "createEndpoint";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "registryId": createEndpointRequest.registryId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createEndpointRequest.opcRetryToken,
      "opc-request-id": createEndpointRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/endpoints",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createEndpointRequest.createEndpointDetails,
        "CreateEndpointDetails",
        model.CreateEndpointDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateEndpointResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates the data entity shape using the shape from the data asset.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateEntityShapeRequest
   * @return CreateEntityShapeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/CreateEntityShape.ts.html |here} to see how to use CreateEntityShape API.
   */
  public async createEntityShape(
    createEntityShapeRequest: requests.CreateEntityShapeRequest
  ): Promise<responses.CreateEntityShapeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#createEntityShape.");
    const operationName = "createEntityShape";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": createEntityShapeRequest.registryId,
      "{connectionKey}": createEntityShapeRequest.connectionKey,
      "{schemaResourceName}": createEntityShapeRequest.schemaResourceName
    };

    const queryParams = {
      "authorizationMode": createEntityShapeRequest.authorizationMode,
      "endpointId": createEntityShapeRequest.endpointId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createEntityShapeRequest.opcRequestId,
      "opc-retry-token": createEntityShapeRequest.opcRetryToken,
      "if-match": createEntityShapeRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createEntityShapeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/registries/{registryId}/connections/{connectionKey}/schemas/{schemaResourceName}/actions/entityShapes",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createEntityShapeRequest.createEntityShapeDetails,
        "CreateEntityShapeDetails",
        model.CreateEntityShapeDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateEntityShapeResponse>{},
        body: await response.json(),
        bodyKey: "entityShape",
        bodyModel: model.EntityShape,
        type: "model.EntityShape",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Call the operation to execute
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateExecuteOperationJobRequest
   * @return CreateExecuteOperationJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/CreateExecuteOperationJob.ts.html |here} to see how to use CreateExecuteOperationJob API.
   */
  public async createExecuteOperationJob(
    createExecuteOperationJobRequest: requests.CreateExecuteOperationJobRequest
  ): Promise<responses.CreateExecuteOperationJobResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataConnectivityManagementClient#createExecuteOperationJob."
      );
    const operationName = "createExecuteOperationJob";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": createExecuteOperationJobRequest.registryId,
      "{connectionKey}": createExecuteOperationJobRequest.connectionKey,
      "{schemaResourceName}": createExecuteOperationJobRequest.schemaResourceName
    };

    const queryParams = {
      "endpointId": createExecuteOperationJobRequest.endpointId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createExecuteOperationJobRequest.opcRequestId,
      "opc-retry-token": createExecuteOperationJobRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createExecuteOperationJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/registries/{registryId}/connections/{connectionKey}/schemas/{schemaResourceName}/actions/executeOperationJobs",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createExecuteOperationJobRequest.createExecuteOperationJobDetails,
        "CreateExecuteOperationJobDetails",
        model.CreateExecuteOperationJobDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateExecuteOperationJobResponse>{},
        body: await response.json(),
        bodyKey: "executeOperationJobDetails",
        bodyModel: model.ExecuteOperationJobDetails,
        type: "model.ExecuteOperationJobDetails",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a folder under a specified registry.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateFolderRequest
   * @return CreateFolderResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/CreateFolder.ts.html |here} to see how to use CreateFolder API.
   */
  public async createFolder(
    createFolderRequest: requests.CreateFolderRequest
  ): Promise<responses.CreateFolderResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#createFolder.");
    const operationName = "createFolder";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": createFolderRequest.registryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createFolderRequest.opcRequestId,
      "opc-retry-token": createFolderRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createFolderRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}/folders",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createFolderRequest.createFolderDetails,
        "CreateFolderDetails",
        model.CreateFolderDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateFolderResponse>{},
        body: await response.json(),
        bodyKey: "folder",
        bodyModel: model.Folder,
        type: "model.Folder",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This endpoint is used to create a connectivity task (such as PushdownTask).
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateFullPushDownTaskRequest
   * @return CreateFullPushDownTaskResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/CreateFullPushDownTask.ts.html |here} to see how to use CreateFullPushDownTask API.
   */
  public async createFullPushDownTask(
    createFullPushDownTaskRequest: requests.CreateFullPushDownTaskRequest
  ): Promise<responses.CreateFullPushDownTaskResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataConnectivityManagementClient#createFullPushDownTask."
      );
    const operationName = "createFullPushDownTask";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": createFullPushDownTaskRequest.registryId
    };

    const queryParams = {
      "endpointId": createFullPushDownTaskRequest.endpointId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createFullPushDownTaskRequest.opcRequestId,
      "opc-retry-token": createFullPushDownTaskRequest.opcRetryToken,
      "if-match": createFullPushDownTaskRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createFullPushDownTaskRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}/actions/fullPushDownTask",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createFullPushDownTaskRequest.createFullPushDownTaskDetails,
        "CreateFullPushDownTaskDetails",
        model.CreateFullPushDownTaskDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateFullPushDownTaskResponse>{},
        body: await response.json(),
        bodyKey: "fullPushDownTaskResponse",
        bodyModel: model.FullPushDownTaskResponse,
        type: "model.FullPushDownTaskResponse",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Reference a data asset.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateReferenceArtifactRequest
   * @return CreateReferenceArtifactResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/CreateReferenceArtifact.ts.html |here} to see how to use CreateReferenceArtifact API.
   */
  public async createReferenceArtifact(
    createReferenceArtifactRequest: requests.CreateReferenceArtifactRequest
  ): Promise<responses.CreateReferenceArtifactResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataConnectivityManagementClient#createReferenceArtifact."
      );
    const operationName = "createReferenceArtifact";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": createReferenceArtifactRequest.registryId,
      "{dcmsArtifactId}": createReferenceArtifactRequest.dcmsArtifactId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createReferenceArtifactRequest.opcRequestId,
      "opc-retry-token": createReferenceArtifactRequest.opcRetryToken,
      "if-match": createReferenceArtifactRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createReferenceArtifactRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}/dcmsArtifacts/{dcmsArtifactId}/actions/referenceArtifact",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createReferenceArtifactRequest.createReferenceArtifactDetails,
        "CreateReferenceArtifactDetails",
        model.CreateReferenceArtifactDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateReferenceArtifactResponse>{},
        body: await response.json(),
        bodyKey: "referenceInfo",
        bodyModel: model.ReferenceInfo,
        type: "model.ReferenceInfo",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new Data Connectivity Management registry ready to perform data connectivity management.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateRegistryRequest
   * @return CreateRegistryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/CreateRegistry.ts.html |here} to see how to use CreateRegistry API.
   */
  public async createRegistry(
    createRegistryRequest: requests.CreateRegistryRequest
  ): Promise<responses.CreateRegistryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#createRegistry.");
    const operationName = "createRegistry";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createRegistryRequest.opcRetryToken,
      "opc-request-id": createRegistryRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createRegistryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createRegistryRequest.createRegistryDetails,
        "CreateRegistryDetails",
        model.CreateRegistryDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateRegistryResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Execute network validation on the selected data assets associated with the provided private endpoint.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param CreateTestNetworkConnectivityRequest
   * @return CreateTestNetworkConnectivityResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/CreateTestNetworkConnectivity.ts.html |here} to see how to use CreateTestNetworkConnectivity API.
   */
  public async createTestNetworkConnectivity(
    createTestNetworkConnectivityRequest: requests.CreateTestNetworkConnectivityRequest
  ): Promise<responses.CreateTestNetworkConnectivityResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataConnectivityManagementClient#createTestNetworkConnectivity."
      );
    const operationName = "createTestNetworkConnectivity";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": createTestNetworkConnectivityRequest.registryId
    };

    const queryParams = {
      "endpointId": createTestNetworkConnectivityRequest.endpointId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": createTestNetworkConnectivityRequest.opcRequestId,
      "opc-retry-token": createTestNetworkConnectivityRequest.opcRetryToken,
      "if-match": createTestNetworkConnectivityRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createTestNetworkConnectivityRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}/actions/testNetworkConnectivity",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createTestNetworkConnectivityRequest.createTestNetworkConnectivityDetails,
        "CreateTestNetworkConnectivityDetails",
        model.CreateTestNetworkConnectivityDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateTestNetworkConnectivityResponse>{},
        body: await response.json(),
        bodyKey: "testNetworkConnectivity",
        bodyModel: model.TestNetworkConnectivity,
        type: "model.TestNetworkConnectivity",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a connection using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteConnectionRequest
   * @return DeleteConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/DeleteConnection.ts.html |here} to see how to use DeleteConnection API.
   */
  public async deleteConnection(
    deleteConnectionRequest: requests.DeleteConnectionRequest
  ): Promise<responses.DeleteConnectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#deleteConnection.");
    const operationName = "deleteConnection";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": deleteConnectionRequest.registryId,
      "{connectionKey}": deleteConnectionRequest.connectionKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteConnectionRequest.ifMatch,
      "opc-request-id": deleteConnectionRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteConnectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}/connections/{connectionKey}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteConnectionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a data asset using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteDataAssetRequest
   * @return DeleteDataAssetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/DeleteDataAsset.ts.html |here} to see how to use DeleteDataAsset API.
   */
  public async deleteDataAsset(
    deleteDataAssetRequest: requests.DeleteDataAssetRequest
  ): Promise<responses.DeleteDataAssetResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#deleteDataAsset.");
    const operationName = "deleteDataAsset";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": deleteDataAssetRequest.registryId,
      "{dataAssetKey}": deleteDataAssetRequest.dataAssetKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDataAssetRequest.ifMatch,
      "opc-request-id": deleteDataAssetRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDataAssetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}/dataAssets/{dataAssetKey}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDataAssetResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a Data Connectivity Management endpoint resource by its identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteEndpointRequest
   * @return DeleteEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/DeleteEndpoint.ts.html |here} to see how to use DeleteEndpoint API.
   */
  public async deleteEndpoint(
    deleteEndpointRequest: requests.DeleteEndpointRequest
  ): Promise<responses.DeleteEndpointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#deleteEndpoint.");
    const operationName = "deleteEndpoint";
    const apiReferenceLink = "";
    const pathParams = {
      "{endpointId}": deleteEndpointRequest.endpointId
    };

    const queryParams = {
      "registryId": deleteEndpointRequest.registryId,
      "isForceOperation": deleteEndpointRequest.isForceOperation
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteEndpointRequest.ifMatch,
      "opc-request-id": deleteEndpointRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/endpoints/{endpointId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteEndpointResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Removes a folder using the specified identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteFolderRequest
   * @return DeleteFolderResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/DeleteFolder.ts.html |here} to see how to use DeleteFolder API.
   */
  public async deleteFolder(
    deleteFolderRequest: requests.DeleteFolderRequest
  ): Promise<responses.DeleteFolderResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#deleteFolder.");
    const operationName = "deleteFolder";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": deleteFolderRequest.registryId,
      "{folderKey}": deleteFolderRequest.folderKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteFolderRequest.ifMatch,
      "opc-request-id": deleteFolderRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteFolderRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}/folders/{folderKey}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteFolderResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This api is used to delete a persisted NetworkValidationStatus by its key
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteNetworkConnectivityStatusRequest
   * @return DeleteNetworkConnectivityStatusResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/DeleteNetworkConnectivityStatus.ts.html |here} to see how to use DeleteNetworkConnectivityStatus API.
   */
  public async deleteNetworkConnectivityStatus(
    deleteNetworkConnectivityStatusRequest: requests.DeleteNetworkConnectivityStatusRequest
  ): Promise<responses.DeleteNetworkConnectivityStatusResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataConnectivityManagementClient#deleteNetworkConnectivityStatus."
      );
    const operationName = "deleteNetworkConnectivityStatus";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": deleteNetworkConnectivityStatusRequest.registryId,
      "{networkValidationStatusKey}":
        deleteNetworkConnectivityStatusRequest.networkValidationStatusKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deleteNetworkConnectivityStatusRequest.opcRequestId,
      "if-match": deleteNetworkConnectivityStatusRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteNetworkConnectivityStatusRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}/networkConnectivityStatus/{networkValidationStatusKey}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteNetworkConnectivityStatusResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a Data Connectivity Management registry resource by its identifier.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeleteRegistryRequest
   * @return DeleteRegistryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/DeleteRegistry.ts.html |here} to see how to use DeleteRegistry API.
   */
  public async deleteRegistry(
    deleteRegistryRequest: requests.DeleteRegistryRequest
  ): Promise<responses.DeleteRegistryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#deleteRegistry.");
    const operationName = "deleteRegistry";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": deleteRegistryRequest.registryId
    };

    const queryParams = {
      "isForceOperation": deleteRegistryRequest.isForceOperation
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteRegistryRequest.ifMatch,
      "opc-request-id": deleteRegistryRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteRegistryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteRegistryResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the Derived Entities from the EntityFlowMode and reference key of DataObject
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param DeriveEntitiesRequest
   * @return DeriveEntitiesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/DeriveEntities.ts.html |here} to see how to use DeriveEntities API.
   */
  public async deriveEntities(
    deriveEntitiesRequest: requests.DeriveEntitiesRequest
  ): Promise<responses.DeriveEntitiesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#deriveEntities.");
    const operationName = "deriveEntities";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": deriveEntitiesRequest.registryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": deriveEntitiesRequest.opcRequestId,
      "opc-retry-token": deriveEntitiesRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deriveEntitiesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}/actions/deriveEntities",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        deriveEntitiesRequest.deriveEntitiesDetails,
        "DeriveEntitiesDetails",
        model.DeriveEntitiesDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeriveEntitiesResponse>{},
        body: await response.json(),
        bodyKey: "deriveEntities",
        bodyModel: model.DeriveEntities,
        type: "model.DeriveEntities",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves the connection details using the specified identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetConnectionRequest
   * @return GetConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/GetConnection.ts.html |here} to see how to use GetConnection API.
   */
  public async getConnection(
    getConnectionRequest: requests.GetConnectionRequest
  ): Promise<responses.GetConnectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#getConnection.");
    const operationName = "getConnection";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": getConnectionRequest.registryId,
      "{connectionKey}": getConnectionRequest.connectionKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getConnectionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getConnectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}/connections/{connectionKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetConnectionResponse>{},
        body: await response.json(),
        bodyKey: "connection",
        bodyModel: model.Connection,
        type: "model.Connection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves details of a data asset using the specified identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDataAssetRequest
   * @return GetDataAssetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/GetDataAsset.ts.html |here} to see how to use GetDataAsset API.
   */
  public async getDataAsset(
    getDataAssetRequest: requests.GetDataAssetRequest
  ): Promise<responses.GetDataAssetResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#getDataAsset.");
    const operationName = "getDataAsset";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": getDataAssetRequest.registryId,
      "{dataAssetKey}": getDataAssetRequest.dataAssetKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDataAssetRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDataAssetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}/dataAssets/{dataAssetKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDataAssetResponse>{},
        body: await response.json(),
        bodyKey: "dataAsset",
        bodyModel: model.DataAsset,
        type: "model.DataAsset",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves the data entity details with the given name from live schema.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDataEntityRequest
   * @return GetDataEntityResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/GetDataEntity.ts.html |here} to see how to use GetDataEntity API.
   */
  public async getDataEntity(
    getDataEntityRequest: requests.GetDataEntityRequest
  ): Promise<responses.GetDataEntityResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#getDataEntity.");
    const operationName = "getDataEntity";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": getDataEntityRequest.registryId,
      "{connectionKey}": getDataEntityRequest.connectionKey,
      "{schemaResourceName}": getDataEntityRequest.schemaResourceName,
      "{dataEntityKey}": getDataEntityRequest.dataEntityKey
    };

    const queryParams = {
      "endpointId": getDataEntityRequest.endpointId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDataEntityRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDataEntityRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/registries/{registryId}/connections/{connectionKey}/schemas/{schemaResourceName}/dataEntities/{dataEntityKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDataEntityResponse>{},
        body: await response.json(),
        bodyKey: "dataEntity",
        bodyModel: model.DataEntity,
        type: "model.DataEntity",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets a Data Connectivity Management endpoint by its identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetEndpointRequest
   * @return GetEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/GetEndpoint.ts.html |here} to see how to use GetEndpoint API.
   */
  public async getEndpoint(
    getEndpointRequest: requests.GetEndpointRequest
  ): Promise<responses.GetEndpointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#getEndpoint.");
    const operationName = "getEndpoint";
    const apiReferenceLink = "";
    const pathParams = {
      "{endpointId}": getEndpointRequest.endpointId
    };

    const queryParams = {
      "registryId": getEndpointRequest.registryId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getEndpointRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/endpoints/{endpointId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetEndpointResponse>{},
        body: await response.json(),
        bodyKey: "endpoint",
        bodyModel: model.Endpoint,
        type: "model.Endpoint",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This endpoint is used to fetch connector-specific engine configurations.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param GetEngineConfigurationsRequest
   * @return GetEngineConfigurationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/GetEngineConfigurations.ts.html |here} to see how to use GetEngineConfigurations API.
   */
  public async getEngineConfigurations(
    getEngineConfigurationsRequest: requests.GetEngineConfigurationsRequest
  ): Promise<responses.GetEngineConfigurationsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataConnectivityManagementClient#getEngineConfigurations."
      );
    const operationName = "getEngineConfigurations";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": getEngineConfigurationsRequest.registryId,
      "{connectionKey}": getEngineConfigurationsRequest.connectionKey
    };

    const queryParams = {
      "engineTypeQueryParam": getEngineConfigurationsRequest.engineTypeQueryParam
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getEngineConfigurationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getEngineConfigurationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}/connections/{connectionKey}/engineConfigurations",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetEngineConfigurationsResponse>{},
        body: await response.json(),
        bodyKey: "configDetails",
        bodyModel: model.ConfigDetails,
        type: "model.ConfigDetails",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the status or the result of the execution.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetExecuteOperationJobRequest
   * @return GetExecuteOperationJobResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/GetExecuteOperationJob.ts.html |here} to see how to use GetExecuteOperationJob API.
   */
  public async getExecuteOperationJob(
    getExecuteOperationJobRequest: requests.GetExecuteOperationJobRequest
  ): Promise<responses.GetExecuteOperationJobResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataConnectivityManagementClient#getExecuteOperationJob."
      );
    const operationName = "getExecuteOperationJob";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": getExecuteOperationJobRequest.registryId,
      "{connectionKey}": getExecuteOperationJobRequest.connectionKey,
      "{schemaResourceName}": getExecuteOperationJobRequest.schemaResourceName,
      "{executeOperationJobKey}": getExecuteOperationJobRequest.executeOperationJobKey
    };

    const queryParams = {
      "endpointId": getExecuteOperationJobRequest.endpointId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getExecuteOperationJobRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getExecuteOperationJobRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/registries/{registryId}/connections/{connectionKey}/schemas/{schemaResourceName}/executeOperationJobs/{executeOperationJobKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetExecuteOperationJobResponse>{},
        body: await response.json(),
        bodyKey: "executeOperationJob",
        bodyModel: model.ExecuteOperationJob,
        type: "model.ExecuteOperationJob",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves the folder details using the specified identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetFolderRequest
   * @return GetFolderResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/GetFolder.ts.html |here} to see how to use GetFolder API.
   */
  public async getFolder(
    getFolderRequest: requests.GetFolderRequest
  ): Promise<responses.GetFolderResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#getFolder.");
    const operationName = "getFolder";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": getFolderRequest.registryId,
      "{folderKey}": getFolderRequest.folderKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getFolderRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getFolderRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}/folders/{folderKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetFolderResponse>{},
        body: await response.json(),
        bodyKey: "folder",
        bodyModel: model.Folder,
        type: "model.Folder",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Get the status of network reachability check, with the timestamp of when the status was last checked, for a given PrivateEndpoint-DataAsset pair.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetNetworkConnectivityStatusRequest
   * @return GetNetworkConnectivityStatusResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/GetNetworkConnectivityStatus.ts.html |here} to see how to use GetNetworkConnectivityStatus API.
   */
  public async getNetworkConnectivityStatus(
    getNetworkConnectivityStatusRequest: requests.GetNetworkConnectivityStatusRequest
  ): Promise<responses.GetNetworkConnectivityStatusResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataConnectivityManagementClient#getNetworkConnectivityStatus."
      );
    const operationName = "getNetworkConnectivityStatus";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": getNetworkConnectivityStatusRequest.registryId,
      "{dataAssetKey}": getNetworkConnectivityStatusRequest.dataAssetKey
    };

    const queryParams = {
      "endpointId": getNetworkConnectivityStatusRequest.endpointId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getNetworkConnectivityStatusRequest.opcRequestId,
      "opc-retry-token": getNetworkConnectivityStatusRequest.opcRetryToken,
      "if-match": getNetworkConnectivityStatusRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getNetworkConnectivityStatusRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}/dataAssets/{dataAssetKey}/networkConnectivityStatus",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetNetworkConnectivityStatusResponse>{},
        body: await response.json(),
        bodyKey: "networkConnectivityStatus",
        bodyModel: model.NetworkConnectivityStatus,
        type: "model.NetworkConnectivityStatus",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves the details of operation with the given resource name.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetOperationRequest
   * @return GetOperationResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/GetOperation.ts.html |here} to see how to use GetOperation API.
   */
  public async getOperation(
    getOperationRequest: requests.GetOperationRequest
  ): Promise<responses.GetOperationResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#getOperation.");
    const operationName = "getOperation";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": getOperationRequest.registryId,
      "{connectionKey}": getOperationRequest.connectionKey,
      "{schemaResourceName}": getOperationRequest.schemaResourceName,
      "{operationResourceName}": getOperationRequest.operationResourceName
    };

    const queryParams = {
      "endpointId": getOperationRequest.endpointId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getOperationRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getOperationRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/registries/{registryId}/connections/{connectionKey}/schemas/{schemaResourceName}/operations/{operationResourceName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetOperationResponse>{},
        body: await response.json(),
        bodyKey: "operation",
        bodyModel: model.Operation,
        type: "model.Operation",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a Data Connectivity Management registry using the specified identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetRegistryRequest
   * @return GetRegistryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/GetRegistry.ts.html |here} to see how to use GetRegistry API.
   */
  public async getRegistry(
    getRegistryRequest: requests.GetRegistryRequest
  ): Promise<responses.GetRegistryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#getRegistry.");
    const operationName = "getRegistry";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": getRegistryRequest.registryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getRegistryRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getRegistryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetRegistryResponse>{},
        body: await response.json(),
        bodyKey: "registry",
        bodyModel: model.Registry,
        type: "model.Registry",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a schema that can be accessed using the specified connection.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetSchemaRequest
   * @return GetSchemaResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/GetSchema.ts.html |here} to see how to use GetSchema API.
   */
  public async getSchema(
    getSchemaRequest: requests.GetSchemaRequest
  ): Promise<responses.GetSchemaResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#getSchema.");
    const operationName = "getSchema";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": getSchemaRequest.registryId,
      "{connectionKey}": getSchemaRequest.connectionKey,
      "{schemaResourceName}": getSchemaRequest.schemaResourceName
    };

    const queryParams = {
      "endpointId": getSchemaRequest.endpointId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getSchemaRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getSchemaRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}/connections/{connectionKey}/schemas/{schemaResourceName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetSchemaResponse>{},
        body: await response.json(),
        bodyKey: "schema",
        bodyModel: model.Schema,
        type: "model.Schema",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This endpoint retrieves dataAsset and connection attributes from DataAssetRegistry.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetTypeRequest
   * @return GetTypeResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/GetType.ts.html |here} to see how to use GetType API.
   */
  public async getType(
    getTypeRequest: requests.GetTypeRequest
  ): Promise<responses.GetTypeResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#getType.");
    const operationName = "getType";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": getTypeRequest.registryId,
      "{typeKey}": getTypeRequest.typeKey
    };

    const queryParams = {
      "fields": getTypeRequest.fields
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getTypeRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getTypeRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}/types/{typeKey}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTypeResponse>{},
        body: await response.json(),
        bodyKey: "type",
        bodyModel: model.Type,
        type: "model.Type",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the status of the work request with the given ID.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#getWorkRequest.");
    const operationName = "getWorkRequest";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a list of all connections.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListConnectionsRequest
   * @return ListConnectionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/ListConnections.ts.html |here} to see how to use ListConnections API.
   */
  public async listConnections(
    listConnectionsRequest: requests.ListConnectionsRequest
  ): Promise<responses.ListConnectionsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#listConnections.");
    const operationName = "listConnections";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": listConnectionsRequest.registryId
    };

    const queryParams = {
      "dataAssetKey": listConnectionsRequest.dataAssetKey,
      "name": listConnectionsRequest.name,
      "page": listConnectionsRequest.page,
      "limit": listConnectionsRequest.limit,
      "fields": listConnectionsRequest.fields,
      "type": listConnectionsRequest.type,
      "sortBy": listConnectionsRequest.sortBy,
      "sortOrder": listConnectionsRequest.sortOrder,
      "favoritesQueryParam": listConnectionsRequest.favoritesQueryParam
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listConnectionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listConnectionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}/connections",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListConnectionsResponse>{},
        body: await response.json(),
        bodyKey: "connectionSummaryCollection",
        bodyModel: model.ConnectionSummaryCollection,
        type: "model.ConnectionSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a list of all data asset summaries.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDataAssetsRequest
   * @return ListDataAssetsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/ListDataAssets.ts.html |here} to see how to use ListDataAssets API.
   */
  public async listDataAssets(
    listDataAssetsRequest: requests.ListDataAssetsRequest
  ): Promise<responses.ListDataAssetsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#listDataAssets.");
    const operationName = "listDataAssets";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": listDataAssetsRequest.registryId
    };

    const queryParams = {
      "page": listDataAssetsRequest.page,
      "limit": listDataAssetsRequest.limit,
      "fields": listDataAssetsRequest.fields,
      "includeTypes": listDataAssetsRequest.includeTypes,
      "sortBy": listDataAssetsRequest.sortBy,
      "sortOrder": listDataAssetsRequest.sortOrder,
      "name": listDataAssetsRequest.name,
      "excludeTypes": listDataAssetsRequest.excludeTypes,
      "favoritesQueryParam": listDataAssetsRequest.favoritesQueryParam,
      "folderId": listDataAssetsRequest.folderId,
      "endpointIds": listDataAssetsRequest.endpointIds,
      "excludeEndpointIds": listDataAssetsRequest.excludeEndpointIds
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDataAssetsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDataAssetsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}/dataAssets",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDataAssetsResponse>{},
        body: await response.json(),
        bodyKey: "dataAssetSummaryCollection",
        bodyModel: model.DataAssetSummaryCollection,
        type: "model.DataAssetSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists a summary of data entities from the data asset using the specified connection.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDataEntitiesRequest
   * @return ListDataEntitiesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/ListDataEntities.ts.html |here} to see how to use ListDataEntities API.
   */
  public async listDataEntities(
    listDataEntitiesRequest: requests.ListDataEntitiesRequest
  ): Promise<responses.ListDataEntitiesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#listDataEntities.");
    const operationName = "listDataEntities";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": listDataEntitiesRequest.registryId,
      "{connectionKey}": listDataEntitiesRequest.connectionKey,
      "{schemaResourceName}": listDataEntitiesRequest.schemaResourceName
    };

    const queryParams = {
      "name": listDataEntitiesRequest.name,
      "page": listDataEntitiesRequest.page,
      "type": listDataEntitiesRequest.type,
      "limit": listDataEntitiesRequest.limit,
      "fields": listDataEntitiesRequest.fields,
      "sortBy": listDataEntitiesRequest.sortBy,
      "sortOrder": listDataEntitiesRequest.sortOrder,
      "apiMode": listDataEntitiesRequest.apiMode,
      "nameList": listDataEntitiesRequest.nameList,
      "isPattern": listDataEntitiesRequest.isPattern,
      "endpointId": listDataEntitiesRequest.endpointId,
      "includeTypes": listDataEntitiesRequest.includeTypes
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDataEntitiesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDataEntitiesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/registries/{registryId}/connections/{connectionKey}/schemas/{schemaResourceName}/dataEntities",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDataEntitiesResponse>{},
        body: await response.json(),
        bodyKey: "dataEntitySummaryCollection",
        bodyModel: model.DataEntitySummaryCollection,
        type: "model.DataEntitySummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of Data Connectivity Management endpoints.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListEndpointsRequest
   * @return ListEndpointsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/ListEndpoints.ts.html |here} to see how to use ListEndpoints API.
   */
  public async listEndpoints(
    listEndpointsRequest: requests.ListEndpointsRequest
  ): Promise<responses.ListEndpointsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#listEndpoints.");
    const operationName = "listEndpoints";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listEndpointsRequest.compartmentId,
      "registryId": listEndpointsRequest.registryId,
      "name": listEndpointsRequest.name,
      "limit": listEndpointsRequest.limit,
      "page": listEndpointsRequest.page,
      "lifecycleState": listEndpointsRequest.lifecycleState,
      "sortOrder": listEndpointsRequest.sortOrder,
      "sortBy": listEndpointsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listEndpointsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listEndpointsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/endpoints",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListEndpointsResponse>{},
        body: await response.json(),
        bodyKey: "endpointSummaryCollection",
        bodyModel: model.EndpointSummaryCollection,
        type: "model.EndpointSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a list of all the folders.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListFoldersRequest
   * @return ListFoldersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/ListFolders.ts.html |here} to see how to use ListFolders API.
   */
  public async listFolders(
    listFoldersRequest: requests.ListFoldersRequest
  ): Promise<responses.ListFoldersResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#listFolders.");
    const operationName = "listFolders";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": listFoldersRequest.registryId
    };

    const queryParams = {
      "name": listFoldersRequest.name,
      "page": listFoldersRequest.page,
      "limit": listFoldersRequest.limit,
      "fields": listFoldersRequest.fields,
      "type": listFoldersRequest.type,
      "sortBy": listFoldersRequest.sortBy,
      "sortOrder": listFoldersRequest.sortOrder,
      "favoritesQueryParam": listFoldersRequest.favoritesQueryParam
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listFoldersRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listFoldersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}/folders",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListFoldersResponse>{},
        body: await response.json(),
        bodyKey: "folderSummaryCollection",
        bodyModel: model.FolderSummaryCollection,
        type: "model.FolderSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the summary of operations that are present in the schema, identified by the schema name.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListOperationsRequest
   * @return ListOperationsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/ListOperations.ts.html |here} to see how to use ListOperations API.
   */
  public async listOperations(
    listOperationsRequest: requests.ListOperationsRequest
  ): Promise<responses.ListOperationsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#listOperations.");
    const operationName = "listOperations";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": listOperationsRequest.registryId,
      "{connectionKey}": listOperationsRequest.connectionKey,
      "{schemaResourceName}": listOperationsRequest.schemaResourceName
    };

    const queryParams = {
      "name": listOperationsRequest.name,
      "page": listOperationsRequest.page,
      "limit": listOperationsRequest.limit,
      "sortBy": listOperationsRequest.sortBy,
      "sortOrder": listOperationsRequest.sortOrder,
      "endpointId": listOperationsRequest.endpointId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listOperationsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listOperationsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path:
        "/registries/{registryId}/connections/{connectionKey}/schemas/{schemaResourceName}/operations",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListOperationsResponse>{},
        body: await response.json(),
        bodyKey: "operationSummaryCollection",
        bodyModel: model.OperationSummaryCollection,
        type: "model.OperationSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a list of all reference info of a dcms artifact.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListReferenceArtifactsRequest
   * @return ListReferenceArtifactsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/ListReferenceArtifacts.ts.html |here} to see how to use ListReferenceArtifacts API.
   */
  public async listReferenceArtifacts(
    listReferenceArtifactsRequest: requests.ListReferenceArtifactsRequest
  ): Promise<responses.ListReferenceArtifactsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataConnectivityManagementClient#listReferenceArtifacts."
      );
    const operationName = "listReferenceArtifacts";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": listReferenceArtifactsRequest.registryId,
      "{dcmsArtifactId}": listReferenceArtifactsRequest.dcmsArtifactId
    };

    const queryParams = {
      "page": listReferenceArtifactsRequest.page,
      "limit": listReferenceArtifactsRequest.limit,
      "fields": listReferenceArtifactsRequest.fields,
      "type": listReferenceArtifactsRequest.type,
      "sortBy": listReferenceArtifactsRequest.sortBy,
      "sortOrder": listReferenceArtifactsRequest.sortOrder,
      "name": listReferenceArtifactsRequest.name,
      "excludeTypes": listReferenceArtifactsRequest.excludeTypes,
      "favoritesQueryParam": listReferenceArtifactsRequest.favoritesQueryParam,
      "serviceArtifactId": listReferenceArtifactsRequest.serviceArtifactId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listReferenceArtifactsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listReferenceArtifactsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}/dcmsArtifacts/{dcmsArtifactId}/referenceArtifacts",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListReferenceArtifactsResponse>{},
        body: await response.json(),
        bodyKey: "referenceArtifactSummaryCollection",
        bodyModel: model.ReferenceArtifactSummaryCollection,
        type: "model.ReferenceArtifactSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a list of Data Connectivity Management registries.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListRegistriesRequest
   * @return ListRegistriesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/ListRegistries.ts.html |here} to see how to use ListRegistries API.
   */
  public async listRegistries(
    listRegistriesRequest: requests.ListRegistriesRequest
  ): Promise<responses.ListRegistriesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#listRegistries.");
    const operationName = "listRegistries";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listRegistriesRequest.compartmentId,
      "name": listRegistriesRequest.name,
      "limit": listRegistriesRequest.limit,
      "page": listRegistriesRequest.page,
      "isDeepLookup": listRegistriesRequest.isDeepLookup,
      "lifecycleState": listRegistriesRequest.lifecycleState
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listRegistriesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listRegistriesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListRegistriesResponse>{},
        body: await response.json(),
        bodyKey: "registrySummaryCollection",
        bodyModel: model.RegistrySummaryCollection,
        type: "model.RegistrySummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a list of all the schemas that can be accessed using the specified connection.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListSchemasRequest
   * @return ListSchemasResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/ListSchemas.ts.html |here} to see how to use ListSchemas API.
   */
  public async listSchemas(
    listSchemasRequest: requests.ListSchemasRequest
  ): Promise<responses.ListSchemasResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#listSchemas.");
    const operationName = "listSchemas";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": listSchemasRequest.registryId,
      "{connectionKey}": listSchemasRequest.connectionKey
    };

    const queryParams = {
      "page": listSchemasRequest.page,
      "limit": listSchemasRequest.limit,
      "fields": listSchemasRequest.fields,
      "sortBy": listSchemasRequest.sortBy,
      "sortOrder": listSchemasRequest.sortOrder,
      "schemaResourceKey": listSchemasRequest.schemaResourceKey,
      "name": listSchemasRequest.name,
      "nameList": listSchemasRequest.nameList,
      "endpointId": listSchemasRequest.endpointId,
      "includeTypes": listSchemasRequest.includeTypes
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listSchemasRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listSchemasRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}/connections/{connectionKey}/schemas",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListSchemasResponse>{},
        body: await response.json(),
        bodyKey: "schemaSummaryCollection",
        bodyModel: model.SchemaSummaryCollection,
        type: "model.SchemaSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * This endpoint retrieves a list of all the supported connector types.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListTypesRequest
   * @return ListTypesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/ListTypes.ts.html |here} to see how to use ListTypes API.
   */
  public async listTypes(
    listTypesRequest: requests.ListTypesRequest
  ): Promise<responses.ListTypesResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#listTypes.");
    const operationName = "listTypes";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": listTypesRequest.registryId
    };

    const queryParams = {
      "page": listTypesRequest.page,
      "limit": listTypesRequest.limit,
      "type": listTypesRequest.type,
      "sortBy": listTypesRequest.sortBy,
      "sortOrder": listTypesRequest.sortOrder,
      "name": listTypesRequest.name
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTypesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listTypesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}/types",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTypesResponse>{},
        body: await response.json(),
        bodyKey: "typesSummaryCollection",
        bodyModel: model.TypesSummaryCollection,
        type: "model.TypesSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-prev-page"),
            key: "opcPrevPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-total-items"),
            key: "opcTotalItems",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a (paginated) list of errors for a given work request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataConnectivityManagementClient#listWorkRequestErrors."
      );
    const operationName = "listWorkRequestErrors";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/workRequestErrors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestErrorCollection",
        bodyModel: model.WorkRequestErrorCollection,
        type: "model.WorkRequestErrorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a (paginated) list of logs for a given work request.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#listWorkRequestLogs.");
    const operationName = "listWorkRequestLogs";
    const apiReferenceLink = "";
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestLogCollection",
        bodyModel: model.WorkRequestLogCollection,
        type: "model.WorkRequestLogCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the work requests in a compartment.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#listWorkRequests.");
    const operationName = "listWorkRequests";
    const apiReferenceLink = "";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "registryId": listWorkRequestsRequest.registryId,
      "workRequestStatus": listWorkRequestsRequest.workRequestStatus,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestSummaryCollection",
        bodyModel: model.WorkRequestSummaryCollection,
        type: "model.WorkRequestSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates a connection under a data asset.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateConnectionRequest
   * @return UpdateConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/UpdateConnection.ts.html |here} to see how to use UpdateConnection API.
   */
  public async updateConnection(
    updateConnectionRequest: requests.UpdateConnectionRequest
  ): Promise<responses.UpdateConnectionResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#updateConnection.");
    const operationName = "updateConnection";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": updateConnectionRequest.registryId,
      "{connectionKey}": updateConnectionRequest.connectionKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateConnectionRequest.opcRequestId,
      "if-match": updateConnectionRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateConnectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}/connections/{connectionKey}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateConnectionRequest.updateConnectionDetails,
        "UpdateConnectionDetails",
        model.UpdateConnectionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateConnectionResponse>{},
        body: await response.json(),
        bodyKey: "connection",
        bodyModel: model.Connection,
        type: "model.Connection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates a specific data asset with default connection.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateDataAssetRequest
   * @return UpdateDataAssetResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/UpdateDataAsset.ts.html |here} to see how to use UpdateDataAsset API.
   */
  public async updateDataAsset(
    updateDataAssetRequest: requests.UpdateDataAssetRequest
  ): Promise<responses.UpdateDataAssetResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#updateDataAsset.");
    const operationName = "updateDataAsset";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": updateDataAssetRequest.registryId,
      "{dataAssetKey}": updateDataAssetRequest.dataAssetKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateDataAssetRequest.opcRequestId,
      "if-match": updateDataAssetRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDataAssetRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}/dataAssets/{dataAssetKey}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDataAssetRequest.updateDataAssetDetails,
        "UpdateDataAssetDetails",
        model.UpdateDataAssetDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDataAssetResponse>{},
        body: await response.json(),
        bodyKey: "dataAsset",
        bodyModel: model.DataAsset,
        type: "model.DataAsset",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Data Connectivity Management endpoint.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateEndpointRequest
   * @return UpdateEndpointResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/UpdateEndpoint.ts.html |here} to see how to use UpdateEndpoint API.
   */
  public async updateEndpoint(
    updateEndpointRequest: requests.UpdateEndpointRequest
  ): Promise<responses.UpdateEndpointResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#updateEndpoint.");
    const operationName = "updateEndpoint";
    const apiReferenceLink = "";
    const pathParams = {
      "{endpointId}": updateEndpointRequest.endpointId
    };

    const queryParams = {
      "registryId": updateEndpointRequest.registryId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateEndpointRequest.ifMatch,
      "opc-request-id": updateEndpointRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateEndpointRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/endpoints/{endpointId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateEndpointRequest.updateEndpointDetails,
        "UpdateEndpointDetails",
        model.UpdateEndpointDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateEndpointResponse>{},
        body: await response.json(),
        bodyKey: "endpoint",
        bodyModel: model.Endpoint,
        type: "model.Endpoint",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates a folder under a specified registry.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateFolderRequest
   * @return UpdateFolderResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/UpdateFolder.ts.html |here} to see how to use UpdateFolder API.
   */
  public async updateFolder(
    updateFolderRequest: requests.UpdateFolderRequest
  ): Promise<responses.UpdateFolderResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#updateFolder.");
    const operationName = "updateFolder";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": updateFolderRequest.registryId,
      "{folderKey}": updateFolderRequest.folderKey
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": updateFolderRequest.opcRequestId,
      "if-match": updateFolderRequest.ifMatch
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateFolderRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}/folders/{folderKey}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateFolderRequest.updateFolderDetails,
        "UpdateFolderDetails",
        model.UpdateFolderDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateFolderResponse>{},
        body: await response.json(),
        bodyKey: "folder",
        bodyModel: model.Folder,
        type: "model.Folder",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the Data Connectivity Management Registry.
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param UpdateRegistryRequest
   * @return UpdateRegistryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/UpdateRegistry.ts.html |here} to see how to use UpdateRegistry API.
   */
  public async updateRegistry(
    updateRegistryRequest: requests.UpdateRegistryRequest
  ): Promise<responses.UpdateRegistryResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DataConnectivityManagementClient#updateRegistry.");
    const operationName = "updateRegistry";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": updateRegistryRequest.registryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateRegistryRequest.ifMatch,
      "opc-request-id": updateRegistryRequest.opcRequestId
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateRegistryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateRegistryRequest.updateRegistryDetails,
        "UpdateRegistryDetails",
        model.UpdateRegistryDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateRegistryResponse>{},
        body: await response.json(),
        bodyKey: "registry",
        bodyModel: model.Registry,
        type: "model.Registry",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Validates the dataAsset network reachability.
   *
   * This operation does not retry by default if the user has not defined a retry configuration.
   * @param ValidateDataAssetNetworkReachablityRequest
   * @return ValidateDataAssetNetworkReachablityResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/ValidateDataAssetNetworkReachablity.ts.html |here} to see how to use ValidateDataAssetNetworkReachablity API.
   */
  public async validateDataAssetNetworkReachablity(
    validateDataAssetNetworkReachablityRequest: requests.ValidateDataAssetNetworkReachablityRequest
  ): Promise<responses.ValidateDataAssetNetworkReachablityResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation DataConnectivityManagementClient#validateDataAssetNetworkReachablity."
      );
    const operationName = "validateDataAssetNetworkReachablity";
    const apiReferenceLink = "";
    const pathParams = {
      "{endpointId}": validateDataAssetNetworkReachablityRequest.endpointId
    };

    const queryParams = {
      "registryId": validateDataAssetNetworkReachablityRequest.registryId
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": validateDataAssetNetworkReachablityRequest.ifMatch,
      "opc-request-id": validateDataAssetNetworkReachablityRequest.opcRequestId,
      "opc-retry-token": validateDataAssetNetworkReachablityRequest.opcRetryToken
    };

    const specRetryConfiguration = common.NoRetryConfigurationDetails;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      validateDataAssetNetworkReachablityRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/endpoints/{endpointId}/actions/validateDataAssetNetworkReachablity",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ValidateDataAssetNetworkReachablityResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
export enum NetworkValidationApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class NetworkValidationClient {
  protected static serviceEndpointTemplate =
    "https://dataconnectivity.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker = null;
  protected _httpOptions: any = undefined;
  public targetService = "NetworkValidation";

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
    }
    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20210217";
    if (this.logger) this.logger.info(`NetworkValidationClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      NetworkValidationClient.serviceEndpointTemplate,
      region,
      NetworkValidationClient.endpointServiceName
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      NetworkValidationClient.serviceEndpointTemplate,
      regionId,
      NetworkValidationClient.endpointServiceName
    );
  }

  /**
   * This API is used to get the network connectivity status fofor all the data assets attached to the provided private endpoint.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetNetworkConnectivityStatusCollectionRequest
   * @return GetNetworkConnectivityStatusCollectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/dataconnectivity/GetNetworkConnectivityStatusCollection.ts.html |here} to see how to use GetNetworkConnectivityStatusCollection API.
   */
  public async getNetworkConnectivityStatusCollection(
    getNetworkConnectivityStatusCollectionRequest: requests.GetNetworkConnectivityStatusCollectionRequest
  ): Promise<responses.GetNetworkConnectivityStatusCollectionResponse> {
    if (this.logger)
      this.logger.debug(
        "Calling operation NetworkValidationClient#getNetworkConnectivityStatusCollection."
      );
    const operationName = "getNetworkConnectivityStatusCollection";
    const apiReferenceLink = "";
    const pathParams = {
      "{registryId}": getNetworkConnectivityStatusCollectionRequest.registryId,
      "{endpointKey}": getNetworkConnectivityStatusCollectionRequest.endpointKey
    };

    const queryParams = {
      "page": getNetworkConnectivityStatusCollectionRequest.page,
      "limit": getNetworkConnectivityStatusCollectionRequest.limit,
      "sortBy": getNetworkConnectivityStatusCollectionRequest.sortBy,
      "sortOrder": getNetworkConnectivityStatusCollectionRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getNetworkConnectivityStatusCollectionRequest.opcRequestId,
      "opc-retry-token": getNetworkConnectivityStatusCollectionRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getNetworkConnectivityStatusCollectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/registries/{registryId}/endpoints/{endpointKey}/networkConnectivityStatusCollection",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetNetworkConnectivityStatusCollectionResponse>{},
        body: await response.json(),
        bodyKey: "networkConnectivityStatusCollection",
        bodyModel: model.NetworkConnectivityStatusCollection,
        type: "model.NetworkConnectivityStatusCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
