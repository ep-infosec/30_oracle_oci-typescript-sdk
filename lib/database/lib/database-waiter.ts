/**
 * Database Service API
 * The API for the Database Service. Use this API to manage resources such as databases and DB Systems. For more information, see [Overview of the Database Service](/iaas/Content/Database/Concepts/databaseoverview.htm).

 * OpenAPI spec version: 20160918
 * Contact: sic_dbaas_cp_us_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { DatabaseClient } from "./client";
import { genericWaiter, genericTerminalConditionWaiter, WaiterConfiguration } from "oci-common";
import { waitForWorkRequest, WorkRequestClient, responses } from "oci-workrequests";

export class DatabaseWaiter {
  public constructor(
    private client: DatabaseClient,
    private workRequestClient: WorkRequestClient,
    private readonly config?: WaiterConfiguration
  ) {}

  /**
   * Waits forActivateExadataInfrastructure
   *
   * @param request the request to send
   * @return response returns ActivateExadataInfrastructureResponse, GetWorkRequestResponse tuple
   */
  public async forActivateExadataInfrastructure(
    request: serviceRequests.ActivateExadataInfrastructureRequest
  ): Promise<{
    response: serviceResponses.ActivateExadataInfrastructureResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const activateExadataInfrastructureResponse = await this.client.activateExadataInfrastructure(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      activateExadataInfrastructureResponse.opcWorkRequestId
    );
    return {
      response: activateExadataInfrastructureResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forAddStorageCapacityCloudExadataInfrastructure
   *
   * @param request the request to send
   * @return response returns AddStorageCapacityCloudExadataInfrastructureResponse, GetWorkRequestResponse tuple
   */
  public async forAddStorageCapacityCloudExadataInfrastructure(
    request: serviceRequests.AddStorageCapacityCloudExadataInfrastructureRequest
  ): Promise<{
    response: serviceResponses.AddStorageCapacityCloudExadataInfrastructureResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const addStorageCapacityCloudExadataInfrastructureResponse = await this.client.addStorageCapacityCloudExadataInfrastructure(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      addStorageCapacityCloudExadataInfrastructureResponse.opcWorkRequestId
    );
    return {
      response: addStorageCapacityCloudExadataInfrastructureResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forAddStorageCapacityExadataInfrastructure
   *
   * @param request the request to send
   * @return response returns AddStorageCapacityExadataInfrastructureResponse, GetWorkRequestResponse tuple
   */
  public async forAddStorageCapacityExadataInfrastructure(
    request: serviceRequests.AddStorageCapacityExadataInfrastructureRequest
  ): Promise<{
    response: serviceResponses.AddStorageCapacityExadataInfrastructureResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const addStorageCapacityExadataInfrastructureResponse = await this.client.addStorageCapacityExadataInfrastructure(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      addStorageCapacityExadataInfrastructureResponse.opcWorkRequestId
    );
    return {
      response: addStorageCapacityExadataInfrastructureResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forAddVirtualMachineToCloudVmCluster
   *
   * @param request the request to send
   * @return response returns AddVirtualMachineToCloudVmClusterResponse, GetWorkRequestResponse tuple
   */
  public async forAddVirtualMachineToCloudVmCluster(
    request: serviceRequests.AddVirtualMachineToCloudVmClusterRequest
  ): Promise<{
    response: serviceResponses.AddVirtualMachineToCloudVmClusterResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const addVirtualMachineToCloudVmClusterResponse = await this.client.addVirtualMachineToCloudVmCluster(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      addVirtualMachineToCloudVmClusterResponse.opcWorkRequestId
    );
    return {
      response: addVirtualMachineToCloudVmClusterResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forAddVirtualMachineToVmCluster
   *
   * @param request the request to send
   * @return response returns AddVirtualMachineToVmClusterResponse, GetWorkRequestResponse tuple
   */
  public async forAddVirtualMachineToVmCluster(
    request: serviceRequests.AddVirtualMachineToVmClusterRequest
  ): Promise<{
    response: serviceResponses.AddVirtualMachineToVmClusterResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const addVirtualMachineToVmClusterResponse = await this.client.addVirtualMachineToVmCluster(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      addVirtualMachineToVmClusterResponse.opcWorkRequestId
    );
    return {
      response: addVirtualMachineToVmClusterResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forAutonomousDatabaseManualRefresh
   *
   * @param request the request to send
   * @return response returns AutonomousDatabaseManualRefreshResponse, GetWorkRequestResponse tuple
   */
  public async forAutonomousDatabaseManualRefresh(
    request: serviceRequests.AutonomousDatabaseManualRefreshRequest
  ): Promise<{
    response: serviceResponses.AutonomousDatabaseManualRefreshResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const autonomousDatabaseManualRefreshResponse = await this.client.autonomousDatabaseManualRefresh(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      autonomousDatabaseManualRefreshResponse.opcWorkRequestId
    );
    return {
      response: autonomousDatabaseManualRefreshResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forChangeAutonomousContainerDatabaseCompartment
   *
   * @param request the request to send
   * @return response returns ChangeAutonomousContainerDatabaseCompartmentResponse, GetWorkRequestResponse tuple
   */
  public async forChangeAutonomousContainerDatabaseCompartment(
    request: serviceRequests.ChangeAutonomousContainerDatabaseCompartmentRequest
  ): Promise<{
    response: serviceResponses.ChangeAutonomousContainerDatabaseCompartmentResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const changeAutonomousContainerDatabaseCompartmentResponse = await this.client.changeAutonomousContainerDatabaseCompartment(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      changeAutonomousContainerDatabaseCompartmentResponse.opcWorkRequestId
    );
    return {
      response: changeAutonomousContainerDatabaseCompartmentResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forChangeAutonomousDatabaseCompartment
   *
   * @param request the request to send
   * @return response returns ChangeAutonomousDatabaseCompartmentResponse, GetWorkRequestResponse tuple
   */
  public async forChangeAutonomousDatabaseCompartment(
    request: serviceRequests.ChangeAutonomousDatabaseCompartmentRequest
  ): Promise<{
    response: serviceResponses.ChangeAutonomousDatabaseCompartmentResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const changeAutonomousDatabaseCompartmentResponse = await this.client.changeAutonomousDatabaseCompartment(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      changeAutonomousDatabaseCompartmentResponse.opcWorkRequestId
    );
    return {
      response: changeAutonomousDatabaseCompartmentResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forChangeAutonomousExadataInfrastructureCompartment
   *
   * @param request the request to send
   * @return response returns ChangeAutonomousExadataInfrastructureCompartmentResponse, GetWorkRequestResponse tuple
   */
  public async forChangeAutonomousExadataInfrastructureCompartment(
    request: serviceRequests.ChangeAutonomousExadataInfrastructureCompartmentRequest
  ): Promise<{
    response: serviceResponses.ChangeAutonomousExadataInfrastructureCompartmentResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const changeAutonomousExadataInfrastructureCompartmentResponse = await this.client.changeAutonomousExadataInfrastructureCompartment(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      changeAutonomousExadataInfrastructureCompartmentResponse.opcWorkRequestId
    );
    return {
      response: changeAutonomousExadataInfrastructureCompartmentResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forChangeAutonomousVmClusterCompartment
   *
   * @param request the request to send
   * @return response returns ChangeAutonomousVmClusterCompartmentResponse, GetWorkRequestResponse tuple
   */
  public async forChangeAutonomousVmClusterCompartment(
    request: serviceRequests.ChangeAutonomousVmClusterCompartmentRequest
  ): Promise<{
    response: serviceResponses.ChangeAutonomousVmClusterCompartmentResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const changeAutonomousVmClusterCompartmentResponse = await this.client.changeAutonomousVmClusterCompartment(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      changeAutonomousVmClusterCompartmentResponse.opcWorkRequestId
    );
    return {
      response: changeAutonomousVmClusterCompartmentResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forChangeBackupDestinationCompartment
   *
   * @param request the request to send
   * @return response returns ChangeBackupDestinationCompartmentResponse, GetWorkRequestResponse tuple
   */
  public async forChangeBackupDestinationCompartment(
    request: serviceRequests.ChangeBackupDestinationCompartmentRequest
  ): Promise<{
    response: serviceResponses.ChangeBackupDestinationCompartmentResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const changeBackupDestinationCompartmentResponse = await this.client.changeBackupDestinationCompartment(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      changeBackupDestinationCompartmentResponse.opcWorkRequestId
    );
    return {
      response: changeBackupDestinationCompartmentResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forChangeCloudAutonomousVmClusterCompartment
   *
   * @param request the request to send
   * @return response returns ChangeCloudAutonomousVmClusterCompartmentResponse, GetWorkRequestResponse tuple
   */
  public async forChangeCloudAutonomousVmClusterCompartment(
    request: serviceRequests.ChangeCloudAutonomousVmClusterCompartmentRequest
  ): Promise<{
    response: serviceResponses.ChangeCloudAutonomousVmClusterCompartmentResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const changeCloudAutonomousVmClusterCompartmentResponse = await this.client.changeCloudAutonomousVmClusterCompartment(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      changeCloudAutonomousVmClusterCompartmentResponse.opcWorkRequestId
    );
    return {
      response: changeCloudAutonomousVmClusterCompartmentResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forChangeCloudExadataInfrastructureCompartment
   *
   * @param request the request to send
   * @return response returns ChangeCloudExadataInfrastructureCompartmentResponse, GetWorkRequestResponse tuple
   */
  public async forChangeCloudExadataInfrastructureCompartment(
    request: serviceRequests.ChangeCloudExadataInfrastructureCompartmentRequest
  ): Promise<{
    response: serviceResponses.ChangeCloudExadataInfrastructureCompartmentResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const changeCloudExadataInfrastructureCompartmentResponse = await this.client.changeCloudExadataInfrastructureCompartment(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      changeCloudExadataInfrastructureCompartmentResponse.opcWorkRequestId
    );
    return {
      response: changeCloudExadataInfrastructureCompartmentResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forChangeCloudVmClusterCompartment
   *
   * @param request the request to send
   * @return response returns ChangeCloudVmClusterCompartmentResponse, GetWorkRequestResponse tuple
   */
  public async forChangeCloudVmClusterCompartment(
    request: serviceRequests.ChangeCloudVmClusterCompartmentRequest
  ): Promise<{
    response: serviceResponses.ChangeCloudVmClusterCompartmentResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const changeCloudVmClusterCompartmentResponse = await this.client.changeCloudVmClusterCompartment(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      changeCloudVmClusterCompartmentResponse.opcWorkRequestId
    );
    return {
      response: changeCloudVmClusterCompartmentResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forChangeDatabaseSoftwareImageCompartment
   *
   * @param request the request to send
   * @return response returns ChangeDatabaseSoftwareImageCompartmentResponse, GetWorkRequestResponse tuple
   */
  public async forChangeDatabaseSoftwareImageCompartment(
    request: serviceRequests.ChangeDatabaseSoftwareImageCompartmentRequest
  ): Promise<{
    response: serviceResponses.ChangeDatabaseSoftwareImageCompartmentResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const changeDatabaseSoftwareImageCompartmentResponse = await this.client.changeDatabaseSoftwareImageCompartment(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      changeDatabaseSoftwareImageCompartmentResponse.opcWorkRequestId
    );
    return {
      response: changeDatabaseSoftwareImageCompartmentResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forChangeDbSystemCompartment
   *
   * @param request the request to send
   * @return response returns ChangeDbSystemCompartmentResponse, GetWorkRequestResponse tuple
   */
  public async forChangeDbSystemCompartment(
    request: serviceRequests.ChangeDbSystemCompartmentRequest
  ): Promise<{
    response: serviceResponses.ChangeDbSystemCompartmentResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const changeDbSystemCompartmentResponse = await this.client.changeDbSystemCompartment(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      changeDbSystemCompartmentResponse.opcWorkRequestId
    );
    return {
      response: changeDbSystemCompartmentResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forChangeExadataInfrastructureCompartment
   *
   * @param request the request to send
   * @return response returns ChangeExadataInfrastructureCompartmentResponse, GetWorkRequestResponse tuple
   */
  public async forChangeExadataInfrastructureCompartment(
    request: serviceRequests.ChangeExadataInfrastructureCompartmentRequest
  ): Promise<{
    response: serviceResponses.ChangeExadataInfrastructureCompartmentResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const changeExadataInfrastructureCompartmentResponse = await this.client.changeExadataInfrastructureCompartment(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      changeExadataInfrastructureCompartmentResponse.opcWorkRequestId
    );
    return {
      response: changeExadataInfrastructureCompartmentResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forChangeExternalContainerDatabaseCompartment
   *
   * @param request the request to send
   * @return response returns ChangeExternalContainerDatabaseCompartmentResponse, GetWorkRequestResponse tuple
   */
  public async forChangeExternalContainerDatabaseCompartment(
    request: serviceRequests.ChangeExternalContainerDatabaseCompartmentRequest
  ): Promise<{
    response: serviceResponses.ChangeExternalContainerDatabaseCompartmentResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const changeExternalContainerDatabaseCompartmentResponse = await this.client.changeExternalContainerDatabaseCompartment(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      changeExternalContainerDatabaseCompartmentResponse.opcWorkRequestId
    );
    return {
      response: changeExternalContainerDatabaseCompartmentResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forChangeExternalNonContainerDatabaseCompartment
   *
   * @param request the request to send
   * @return response returns ChangeExternalNonContainerDatabaseCompartmentResponse, GetWorkRequestResponse tuple
   */
  public async forChangeExternalNonContainerDatabaseCompartment(
    request: serviceRequests.ChangeExternalNonContainerDatabaseCompartmentRequest
  ): Promise<{
    response: serviceResponses.ChangeExternalNonContainerDatabaseCompartmentResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const changeExternalNonContainerDatabaseCompartmentResponse = await this.client.changeExternalNonContainerDatabaseCompartment(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      changeExternalNonContainerDatabaseCompartmentResponse.opcWorkRequestId
    );
    return {
      response: changeExternalNonContainerDatabaseCompartmentResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forChangeExternalPluggableDatabaseCompartment
   *
   * @param request the request to send
   * @return response returns ChangeExternalPluggableDatabaseCompartmentResponse, GetWorkRequestResponse tuple
   */
  public async forChangeExternalPluggableDatabaseCompartment(
    request: serviceRequests.ChangeExternalPluggableDatabaseCompartmentRequest
  ): Promise<{
    response: serviceResponses.ChangeExternalPluggableDatabaseCompartmentResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const changeExternalPluggableDatabaseCompartmentResponse = await this.client.changeExternalPluggableDatabaseCompartment(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      changeExternalPluggableDatabaseCompartmentResponse.opcWorkRequestId
    );
    return {
      response: changeExternalPluggableDatabaseCompartmentResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forChangeKeyStoreCompartment
   *
   * @param request the request to send
   * @return response returns ChangeKeyStoreCompartmentResponse, GetWorkRequestResponse tuple
   */
  public async forChangeKeyStoreCompartment(
    request: serviceRequests.ChangeKeyStoreCompartmentRequest
  ): Promise<{
    response: serviceResponses.ChangeKeyStoreCompartmentResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const changeKeyStoreCompartmentResponse = await this.client.changeKeyStoreCompartment(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      changeKeyStoreCompartmentResponse.opcWorkRequestId
    );
    return {
      response: changeKeyStoreCompartmentResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forChangeVmClusterCompartment
   *
   * @param request the request to send
   * @return response returns ChangeVmClusterCompartmentResponse, GetWorkRequestResponse tuple
   */
  public async forChangeVmClusterCompartment(
    request: serviceRequests.ChangeVmClusterCompartmentRequest
  ): Promise<{
    response: serviceResponses.ChangeVmClusterCompartmentResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const changeVmClusterCompartmentResponse = await this.client.changeVmClusterCompartment(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      changeVmClusterCompartmentResponse.opcWorkRequestId
    );
    return {
      response: changeVmClusterCompartmentResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forCheckExternalDatabaseConnectorConnectionStatus
   *
   * @param request the request to send
   * @return response returns CheckExternalDatabaseConnectorConnectionStatusResponse, GetWorkRequestResponse tuple
   */
  public async forCheckExternalDatabaseConnectorConnectionStatus(
    request: serviceRequests.CheckExternalDatabaseConnectorConnectionStatusRequest
  ): Promise<{
    response: serviceResponses.CheckExternalDatabaseConnectorConnectionStatusResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const checkExternalDatabaseConnectorConnectionStatusResponse = await this.client.checkExternalDatabaseConnectorConnectionStatus(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      checkExternalDatabaseConnectorConnectionStatusResponse.opcWorkRequestId
    );
    return {
      response: checkExternalDatabaseConnectorConnectionStatusResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forCompleteExternalBackupJob
   *
   * @param request the request to send
   * @return response returns CompleteExternalBackupJobResponse, GetWorkRequestResponse tuple
   */
  public async forCompleteExternalBackupJob(
    request: serviceRequests.CompleteExternalBackupJobRequest
  ): Promise<{
    response: serviceResponses.CompleteExternalBackupJobResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const completeExternalBackupJobResponse = await this.client.completeExternalBackupJob(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      completeExternalBackupJobResponse.opcWorkRequestId
    );
    return {
      response: completeExternalBackupJobResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forConfigureAutonomousDatabaseVaultKey
   *
   * @param request the request to send
   * @return response returns ConfigureAutonomousDatabaseVaultKeyResponse, GetWorkRequestResponse tuple
   */
  public async forConfigureAutonomousDatabaseVaultKey(
    request: serviceRequests.ConfigureAutonomousDatabaseVaultKeyRequest
  ): Promise<{
    response: serviceResponses.ConfigureAutonomousDatabaseVaultKeyResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const configureAutonomousDatabaseVaultKeyResponse = await this.client.configureAutonomousDatabaseVaultKey(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      configureAutonomousDatabaseVaultKeyResponse.opcWorkRequestId
    );
    return {
      response: configureAutonomousDatabaseVaultKeyResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forConvertToPdb
   *
   * @param request the request to send
   * @return response returns ConvertToPdbResponse, GetWorkRequestResponse tuple
   */
  public async forConvertToPdb(
    request: serviceRequests.ConvertToPdbRequest
  ): Promise<{
    response: serviceResponses.ConvertToPdbResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const convertToPdbResponse = await this.client.convertToPdb(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      convertToPdbResponse.opcWorkRequestId
    );
    return { response: convertToPdbResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forCreateAutonomousContainerDatabase
   *
   * @param request the request to send
   * @return response returns CreateAutonomousContainerDatabaseResponse, GetWorkRequestResponse tuple
   */
  public async forCreateAutonomousContainerDatabase(
    request: serviceRequests.CreateAutonomousContainerDatabaseRequest
  ): Promise<{
    response: serviceResponses.CreateAutonomousContainerDatabaseResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const createAutonomousContainerDatabaseResponse = await this.client.createAutonomousContainerDatabase(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      createAutonomousContainerDatabaseResponse.opcWorkRequestId
    );
    return {
      response: createAutonomousContainerDatabaseResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forCreateAutonomousDatabase
   *
   * @param request the request to send
   * @return response returns CreateAutonomousDatabaseResponse, GetWorkRequestResponse tuple
   */
  public async forCreateAutonomousDatabase(
    request: serviceRequests.CreateAutonomousDatabaseRequest
  ): Promise<{
    response: serviceResponses.CreateAutonomousDatabaseResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const createAutonomousDatabaseResponse = await this.client.createAutonomousDatabase(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      createAutonomousDatabaseResponse.opcWorkRequestId
    );
    return {
      response: createAutonomousDatabaseResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forCreateAutonomousDatabaseBackup
   *
   * @param request the request to send
   * @return response returns CreateAutonomousDatabaseBackupResponse, GetWorkRequestResponse tuple
   */
  public async forCreateAutonomousDatabaseBackup(
    request: serviceRequests.CreateAutonomousDatabaseBackupRequest
  ): Promise<{
    response: serviceResponses.CreateAutonomousDatabaseBackupResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const createAutonomousDatabaseBackupResponse = await this.client.createAutonomousDatabaseBackup(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      createAutonomousDatabaseBackupResponse.opcWorkRequestId
    );
    return {
      response: createAutonomousDatabaseBackupResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forCreateAutonomousVmCluster
   *
   * @param request the request to send
   * @return response returns CreateAutonomousVmClusterResponse, GetWorkRequestResponse tuple
   */
  public async forCreateAutonomousVmCluster(
    request: serviceRequests.CreateAutonomousVmClusterRequest
  ): Promise<{
    response: serviceResponses.CreateAutonomousVmClusterResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const createAutonomousVmClusterResponse = await this.client.createAutonomousVmCluster(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      createAutonomousVmClusterResponse.opcWorkRequestId
    );
    return {
      response: createAutonomousVmClusterResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forCreateBackup
   *
   * @param request the request to send
   * @return response returns CreateBackupResponse, GetWorkRequestResponse tuple
   */
  public async forCreateBackup(
    request: serviceRequests.CreateBackupRequest
  ): Promise<{
    response: serviceResponses.CreateBackupResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const createBackupResponse = await this.client.createBackup(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      createBackupResponse.opcWorkRequestId
    );
    return { response: createBackupResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forCreateCloudAutonomousVmCluster
   *
   * @param request the request to send
   * @return response returns CreateCloudAutonomousVmClusterResponse, GetWorkRequestResponse tuple
   */
  public async forCreateCloudAutonomousVmCluster(
    request: serviceRequests.CreateCloudAutonomousVmClusterRequest
  ): Promise<{
    response: serviceResponses.CreateCloudAutonomousVmClusterResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const createCloudAutonomousVmClusterResponse = await this.client.createCloudAutonomousVmCluster(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      createCloudAutonomousVmClusterResponse.opcWorkRequestId
    );
    return {
      response: createCloudAutonomousVmClusterResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forCreateCloudExadataInfrastructure
   *
   * @param request the request to send
   * @return response returns CreateCloudExadataInfrastructureResponse, GetWorkRequestResponse tuple
   */
  public async forCreateCloudExadataInfrastructure(
    request: serviceRequests.CreateCloudExadataInfrastructureRequest
  ): Promise<{
    response: serviceResponses.CreateCloudExadataInfrastructureResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const createCloudExadataInfrastructureResponse = await this.client.createCloudExadataInfrastructure(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      createCloudExadataInfrastructureResponse.opcWorkRequestId
    );
    return {
      response: createCloudExadataInfrastructureResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forCreateCloudVmCluster
   *
   * @param request the request to send
   * @return response returns CreateCloudVmClusterResponse, GetWorkRequestResponse tuple
   */
  public async forCreateCloudVmCluster(
    request: serviceRequests.CreateCloudVmClusterRequest
  ): Promise<{
    response: serviceResponses.CreateCloudVmClusterResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const createCloudVmClusterResponse = await this.client.createCloudVmCluster(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      createCloudVmClusterResponse.opcWorkRequestId
    );
    return { response: createCloudVmClusterResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forCreateDataGuardAssociation
   *
   * @param request the request to send
   * @return response returns CreateDataGuardAssociationResponse, GetWorkRequestResponse tuple
   */
  public async forCreateDataGuardAssociation(
    request: serviceRequests.CreateDataGuardAssociationRequest
  ): Promise<{
    response: serviceResponses.CreateDataGuardAssociationResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const createDataGuardAssociationResponse = await this.client.createDataGuardAssociation(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      createDataGuardAssociationResponse.opcWorkRequestId
    );
    return {
      response: createDataGuardAssociationResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forCreateDatabase
   *
   * @param request the request to send
   * @return response returns CreateDatabaseResponse, GetWorkRequestResponse tuple
   */
  public async forCreateDatabase(
    request: serviceRequests.CreateDatabaseRequest
  ): Promise<{
    response: serviceResponses.CreateDatabaseResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const createDatabaseResponse = await this.client.createDatabase(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      createDatabaseResponse.opcWorkRequestId
    );
    return { response: createDatabaseResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forCreateDatabaseSoftwareImage
   *
   * @param request the request to send
   * @return response returns CreateDatabaseSoftwareImageResponse, GetWorkRequestResponse tuple
   */
  public async forCreateDatabaseSoftwareImage(
    request: serviceRequests.CreateDatabaseSoftwareImageRequest
  ): Promise<{
    response: serviceResponses.CreateDatabaseSoftwareImageResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const createDatabaseSoftwareImageResponse = await this.client.createDatabaseSoftwareImage(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      createDatabaseSoftwareImageResponse.opcWorkRequestId
    );
    return {
      response: createDatabaseSoftwareImageResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forCreateDbHome
   *
   * @param request the request to send
   * @return response returns CreateDbHomeResponse, GetWorkRequestResponse tuple
   */
  public async forCreateDbHome(
    request: serviceRequests.CreateDbHomeRequest
  ): Promise<{
    response: serviceResponses.CreateDbHomeResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const createDbHomeResponse = await this.client.createDbHome(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      createDbHomeResponse.opcWorkRequestId
    );
    return { response: createDbHomeResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forCreateExadataInfrastructure
   *
   * @param request the request to send
   * @return response returns CreateExadataInfrastructureResponse, GetWorkRequestResponse tuple
   */
  public async forCreateExadataInfrastructure(
    request: serviceRequests.CreateExadataInfrastructureRequest
  ): Promise<{
    response: serviceResponses.CreateExadataInfrastructureResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const createExadataInfrastructureResponse = await this.client.createExadataInfrastructure(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      createExadataInfrastructureResponse.opcWorkRequestId
    );
    return {
      response: createExadataInfrastructureResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forCreateExternalBackupJob
   *
   * @param request the request to send
   * @return response returns CreateExternalBackupJobResponse, GetWorkRequestResponse tuple
   */
  public async forCreateExternalBackupJob(
    request: serviceRequests.CreateExternalBackupJobRequest
  ): Promise<{
    response: serviceResponses.CreateExternalBackupJobResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const createExternalBackupJobResponse = await this.client.createExternalBackupJob(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      createExternalBackupJobResponse.opcWorkRequestId
    );
    return {
      response: createExternalBackupJobResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forCreateExternalContainerDatabase
   *
   * @param request the request to send
   * @return response returns CreateExternalContainerDatabaseResponse, GetWorkRequestResponse tuple
   */
  public async forCreateExternalContainerDatabase(
    request: serviceRequests.CreateExternalContainerDatabaseRequest
  ): Promise<{
    response: serviceResponses.CreateExternalContainerDatabaseResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const createExternalContainerDatabaseResponse = await this.client.createExternalContainerDatabase(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      createExternalContainerDatabaseResponse.opcWorkRequestId
    );
    return {
      response: createExternalContainerDatabaseResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forCreateExternalDatabaseConnector
   *
   * @param request the request to send
   * @return response returns CreateExternalDatabaseConnectorResponse, GetWorkRequestResponse tuple
   */
  public async forCreateExternalDatabaseConnector(
    request: serviceRequests.CreateExternalDatabaseConnectorRequest
  ): Promise<{
    response: serviceResponses.CreateExternalDatabaseConnectorResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const createExternalDatabaseConnectorResponse = await this.client.createExternalDatabaseConnector(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      createExternalDatabaseConnectorResponse.opcWorkRequestId
    );
    return {
      response: createExternalDatabaseConnectorResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forCreateExternalNonContainerDatabase
   *
   * @param request the request to send
   * @return response returns CreateExternalNonContainerDatabaseResponse, GetWorkRequestResponse tuple
   */
  public async forCreateExternalNonContainerDatabase(
    request: serviceRequests.CreateExternalNonContainerDatabaseRequest
  ): Promise<{
    response: serviceResponses.CreateExternalNonContainerDatabaseResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const createExternalNonContainerDatabaseResponse = await this.client.createExternalNonContainerDatabase(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      createExternalNonContainerDatabaseResponse.opcWorkRequestId
    );
    return {
      response: createExternalNonContainerDatabaseResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forCreateExternalPluggableDatabase
   *
   * @param request the request to send
   * @return response returns CreateExternalPluggableDatabaseResponse, GetWorkRequestResponse tuple
   */
  public async forCreateExternalPluggableDatabase(
    request: serviceRequests.CreateExternalPluggableDatabaseRequest
  ): Promise<{
    response: serviceResponses.CreateExternalPluggableDatabaseResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const createExternalPluggableDatabaseResponse = await this.client.createExternalPluggableDatabase(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      createExternalPluggableDatabaseResponse.opcWorkRequestId
    );
    return {
      response: createExternalPluggableDatabaseResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forCreatePluggableDatabase
   *
   * @param request the request to send
   * @return response returns CreatePluggableDatabaseResponse, GetWorkRequestResponse tuple
   */
  public async forCreatePluggableDatabase(
    request: serviceRequests.CreatePluggableDatabaseRequest
  ): Promise<{
    response: serviceResponses.CreatePluggableDatabaseResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const createPluggableDatabaseResponse = await this.client.createPluggableDatabase(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      createPluggableDatabaseResponse.opcWorkRequestId
    );
    return {
      response: createPluggableDatabaseResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forCreateVmCluster
   *
   * @param request the request to send
   * @return response returns CreateVmClusterResponse, GetWorkRequestResponse tuple
   */
  public async forCreateVmCluster(
    request: serviceRequests.CreateVmClusterRequest
  ): Promise<{
    response: serviceResponses.CreateVmClusterResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const createVmClusterResponse = await this.client.createVmCluster(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      createVmClusterResponse.opcWorkRequestId
    );
    return { response: createVmClusterResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forCreateVmClusterNetwork
   *
   * @param request the request to send
   * @return response returns CreateVmClusterNetworkResponse, GetWorkRequestResponse tuple
   */
  public async forCreateVmClusterNetwork(
    request: serviceRequests.CreateVmClusterNetworkRequest
  ): Promise<{
    response: serviceResponses.CreateVmClusterNetworkResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const createVmClusterNetworkResponse = await this.client.createVmClusterNetwork(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      createVmClusterNetworkResponse.opcWorkRequestId
    );
    return {
      response: createVmClusterNetworkResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forDbNodeAction
   *
   * @param request the request to send
   * @return response returns DbNodeActionResponse, GetWorkRequestResponse tuple
   */
  public async forDbNodeAction(
    request: serviceRequests.DbNodeActionRequest
  ): Promise<{
    response: serviceResponses.DbNodeActionResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const dbNodeActionResponse = await this.client.dbNodeAction(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      dbNodeActionResponse.opcWorkRequestId
    );
    return { response: dbNodeActionResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forDeleteAutonomousDatabase
   *
   * @param request the request to send
   * @return response returns DeleteAutonomousDatabaseResponse, GetWorkRequestResponse tuple
   */
  public async forDeleteAutonomousDatabase(
    request: serviceRequests.DeleteAutonomousDatabaseRequest
  ): Promise<{
    response: serviceResponses.DeleteAutonomousDatabaseResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const deleteAutonomousDatabaseResponse = await this.client.deleteAutonomousDatabase(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      deleteAutonomousDatabaseResponse.opcWorkRequestId
    );
    return {
      response: deleteAutonomousDatabaseResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forDeleteAutonomousVmCluster
   *
   * @param request the request to send
   * @return response returns DeleteAutonomousVmClusterResponse, GetWorkRequestResponse tuple
   */
  public async forDeleteAutonomousVmCluster(
    request: serviceRequests.DeleteAutonomousVmClusterRequest
  ): Promise<{
    response: serviceResponses.DeleteAutonomousVmClusterResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const deleteAutonomousVmClusterResponse = await this.client.deleteAutonomousVmCluster(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      deleteAutonomousVmClusterResponse.opcWorkRequestId
    );
    return {
      response: deleteAutonomousVmClusterResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forDeleteBackup
   *
   * @param request the request to send
   * @return response returns DeleteBackupResponse, GetWorkRequestResponse tuple
   */
  public async forDeleteBackup(
    request: serviceRequests.DeleteBackupRequest
  ): Promise<{
    response: serviceResponses.DeleteBackupResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const deleteBackupResponse = await this.client.deleteBackup(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      deleteBackupResponse.opcWorkRequestId
    );
    return { response: deleteBackupResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forDeleteCloudAutonomousVmCluster
   *
   * @param request the request to send
   * @return response returns DeleteCloudAutonomousVmClusterResponse, GetWorkRequestResponse tuple
   */
  public async forDeleteCloudAutonomousVmCluster(
    request: serviceRequests.DeleteCloudAutonomousVmClusterRequest
  ): Promise<{
    response: serviceResponses.DeleteCloudAutonomousVmClusterResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const deleteCloudAutonomousVmClusterResponse = await this.client.deleteCloudAutonomousVmCluster(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      deleteCloudAutonomousVmClusterResponse.opcWorkRequestId
    );
    return {
      response: deleteCloudAutonomousVmClusterResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forDeleteCloudExadataInfrastructure
   *
   * @param request the request to send
   * @return response returns DeleteCloudExadataInfrastructureResponse, GetWorkRequestResponse tuple
   */
  public async forDeleteCloudExadataInfrastructure(
    request: serviceRequests.DeleteCloudExadataInfrastructureRequest
  ): Promise<{
    response: serviceResponses.DeleteCloudExadataInfrastructureResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const deleteCloudExadataInfrastructureResponse = await this.client.deleteCloudExadataInfrastructure(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      deleteCloudExadataInfrastructureResponse.opcWorkRequestId
    );
    return {
      response: deleteCloudExadataInfrastructureResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forDeleteCloudVmCluster
   *
   * @param request the request to send
   * @return response returns DeleteCloudVmClusterResponse, GetWorkRequestResponse tuple
   */
  public async forDeleteCloudVmCluster(
    request: serviceRequests.DeleteCloudVmClusterRequest
  ): Promise<{
    response: serviceResponses.DeleteCloudVmClusterResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const deleteCloudVmClusterResponse = await this.client.deleteCloudVmCluster(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      deleteCloudVmClusterResponse.opcWorkRequestId
    );
    return { response: deleteCloudVmClusterResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forDeleteDatabase
   *
   * @param request the request to send
   * @return response returns DeleteDatabaseResponse, GetWorkRequestResponse tuple
   */
  public async forDeleteDatabase(
    request: serviceRequests.DeleteDatabaseRequest
  ): Promise<{
    response: serviceResponses.DeleteDatabaseResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const deleteDatabaseResponse = await this.client.deleteDatabase(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      deleteDatabaseResponse.opcWorkRequestId
    );
    return { response: deleteDatabaseResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forDeleteDatabaseSoftwareImage
   *
   * @param request the request to send
   * @return response returns DeleteDatabaseSoftwareImageResponse, GetWorkRequestResponse tuple
   */
  public async forDeleteDatabaseSoftwareImage(
    request: serviceRequests.DeleteDatabaseSoftwareImageRequest
  ): Promise<{
    response: serviceResponses.DeleteDatabaseSoftwareImageResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const deleteDatabaseSoftwareImageResponse = await this.client.deleteDatabaseSoftwareImage(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      deleteDatabaseSoftwareImageResponse.opcWorkRequestId
    );
    return {
      response: deleteDatabaseSoftwareImageResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forDeleteDbHome
   *
   * @param request the request to send
   * @return response returns DeleteDbHomeResponse, GetWorkRequestResponse tuple
   */
  public async forDeleteDbHome(
    request: serviceRequests.DeleteDbHomeRequest
  ): Promise<{
    response: serviceResponses.DeleteDbHomeResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const deleteDbHomeResponse = await this.client.deleteDbHome(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      deleteDbHomeResponse.opcWorkRequestId
    );
    return { response: deleteDbHomeResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forDeleteExadataInfrastructure
   *
   * @param request the request to send
   * @return response returns DeleteExadataInfrastructureResponse, GetWorkRequestResponse tuple
   */
  public async forDeleteExadataInfrastructure(
    request: serviceRequests.DeleteExadataInfrastructureRequest
  ): Promise<{
    response: serviceResponses.DeleteExadataInfrastructureResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const deleteExadataInfrastructureResponse = await this.client.deleteExadataInfrastructure(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      deleteExadataInfrastructureResponse.opcWorkRequestId
    );
    return {
      response: deleteExadataInfrastructureResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forDeleteExternalContainerDatabase
   *
   * @param request the request to send
   * @return response returns DeleteExternalContainerDatabaseResponse, GetWorkRequestResponse tuple
   */
  public async forDeleteExternalContainerDatabase(
    request: serviceRequests.DeleteExternalContainerDatabaseRequest
  ): Promise<{
    response: serviceResponses.DeleteExternalContainerDatabaseResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const deleteExternalContainerDatabaseResponse = await this.client.deleteExternalContainerDatabase(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      deleteExternalContainerDatabaseResponse.opcWorkRequestId
    );
    return {
      response: deleteExternalContainerDatabaseResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forDeleteExternalDatabaseConnector
   *
   * @param request the request to send
   * @return response returns DeleteExternalDatabaseConnectorResponse, GetWorkRequestResponse tuple
   */
  public async forDeleteExternalDatabaseConnector(
    request: serviceRequests.DeleteExternalDatabaseConnectorRequest
  ): Promise<{
    response: serviceResponses.DeleteExternalDatabaseConnectorResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const deleteExternalDatabaseConnectorResponse = await this.client.deleteExternalDatabaseConnector(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      deleteExternalDatabaseConnectorResponse.opcWorkRequestId
    );
    return {
      response: deleteExternalDatabaseConnectorResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forDeleteExternalNonContainerDatabase
   *
   * @param request the request to send
   * @return response returns DeleteExternalNonContainerDatabaseResponse, GetWorkRequestResponse tuple
   */
  public async forDeleteExternalNonContainerDatabase(
    request: serviceRequests.DeleteExternalNonContainerDatabaseRequest
  ): Promise<{
    response: serviceResponses.DeleteExternalNonContainerDatabaseResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const deleteExternalNonContainerDatabaseResponse = await this.client.deleteExternalNonContainerDatabase(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      deleteExternalNonContainerDatabaseResponse.opcWorkRequestId
    );
    return {
      response: deleteExternalNonContainerDatabaseResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forDeleteExternalPluggableDatabase
   *
   * @param request the request to send
   * @return response returns DeleteExternalPluggableDatabaseResponse, GetWorkRequestResponse tuple
   */
  public async forDeleteExternalPluggableDatabase(
    request: serviceRequests.DeleteExternalPluggableDatabaseRequest
  ): Promise<{
    response: serviceResponses.DeleteExternalPluggableDatabaseResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const deleteExternalPluggableDatabaseResponse = await this.client.deleteExternalPluggableDatabase(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      deleteExternalPluggableDatabaseResponse.opcWorkRequestId
    );
    return {
      response: deleteExternalPluggableDatabaseResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forDeletePluggableDatabase
   *
   * @param request the request to send
   * @return response returns DeletePluggableDatabaseResponse, GetWorkRequestResponse tuple
   */
  public async forDeletePluggableDatabase(
    request: serviceRequests.DeletePluggableDatabaseRequest
  ): Promise<{
    response: serviceResponses.DeletePluggableDatabaseResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const deletePluggableDatabaseResponse = await this.client.deletePluggableDatabase(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      deletePluggableDatabaseResponse.opcWorkRequestId
    );
    return {
      response: deletePluggableDatabaseResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forDeleteVmCluster
   *
   * @param request the request to send
   * @return response returns DeleteVmClusterResponse, GetWorkRequestResponse tuple
   */
  public async forDeleteVmCluster(
    request: serviceRequests.DeleteVmClusterRequest
  ): Promise<{
    response: serviceResponses.DeleteVmClusterResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const deleteVmClusterResponse = await this.client.deleteVmCluster(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      deleteVmClusterResponse.opcWorkRequestId
    );
    return { response: deleteVmClusterResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forDeleteVmClusterNetwork
   *
   * @param request the request to send
   * @return response returns DeleteVmClusterNetworkResponse, GetWorkRequestResponse tuple
   */
  public async forDeleteVmClusterNetwork(
    request: serviceRequests.DeleteVmClusterNetworkRequest
  ): Promise<{
    response: serviceResponses.DeleteVmClusterNetworkResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const deleteVmClusterNetworkResponse = await this.client.deleteVmClusterNetwork(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      deleteVmClusterNetworkResponse.opcWorkRequestId
    );
    return {
      response: deleteVmClusterNetworkResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forDeregisterAutonomousDatabaseDataSafe
   *
   * @param request the request to send
   * @return response returns DeregisterAutonomousDatabaseDataSafeResponse, GetWorkRequestResponse tuple
   */
  public async forDeregisterAutonomousDatabaseDataSafe(
    request: serviceRequests.DeregisterAutonomousDatabaseDataSafeRequest
  ): Promise<{
    response: serviceResponses.DeregisterAutonomousDatabaseDataSafeResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const deregisterAutonomousDatabaseDataSafeResponse = await this.client.deregisterAutonomousDatabaseDataSafe(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      deregisterAutonomousDatabaseDataSafeResponse.opcWorkRequestId
    );
    return {
      response: deregisterAutonomousDatabaseDataSafeResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forDisableAutonomousDatabaseManagement
   *
   * @param request the request to send
   * @return response returns DisableAutonomousDatabaseManagementResponse, GetWorkRequestResponse tuple
   */
  public async forDisableAutonomousDatabaseManagement(
    request: serviceRequests.DisableAutonomousDatabaseManagementRequest
  ): Promise<{
    response: serviceResponses.DisableAutonomousDatabaseManagementResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const disableAutonomousDatabaseManagementResponse = await this.client.disableAutonomousDatabaseManagement(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      disableAutonomousDatabaseManagementResponse.opcWorkRequestId
    );
    return {
      response: disableAutonomousDatabaseManagementResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forDisableAutonomousDatabaseOperationsInsights
   *
   * @param request the request to send
   * @return response returns DisableAutonomousDatabaseOperationsInsightsResponse, GetWorkRequestResponse tuple
   */
  public async forDisableAutonomousDatabaseOperationsInsights(
    request: serviceRequests.DisableAutonomousDatabaseOperationsInsightsRequest
  ): Promise<{
    response: serviceResponses.DisableAutonomousDatabaseOperationsInsightsResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const disableAutonomousDatabaseOperationsInsightsResponse = await this.client.disableAutonomousDatabaseOperationsInsights(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      disableAutonomousDatabaseOperationsInsightsResponse.opcWorkRequestId
    );
    return {
      response: disableAutonomousDatabaseOperationsInsightsResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forDisableDatabaseManagement
   *
   * @param request the request to send
   * @return response returns DisableDatabaseManagementResponse, GetWorkRequestResponse tuple
   */
  public async forDisableDatabaseManagement(
    request: serviceRequests.DisableDatabaseManagementRequest
  ): Promise<{
    response: serviceResponses.DisableDatabaseManagementResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const disableDatabaseManagementResponse = await this.client.disableDatabaseManagement(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      disableDatabaseManagementResponse.opcWorkRequestId
    );
    return {
      response: disableDatabaseManagementResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forDisableExternalContainerDatabaseDatabaseManagement
   *
   * @param request the request to send
   * @return response returns DisableExternalContainerDatabaseDatabaseManagementResponse, GetWorkRequestResponse tuple
   */
  public async forDisableExternalContainerDatabaseDatabaseManagement(
    request: serviceRequests.DisableExternalContainerDatabaseDatabaseManagementRequest
  ): Promise<{
    response: serviceResponses.DisableExternalContainerDatabaseDatabaseManagementResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const disableExternalContainerDatabaseDatabaseManagementResponse = await this.client.disableExternalContainerDatabaseDatabaseManagement(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      disableExternalContainerDatabaseDatabaseManagementResponse.opcWorkRequestId
    );
    return {
      response: disableExternalContainerDatabaseDatabaseManagementResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forDisableExternalContainerDatabaseStackMonitoring
   *
   * @param request the request to send
   * @return response returns DisableExternalContainerDatabaseStackMonitoringResponse, GetWorkRequestResponse tuple
   */
  public async forDisableExternalContainerDatabaseStackMonitoring(
    request: serviceRequests.DisableExternalContainerDatabaseStackMonitoringRequest
  ): Promise<{
    response: serviceResponses.DisableExternalContainerDatabaseStackMonitoringResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const disableExternalContainerDatabaseStackMonitoringResponse = await this.client.disableExternalContainerDatabaseStackMonitoring(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      disableExternalContainerDatabaseStackMonitoringResponse.opcWorkRequestId
    );
    return {
      response: disableExternalContainerDatabaseStackMonitoringResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forDisableExternalNonContainerDatabaseDatabaseManagement
   *
   * @param request the request to send
   * @return response returns DisableExternalNonContainerDatabaseDatabaseManagementResponse, GetWorkRequestResponse tuple
   */
  public async forDisableExternalNonContainerDatabaseDatabaseManagement(
    request: serviceRequests.DisableExternalNonContainerDatabaseDatabaseManagementRequest
  ): Promise<{
    response: serviceResponses.DisableExternalNonContainerDatabaseDatabaseManagementResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const disableExternalNonContainerDatabaseDatabaseManagementResponse = await this.client.disableExternalNonContainerDatabaseDatabaseManagement(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      disableExternalNonContainerDatabaseDatabaseManagementResponse.opcWorkRequestId
    );
    return {
      response: disableExternalNonContainerDatabaseDatabaseManagementResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forDisableExternalNonContainerDatabaseOperationsInsights
   *
   * @param request the request to send
   * @return response returns DisableExternalNonContainerDatabaseOperationsInsightsResponse, GetWorkRequestResponse tuple
   */
  public async forDisableExternalNonContainerDatabaseOperationsInsights(
    request: serviceRequests.DisableExternalNonContainerDatabaseOperationsInsightsRequest
  ): Promise<{
    response: serviceResponses.DisableExternalNonContainerDatabaseOperationsInsightsResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const disableExternalNonContainerDatabaseOperationsInsightsResponse = await this.client.disableExternalNonContainerDatabaseOperationsInsights(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      disableExternalNonContainerDatabaseOperationsInsightsResponse.opcWorkRequestId
    );
    return {
      response: disableExternalNonContainerDatabaseOperationsInsightsResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forDisableExternalNonContainerDatabaseStackMonitoring
   *
   * @param request the request to send
   * @return response returns DisableExternalNonContainerDatabaseStackMonitoringResponse, GetWorkRequestResponse tuple
   */
  public async forDisableExternalNonContainerDatabaseStackMonitoring(
    request: serviceRequests.DisableExternalNonContainerDatabaseStackMonitoringRequest
  ): Promise<{
    response: serviceResponses.DisableExternalNonContainerDatabaseStackMonitoringResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const disableExternalNonContainerDatabaseStackMonitoringResponse = await this.client.disableExternalNonContainerDatabaseStackMonitoring(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      disableExternalNonContainerDatabaseStackMonitoringResponse.opcWorkRequestId
    );
    return {
      response: disableExternalNonContainerDatabaseStackMonitoringResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forDisableExternalPluggableDatabaseDatabaseManagement
   *
   * @param request the request to send
   * @return response returns DisableExternalPluggableDatabaseDatabaseManagementResponse, GetWorkRequestResponse tuple
   */
  public async forDisableExternalPluggableDatabaseDatabaseManagement(
    request: serviceRequests.DisableExternalPluggableDatabaseDatabaseManagementRequest
  ): Promise<{
    response: serviceResponses.DisableExternalPluggableDatabaseDatabaseManagementResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const disableExternalPluggableDatabaseDatabaseManagementResponse = await this.client.disableExternalPluggableDatabaseDatabaseManagement(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      disableExternalPluggableDatabaseDatabaseManagementResponse.opcWorkRequestId
    );
    return {
      response: disableExternalPluggableDatabaseDatabaseManagementResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forDisableExternalPluggableDatabaseOperationsInsights
   *
   * @param request the request to send
   * @return response returns DisableExternalPluggableDatabaseOperationsInsightsResponse, GetWorkRequestResponse tuple
   */
  public async forDisableExternalPluggableDatabaseOperationsInsights(
    request: serviceRequests.DisableExternalPluggableDatabaseOperationsInsightsRequest
  ): Promise<{
    response: serviceResponses.DisableExternalPluggableDatabaseOperationsInsightsResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const disableExternalPluggableDatabaseOperationsInsightsResponse = await this.client.disableExternalPluggableDatabaseOperationsInsights(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      disableExternalPluggableDatabaseOperationsInsightsResponse.opcWorkRequestId
    );
    return {
      response: disableExternalPluggableDatabaseOperationsInsightsResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forDisableExternalPluggableDatabaseStackMonitoring
   *
   * @param request the request to send
   * @return response returns DisableExternalPluggableDatabaseStackMonitoringResponse, GetWorkRequestResponse tuple
   */
  public async forDisableExternalPluggableDatabaseStackMonitoring(
    request: serviceRequests.DisableExternalPluggableDatabaseStackMonitoringRequest
  ): Promise<{
    response: serviceResponses.DisableExternalPluggableDatabaseStackMonitoringResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const disableExternalPluggableDatabaseStackMonitoringResponse = await this.client.disableExternalPluggableDatabaseStackMonitoring(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      disableExternalPluggableDatabaseStackMonitoringResponse.opcWorkRequestId
    );
    return {
      response: disableExternalPluggableDatabaseStackMonitoringResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forEnableAutonomousDatabaseManagement
   *
   * @param request the request to send
   * @return response returns EnableAutonomousDatabaseManagementResponse, GetWorkRequestResponse tuple
   */
  public async forEnableAutonomousDatabaseManagement(
    request: serviceRequests.EnableAutonomousDatabaseManagementRequest
  ): Promise<{
    response: serviceResponses.EnableAutonomousDatabaseManagementResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const enableAutonomousDatabaseManagementResponse = await this.client.enableAutonomousDatabaseManagement(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      enableAutonomousDatabaseManagementResponse.opcWorkRequestId
    );
    return {
      response: enableAutonomousDatabaseManagementResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forEnableAutonomousDatabaseOperationsInsights
   *
   * @param request the request to send
   * @return response returns EnableAutonomousDatabaseOperationsInsightsResponse, GetWorkRequestResponse tuple
   */
  public async forEnableAutonomousDatabaseOperationsInsights(
    request: serviceRequests.EnableAutonomousDatabaseOperationsInsightsRequest
  ): Promise<{
    response: serviceResponses.EnableAutonomousDatabaseOperationsInsightsResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const enableAutonomousDatabaseOperationsInsightsResponse = await this.client.enableAutonomousDatabaseOperationsInsights(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      enableAutonomousDatabaseOperationsInsightsResponse.opcWorkRequestId
    );
    return {
      response: enableAutonomousDatabaseOperationsInsightsResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forEnableDatabaseManagement
   *
   * @param request the request to send
   * @return response returns EnableDatabaseManagementResponse, GetWorkRequestResponse tuple
   */
  public async forEnableDatabaseManagement(
    request: serviceRequests.EnableDatabaseManagementRequest
  ): Promise<{
    response: serviceResponses.EnableDatabaseManagementResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const enableDatabaseManagementResponse = await this.client.enableDatabaseManagement(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      enableDatabaseManagementResponse.opcWorkRequestId
    );
    return {
      response: enableDatabaseManagementResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forEnableExternalContainerDatabaseDatabaseManagement
   *
   * @param request the request to send
   * @return response returns EnableExternalContainerDatabaseDatabaseManagementResponse, GetWorkRequestResponse tuple
   */
  public async forEnableExternalContainerDatabaseDatabaseManagement(
    request: serviceRequests.EnableExternalContainerDatabaseDatabaseManagementRequest
  ): Promise<{
    response: serviceResponses.EnableExternalContainerDatabaseDatabaseManagementResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const enableExternalContainerDatabaseDatabaseManagementResponse = await this.client.enableExternalContainerDatabaseDatabaseManagement(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      enableExternalContainerDatabaseDatabaseManagementResponse.opcWorkRequestId
    );
    return {
      response: enableExternalContainerDatabaseDatabaseManagementResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forEnableExternalContainerDatabaseStackMonitoring
   *
   * @param request the request to send
   * @return response returns EnableExternalContainerDatabaseStackMonitoringResponse, GetWorkRequestResponse tuple
   */
  public async forEnableExternalContainerDatabaseStackMonitoring(
    request: serviceRequests.EnableExternalContainerDatabaseStackMonitoringRequest
  ): Promise<{
    response: serviceResponses.EnableExternalContainerDatabaseStackMonitoringResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const enableExternalContainerDatabaseStackMonitoringResponse = await this.client.enableExternalContainerDatabaseStackMonitoring(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      enableExternalContainerDatabaseStackMonitoringResponse.opcWorkRequestId
    );
    return {
      response: enableExternalContainerDatabaseStackMonitoringResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forEnableExternalNonContainerDatabaseDatabaseManagement
   *
   * @param request the request to send
   * @return response returns EnableExternalNonContainerDatabaseDatabaseManagementResponse, GetWorkRequestResponse tuple
   */
  public async forEnableExternalNonContainerDatabaseDatabaseManagement(
    request: serviceRequests.EnableExternalNonContainerDatabaseDatabaseManagementRequest
  ): Promise<{
    response: serviceResponses.EnableExternalNonContainerDatabaseDatabaseManagementResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const enableExternalNonContainerDatabaseDatabaseManagementResponse = await this.client.enableExternalNonContainerDatabaseDatabaseManagement(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      enableExternalNonContainerDatabaseDatabaseManagementResponse.opcWorkRequestId
    );
    return {
      response: enableExternalNonContainerDatabaseDatabaseManagementResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forEnableExternalNonContainerDatabaseOperationsInsights
   *
   * @param request the request to send
   * @return response returns EnableExternalNonContainerDatabaseOperationsInsightsResponse, GetWorkRequestResponse tuple
   */
  public async forEnableExternalNonContainerDatabaseOperationsInsights(
    request: serviceRequests.EnableExternalNonContainerDatabaseOperationsInsightsRequest
  ): Promise<{
    response: serviceResponses.EnableExternalNonContainerDatabaseOperationsInsightsResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const enableExternalNonContainerDatabaseOperationsInsightsResponse = await this.client.enableExternalNonContainerDatabaseOperationsInsights(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      enableExternalNonContainerDatabaseOperationsInsightsResponse.opcWorkRequestId
    );
    return {
      response: enableExternalNonContainerDatabaseOperationsInsightsResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forEnableExternalNonContainerDatabaseStackMonitoring
   *
   * @param request the request to send
   * @return response returns EnableExternalNonContainerDatabaseStackMonitoringResponse, GetWorkRequestResponse tuple
   */
  public async forEnableExternalNonContainerDatabaseStackMonitoring(
    request: serviceRequests.EnableExternalNonContainerDatabaseStackMonitoringRequest
  ): Promise<{
    response: serviceResponses.EnableExternalNonContainerDatabaseStackMonitoringResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const enableExternalNonContainerDatabaseStackMonitoringResponse = await this.client.enableExternalNonContainerDatabaseStackMonitoring(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      enableExternalNonContainerDatabaseStackMonitoringResponse.opcWorkRequestId
    );
    return {
      response: enableExternalNonContainerDatabaseStackMonitoringResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forEnableExternalPluggableDatabaseDatabaseManagement
   *
   * @param request the request to send
   * @return response returns EnableExternalPluggableDatabaseDatabaseManagementResponse, GetWorkRequestResponse tuple
   */
  public async forEnableExternalPluggableDatabaseDatabaseManagement(
    request: serviceRequests.EnableExternalPluggableDatabaseDatabaseManagementRequest
  ): Promise<{
    response: serviceResponses.EnableExternalPluggableDatabaseDatabaseManagementResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const enableExternalPluggableDatabaseDatabaseManagementResponse = await this.client.enableExternalPluggableDatabaseDatabaseManagement(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      enableExternalPluggableDatabaseDatabaseManagementResponse.opcWorkRequestId
    );
    return {
      response: enableExternalPluggableDatabaseDatabaseManagementResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forEnableExternalPluggableDatabaseOperationsInsights
   *
   * @param request the request to send
   * @return response returns EnableExternalPluggableDatabaseOperationsInsightsResponse, GetWorkRequestResponse tuple
   */
  public async forEnableExternalPluggableDatabaseOperationsInsights(
    request: serviceRequests.EnableExternalPluggableDatabaseOperationsInsightsRequest
  ): Promise<{
    response: serviceResponses.EnableExternalPluggableDatabaseOperationsInsightsResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const enableExternalPluggableDatabaseOperationsInsightsResponse = await this.client.enableExternalPluggableDatabaseOperationsInsights(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      enableExternalPluggableDatabaseOperationsInsightsResponse.opcWorkRequestId
    );
    return {
      response: enableExternalPluggableDatabaseOperationsInsightsResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forEnableExternalPluggableDatabaseStackMonitoring
   *
   * @param request the request to send
   * @return response returns EnableExternalPluggableDatabaseStackMonitoringResponse, GetWorkRequestResponse tuple
   */
  public async forEnableExternalPluggableDatabaseStackMonitoring(
    request: serviceRequests.EnableExternalPluggableDatabaseStackMonitoringRequest
  ): Promise<{
    response: serviceResponses.EnableExternalPluggableDatabaseStackMonitoringResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const enableExternalPluggableDatabaseStackMonitoringResponse = await this.client.enableExternalPluggableDatabaseStackMonitoring(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      enableExternalPluggableDatabaseStackMonitoringResponse.opcWorkRequestId
    );
    return {
      response: enableExternalPluggableDatabaseStackMonitoringResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forFailOverAutonomousDatabase
   *
   * @param request the request to send
   * @return response returns FailOverAutonomousDatabaseResponse, GetWorkRequestResponse tuple
   */
  public async forFailOverAutonomousDatabase(
    request: serviceRequests.FailOverAutonomousDatabaseRequest
  ): Promise<{
    response: serviceResponses.FailOverAutonomousDatabaseResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const failOverAutonomousDatabaseResponse = await this.client.failOverAutonomousDatabase(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      failOverAutonomousDatabaseResponse.opcWorkRequestId
    );
    return {
      response: failOverAutonomousDatabaseResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forFailoverAutonomousContainerDatabaseDataguardAssociation
   *
   * @param request the request to send
   * @return response returns FailoverAutonomousContainerDatabaseDataguardAssociationResponse, GetWorkRequestResponse tuple
   */
  public async forFailoverAutonomousContainerDatabaseDataguardAssociation(
    request: serviceRequests.FailoverAutonomousContainerDatabaseDataguardAssociationRequest
  ): Promise<{
    response: serviceResponses.FailoverAutonomousContainerDatabaseDataguardAssociationResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const failoverAutonomousContainerDatabaseDataguardAssociationResponse = await this.client.failoverAutonomousContainerDatabaseDataguardAssociation(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      failoverAutonomousContainerDatabaseDataguardAssociationResponse.opcWorkRequestId
    );
    return {
      response: failoverAutonomousContainerDatabaseDataguardAssociationResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forFailoverDataGuardAssociation
   *
   * @param request the request to send
   * @return response returns FailoverDataGuardAssociationResponse, GetWorkRequestResponse tuple
   */
  public async forFailoverDataGuardAssociation(
    request: serviceRequests.FailoverDataGuardAssociationRequest
  ): Promise<{
    response: serviceResponses.FailoverDataGuardAssociationResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const failoverDataGuardAssociationResponse = await this.client.failoverDataGuardAssociation(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      failoverDataGuardAssociationResponse.opcWorkRequestId
    );
    return {
      response: failoverDataGuardAssociationResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forAutonomousContainerDatabase till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetAutonomousContainerDatabaseResponse | null (null in case of 404 response)
   */
  public async forAutonomousContainerDatabase(
    request: serviceRequests.GetAutonomousContainerDatabaseRequest,
    ...targetStates: models.AutonomousContainerDatabase.LifecycleState[]
  ): Promise<serviceResponses.GetAutonomousContainerDatabaseResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getAutonomousContainerDatabase(request),
      response => targetStates.includes(response.autonomousContainerDatabase.lifecycleState!),
      targetStates.includes(models.AutonomousContainerDatabase.LifecycleState.Terminated)
    );
  }

  /**
   * Waits forAutonomousContainerDatabaseDataguardAssociation till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetAutonomousContainerDatabaseDataguardAssociationResponse | null (null in case of 404 response)
   */
  public async forAutonomousContainerDatabaseDataguardAssociation(
    request: serviceRequests.GetAutonomousContainerDatabaseDataguardAssociationRequest,
    ...targetStates: models.AutonomousContainerDatabaseDataguardAssociation.LifecycleState[]
  ): Promise<serviceResponses.GetAutonomousContainerDatabaseDataguardAssociationResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getAutonomousContainerDatabaseDataguardAssociation(request),
      response =>
        targetStates.includes(
          response.autonomousContainerDatabaseDataguardAssociation.lifecycleState!
        ),
      targetStates.includes(
        models.AutonomousContainerDatabaseDataguardAssociation.LifecycleState.Terminated
      )
    );
  }

  /**
   * Waits forAutonomousDatabase till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetAutonomousDatabaseResponse | null (null in case of 404 response)
   */
  public async forAutonomousDatabase(
    request: serviceRequests.GetAutonomousDatabaseRequest,
    ...targetStates: models.AutonomousDatabase.LifecycleState[]
  ): Promise<serviceResponses.GetAutonomousDatabaseResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getAutonomousDatabase(request),
      response => targetStates.includes(response.autonomousDatabase.lifecycleState!),
      targetStates.includes(models.AutonomousDatabase.LifecycleState.Terminated)
    );
  }

  /**
   * Waits forAutonomousDatabaseBackup till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetAutonomousDatabaseBackupResponse | null (null in case of 404 response)
   */
  public async forAutonomousDatabaseBackup(
    request: serviceRequests.GetAutonomousDatabaseBackupRequest,
    ...targetStates: models.AutonomousDatabaseBackup.LifecycleState[]
  ): Promise<serviceResponses.GetAutonomousDatabaseBackupResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getAutonomousDatabaseBackup(request),
      response => targetStates.includes(response.autonomousDatabaseBackup.lifecycleState!),
      targetStates.includes(models.AutonomousDatabaseBackup.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forAutonomousDatabaseDataguardAssociation till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetAutonomousDatabaseDataguardAssociationResponse | null (null in case of 404 response)
   */
  public async forAutonomousDatabaseDataguardAssociation(
    request: serviceRequests.GetAutonomousDatabaseDataguardAssociationRequest,
    ...targetStates: models.AutonomousDatabaseDataguardAssociation.LifecycleState[]
  ): Promise<serviceResponses.GetAutonomousDatabaseDataguardAssociationResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getAutonomousDatabaseDataguardAssociation(request),
      response =>
        targetStates.includes(response.autonomousDatabaseDataguardAssociation.lifecycleState!),
      targetStates.includes(models.AutonomousDatabaseDataguardAssociation.LifecycleState.Terminated)
    );
  }

  /**
   * Waits forAutonomousDatabaseWallet till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetAutonomousDatabaseWalletResponse
   */
  public async forAutonomousDatabaseWallet(
    request: serviceRequests.GetAutonomousDatabaseWalletRequest,
    ...targetStates: models.AutonomousDatabaseWallet.LifecycleState[]
  ): Promise<serviceResponses.GetAutonomousDatabaseWalletResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getAutonomousDatabaseWallet(request),
      response => targetStates.includes(response.autonomousDatabaseWallet.lifecycleState!)
    );
  }

  /**
   * Waits forAutonomousExadataInfrastructure till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetAutonomousExadataInfrastructureResponse | null (null in case of 404 response)
   */
  public async forAutonomousExadataInfrastructure(
    request: serviceRequests.GetAutonomousExadataInfrastructureRequest,
    ...targetStates: models.AutonomousExadataInfrastructure.LifecycleState[]
  ): Promise<serviceResponses.GetAutonomousExadataInfrastructureResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getAutonomousExadataInfrastructure(request),
      response => targetStates.includes(response.autonomousExadataInfrastructure.lifecycleState!),
      targetStates.includes(models.AutonomousExadataInfrastructure.LifecycleState.Terminated)
    );
  }

  /**
   * Waits forAutonomousPatch till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetAutonomousPatchResponse
   */
  public async forAutonomousPatch(
    request: serviceRequests.GetAutonomousPatchRequest,
    ...targetStates: models.AutonomousPatch.LifecycleState[]
  ): Promise<serviceResponses.GetAutonomousPatchResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getAutonomousPatch(request),
      response => targetStates.includes(response.autonomousPatch.lifecycleState!)
    );
  }

  /**
   * Waits forAutonomousVmCluster till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetAutonomousVmClusterResponse | null (null in case of 404 response)
   */
  public async forAutonomousVmCluster(
    request: serviceRequests.GetAutonomousVmClusterRequest,
    ...targetStates: models.AutonomousVmCluster.LifecycleState[]
  ): Promise<serviceResponses.GetAutonomousVmClusterResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getAutonomousVmCluster(request),
      response => targetStates.includes(response.autonomousVmCluster.lifecycleState!),
      targetStates.includes(models.AutonomousVmCluster.LifecycleState.Terminated)
    );
  }

  /**
   * Waits forBackup till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetBackupResponse | null (null in case of 404 response)
   */
  public async forBackup(
    request: serviceRequests.GetBackupRequest,
    ...targetStates: models.Backup.LifecycleState[]
  ): Promise<serviceResponses.GetBackupResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getBackup(request),
      response => targetStates.includes(response.backup.lifecycleState!),
      targetStates.includes(models.Backup.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forBackupDestination till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetBackupDestinationResponse | null (null in case of 404 response)
   */
  public async forBackupDestination(
    request: serviceRequests.GetBackupDestinationRequest,
    ...targetStates: models.BackupDestination.LifecycleState[]
  ): Promise<serviceResponses.GetBackupDestinationResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getBackupDestination(request),
      response => targetStates.includes(response.backupDestination.lifecycleState!),
      targetStates.includes(models.BackupDestination.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forCloudAutonomousVmCluster till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetCloudAutonomousVmClusterResponse | null (null in case of 404 response)
   */
  public async forCloudAutonomousVmCluster(
    request: serviceRequests.GetCloudAutonomousVmClusterRequest,
    ...targetStates: models.CloudAutonomousVmCluster.LifecycleState[]
  ): Promise<serviceResponses.GetCloudAutonomousVmClusterResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getCloudAutonomousVmCluster(request),
      response => targetStates.includes(response.cloudAutonomousVmCluster.lifecycleState!),
      targetStates.includes(models.CloudAutonomousVmCluster.LifecycleState.Terminated)
    );
  }

  /**
   * Waits forCloudExadataInfrastructure till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetCloudExadataInfrastructureResponse | null (null in case of 404 response)
   */
  public async forCloudExadataInfrastructure(
    request: serviceRequests.GetCloudExadataInfrastructureRequest,
    ...targetStates: models.CloudExadataInfrastructure.LifecycleState[]
  ): Promise<serviceResponses.GetCloudExadataInfrastructureResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getCloudExadataInfrastructure(request),
      response => targetStates.includes(response.cloudExadataInfrastructure.lifecycleState!),
      targetStates.includes(models.CloudExadataInfrastructure.LifecycleState.Terminated)
    );
  }

  /**
   * Waits forCloudVmCluster till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetCloudVmClusterResponse | null (null in case of 404 response)
   */
  public async forCloudVmCluster(
    request: serviceRequests.GetCloudVmClusterRequest,
    ...targetStates: models.CloudVmCluster.LifecycleState[]
  ): Promise<serviceResponses.GetCloudVmClusterResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getCloudVmCluster(request),
      response => targetStates.includes(response.cloudVmCluster.lifecycleState!),
      targetStates.includes(models.CloudVmCluster.LifecycleState.Terminated)
    );
  }

  /**
   * Waits forConsoleConnection till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetConsoleConnectionResponse | null (null in case of 404 response)
   */
  public async forConsoleConnection(
    request: serviceRequests.GetConsoleConnectionRequest,
    ...targetStates: models.ConsoleConnection.LifecycleState[]
  ): Promise<serviceResponses.GetConsoleConnectionResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getConsoleConnection(request),
      response => targetStates.includes(response.consoleConnection.lifecycleState!),
      targetStates.includes(models.ConsoleConnection.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forDataGuardAssociation till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDataGuardAssociationResponse | null (null in case of 404 response)
   */
  public async forDataGuardAssociation(
    request: serviceRequests.GetDataGuardAssociationRequest,
    ...targetStates: models.DataGuardAssociation.LifecycleState[]
  ): Promise<serviceResponses.GetDataGuardAssociationResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getDataGuardAssociation(request),
      response => targetStates.includes(response.dataGuardAssociation.lifecycleState!),
      targetStates.includes(models.DataGuardAssociation.LifecycleState.Terminated)
    );
  }

  /**
   * Waits forDatabase till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDatabaseResponse | null (null in case of 404 response)
   */
  public async forDatabase(
    request: serviceRequests.GetDatabaseRequest,
    ...targetStates: models.Database.LifecycleState[]
  ): Promise<serviceResponses.GetDatabaseResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getDatabase(request),
      response => targetStates.includes(response.database.lifecycleState!),
      targetStates.includes(models.Database.LifecycleState.Terminated)
    );
  }

  /**
   * Waits forDatabaseSoftwareImage till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDatabaseSoftwareImageResponse | null (null in case of 404 response)
   */
  public async forDatabaseSoftwareImage(
    request: serviceRequests.GetDatabaseSoftwareImageRequest,
    ...targetStates: models.DatabaseSoftwareImage.LifecycleState[]
  ): Promise<serviceResponses.GetDatabaseSoftwareImageResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getDatabaseSoftwareImage(request),
      response => targetStates.includes(response.databaseSoftwareImage.lifecycleState!),
      targetStates.includes(models.DatabaseSoftwareImage.LifecycleState.Terminated)
    );
  }

  /**
   * Waits forDatabaseUpgradeHistoryEntry till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDatabaseUpgradeHistoryEntryResponse
   */
  public async forDatabaseUpgradeHistoryEntry(
    request: serviceRequests.GetDatabaseUpgradeHistoryEntryRequest,
    ...targetStates: models.DatabaseUpgradeHistoryEntry.LifecycleState[]
  ): Promise<serviceResponses.GetDatabaseUpgradeHistoryEntryResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getDatabaseUpgradeHistoryEntry(request),
      response => targetStates.includes(response.databaseUpgradeHistoryEntry.lifecycleState!)
    );
  }

  /**
   * Waits forDbHome till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDbHomeResponse | null (null in case of 404 response)
   */
  public async forDbHome(
    request: serviceRequests.GetDbHomeRequest,
    ...targetStates: models.DbHome.LifecycleState[]
  ): Promise<serviceResponses.GetDbHomeResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getDbHome(request),
      response => targetStates.includes(response.dbHome.lifecycleState!),
      targetStates.includes(models.DbHome.LifecycleState.Terminated)
    );
  }

  /**
   * Waits forDbNode till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDbNodeResponse | null (null in case of 404 response)
   */
  public async forDbNode(
    request: serviceRequests.GetDbNodeRequest,
    ...targetStates: models.DbNode.LifecycleState[]
  ): Promise<serviceResponses.GetDbNodeResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getDbNode(request),
      response => targetStates.includes(response.dbNode.lifecycleState!),
      targetStates.includes(models.DbNode.LifecycleState.Terminated)
    );
  }

  /**
   * Waits forDbServer till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDbServerResponse | null (null in case of 404 response)
   */
  public async forDbServer(
    request: serviceRequests.GetDbServerRequest,
    ...targetStates: models.DbServer.LifecycleState[]
  ): Promise<serviceResponses.GetDbServerResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getDbServer(request),
      response => targetStates.includes(response.dbServer.lifecycleState!),
      targetStates.includes(models.DbServer.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forDbSystem till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDbSystemResponse | null (null in case of 404 response)
   */
  public async forDbSystem(
    request: serviceRequests.GetDbSystemRequest,
    ...targetStates: models.DbSystem.LifecycleState[]
  ): Promise<serviceResponses.GetDbSystemResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getDbSystem(request),
      response => targetStates.includes(response.dbSystem.lifecycleState!),
      targetStates.includes(models.DbSystem.LifecycleState.Terminated)
    );
  }

  /**
   * Waits forDbSystemUpgradeHistoryEntry till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDbSystemUpgradeHistoryEntryResponse
   */
  public async forDbSystemUpgradeHistoryEntry(
    request: serviceRequests.GetDbSystemUpgradeHistoryEntryRequest,
    ...targetStates: models.DbSystemUpgradeHistoryEntry.LifecycleState[]
  ): Promise<serviceResponses.GetDbSystemUpgradeHistoryEntryResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getDbSystemUpgradeHistoryEntry(request),
      response => targetStates.includes(response.dbSystemUpgradeHistoryEntry.lifecycleState!)
    );
  }

  /**
   * Waits forExadataInfrastructure till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetExadataInfrastructureResponse | null (null in case of 404 response)
   */
  public async forExadataInfrastructure(
    request: serviceRequests.GetExadataInfrastructureRequest,
    ...targetStates: models.ExadataInfrastructure.LifecycleState[]
  ): Promise<serviceResponses.GetExadataInfrastructureResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getExadataInfrastructure(request),
      response => targetStates.includes(response.exadataInfrastructure.lifecycleState!),
      targetStates.includes(models.ExadataInfrastructure.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forExadataIormConfig till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetExadataIormConfigResponse
   */
  public async forExadataIormConfig(
    request: serviceRequests.GetExadataIormConfigRequest,
    ...targetStates: models.ExadataIormConfig.LifecycleState[]
  ): Promise<serviceResponses.GetExadataIormConfigResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getExadataIormConfig(request),
      response => targetStates.includes(response.exadataIormConfig.lifecycleState!)
    );
  }

  /**
   * Waits forExternalContainerDatabase till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetExternalContainerDatabaseResponse | null (null in case of 404 response)
   */
  public async forExternalContainerDatabase(
    request: serviceRequests.GetExternalContainerDatabaseRequest,
    ...targetStates: models.ExternalContainerDatabase.LifecycleState[]
  ): Promise<serviceResponses.GetExternalContainerDatabaseResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getExternalContainerDatabase(request),
      response => targetStates.includes(response.externalContainerDatabase.lifecycleState!),
      targetStates.includes(models.ExternalContainerDatabase.LifecycleState.Terminated)
    );
  }

  /**
   * Waits forExternalDatabaseConnector till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetExternalDatabaseConnectorResponse | null (null in case of 404 response)
   */
  public async forExternalDatabaseConnector(
    request: serviceRequests.GetExternalDatabaseConnectorRequest,
    ...targetStates: models.ExternalDatabaseConnector.LifecycleState[]
  ): Promise<serviceResponses.GetExternalDatabaseConnectorResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getExternalDatabaseConnector(request),
      response => targetStates.includes(response.externalDatabaseConnector.lifecycleState!),
      targetStates.includes(models.ExternalDatabaseConnector.LifecycleState.Terminated)
    );
  }

  /**
   * Waits forExternalNonContainerDatabase till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetExternalNonContainerDatabaseResponse | null (null in case of 404 response)
   */
  public async forExternalNonContainerDatabase(
    request: serviceRequests.GetExternalNonContainerDatabaseRequest,
    ...targetStates: models.ExternalNonContainerDatabase.LifecycleState[]
  ): Promise<serviceResponses.GetExternalNonContainerDatabaseResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getExternalNonContainerDatabase(request),
      response => targetStates.includes(response.externalNonContainerDatabase.lifecycleState!),
      targetStates.includes(models.ExternalNonContainerDatabase.LifecycleState.Terminated)
    );
  }

  /**
   * Waits forExternalPluggableDatabase till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetExternalPluggableDatabaseResponse | null (null in case of 404 response)
   */
  public async forExternalPluggableDatabase(
    request: serviceRequests.GetExternalPluggableDatabaseRequest,
    ...targetStates: models.ExternalPluggableDatabase.LifecycleState[]
  ): Promise<serviceResponses.GetExternalPluggableDatabaseResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getExternalPluggableDatabase(request),
      response => targetStates.includes(response.externalPluggableDatabase.lifecycleState!),
      targetStates.includes(models.ExternalPluggableDatabase.LifecycleState.Terminated)
    );
  }

  /**
   * Waits forKeyStore till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetKeyStoreResponse | null (null in case of 404 response)
   */
  public async forKeyStore(
    request: serviceRequests.GetKeyStoreRequest,
    ...targetStates: models.KeyStore.LifecycleState[]
  ): Promise<serviceResponses.GetKeyStoreResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getKeyStore(request),
      response => targetStates.includes(response.keyStore.lifecycleState!),
      targetStates.includes(models.KeyStore.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forMaintenanceRun till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetMaintenanceRunResponse | null (null in case of 404 response)
   */
  public async forMaintenanceRun(
    request: serviceRequests.GetMaintenanceRunRequest,
    ...targetStates: models.MaintenanceRun.LifecycleState[]
  ): Promise<serviceResponses.GetMaintenanceRunResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getMaintenanceRun(request),
      response => targetStates.includes(response.maintenanceRun.lifecycleState!),
      targetStates.includes(models.MaintenanceRun.LifecycleState.Deleted)
    );
  }

  /**
   * Waits forPdbConversionHistoryEntry till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetPdbConversionHistoryEntryResponse
   */
  public async forPdbConversionHistoryEntry(
    request: serviceRequests.GetPdbConversionHistoryEntryRequest,
    ...targetStates: models.PdbConversionHistoryEntry.LifecycleState[]
  ): Promise<serviceResponses.GetPdbConversionHistoryEntryResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getPdbConversionHistoryEntry(request),
      response => targetStates.includes(response.pdbConversionHistoryEntry.lifecycleState!)
    );
  }

  /**
   * Waits forPluggableDatabase till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetPluggableDatabaseResponse | null (null in case of 404 response)
   */
  public async forPluggableDatabase(
    request: serviceRequests.GetPluggableDatabaseRequest,
    ...targetStates: models.PluggableDatabase.LifecycleState[]
  ): Promise<serviceResponses.GetPluggableDatabaseResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getPluggableDatabase(request),
      response => targetStates.includes(response.pluggableDatabase.lifecycleState!),
      targetStates.includes(models.PluggableDatabase.LifecycleState.Terminated)
    );
  }

  /**
   * Waits forVmCluster till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetVmClusterResponse | null (null in case of 404 response)
   */
  public async forVmCluster(
    request: serviceRequests.GetVmClusterRequest,
    ...targetStates: models.VmCluster.LifecycleState[]
  ): Promise<serviceResponses.GetVmClusterResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getVmCluster(request),
      response => targetStates.includes(response.vmCluster.lifecycleState!),
      targetStates.includes(models.VmCluster.LifecycleState.Terminated)
    );
  }

  /**
   * Waits forVmClusterNetwork till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetVmClusterNetworkResponse | null (null in case of 404 response)
   */
  public async forVmClusterNetwork(
    request: serviceRequests.GetVmClusterNetworkRequest,
    ...targetStates: models.VmClusterNetwork.LifecycleState[]
  ): Promise<serviceResponses.GetVmClusterNetworkResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getVmClusterNetwork(request),
      response => targetStates.includes(response.vmClusterNetwork.lifecycleState!),
      targetStates.includes(models.VmClusterNetwork.LifecycleState.Terminated)
    );
  }

  /**
   * Waits forVmClusterUpdate till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetVmClusterUpdateResponse
   */
  public async forVmClusterUpdate(
    request: serviceRequests.GetVmClusterUpdateRequest,
    ...targetStates: models.VmClusterUpdate.LifecycleState[]
  ): Promise<serviceResponses.GetVmClusterUpdateResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getVmClusterUpdate(request),
      response => targetStates.includes(response.vmClusterUpdate.lifecycleState!)
    );
  }

  /**
   * Waits forVmClusterUpdateHistoryEntry till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetVmClusterUpdateHistoryEntryResponse
   */
  public async forVmClusterUpdateHistoryEntry(
    request: serviceRequests.GetVmClusterUpdateHistoryEntryRequest,
    ...targetStates: models.VmClusterUpdateHistoryEntry.LifecycleState[]
  ): Promise<serviceResponses.GetVmClusterUpdateHistoryEntryResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getVmClusterUpdateHistoryEntry(request),
      response => targetStates.includes(response.vmClusterUpdateHistoryEntry.lifecycleState!)
    );
  }

  /**
   * Waits forLaunchAutonomousExadataInfrastructure
   *
   * @param request the request to send
   * @return response returns LaunchAutonomousExadataInfrastructureResponse, GetWorkRequestResponse tuple
   */
  public async forLaunchAutonomousExadataInfrastructure(
    request: serviceRequests.LaunchAutonomousExadataInfrastructureRequest
  ): Promise<{
    response: serviceResponses.LaunchAutonomousExadataInfrastructureResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const launchAutonomousExadataInfrastructureResponse = await this.client.launchAutonomousExadataInfrastructure(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      launchAutonomousExadataInfrastructureResponse.opcWorkRequestId
    );
    return {
      response: launchAutonomousExadataInfrastructureResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forLaunchDbSystem
   *
   * @param request the request to send
   * @return response returns LaunchDbSystemResponse, GetWorkRequestResponse tuple
   */
  public async forLaunchDbSystem(
    request: serviceRequests.LaunchDbSystemRequest
  ): Promise<{
    response: serviceResponses.LaunchDbSystemResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const launchDbSystemResponse = await this.client.launchDbSystem(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      launchDbSystemResponse.opcWorkRequestId
    );
    return { response: launchDbSystemResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forLocalClonePluggableDatabase
   *
   * @param request the request to send
   * @return response returns LocalClonePluggableDatabaseResponse, GetWorkRequestResponse tuple
   */
  public async forLocalClonePluggableDatabase(
    request: serviceRequests.LocalClonePluggableDatabaseRequest
  ): Promise<{
    response: serviceResponses.LocalClonePluggableDatabaseResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const localClonePluggableDatabaseResponse = await this.client.localClonePluggableDatabase(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      localClonePluggableDatabaseResponse.opcWorkRequestId
    );
    return {
      response: localClonePluggableDatabaseResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forMigrateExadataDbSystemResourceModel
   *
   * @param request the request to send
   * @return response returns MigrateExadataDbSystemResourceModelResponse, GetWorkRequestResponse tuple
   */
  public async forMigrateExadataDbSystemResourceModel(
    request: serviceRequests.MigrateExadataDbSystemResourceModelRequest
  ): Promise<{
    response: serviceResponses.MigrateExadataDbSystemResourceModelResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const migrateExadataDbSystemResourceModelResponse = await this.client.migrateExadataDbSystemResourceModel(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      migrateExadataDbSystemResourceModelResponse.opcWorkRequestId
    );
    return {
      response: migrateExadataDbSystemResourceModelResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forMigrateVaultKey
   *
   * @param request the request to send
   * @return response returns MigrateVaultKeyResponse, GetWorkRequestResponse tuple
   */
  public async forMigrateVaultKey(
    request: serviceRequests.MigrateVaultKeyRequest
  ): Promise<{
    response: serviceResponses.MigrateVaultKeyResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const migrateVaultKeyResponse = await this.client.migrateVaultKey(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      migrateVaultKeyResponse.opcWorkRequestId
    );
    return { response: migrateVaultKeyResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forModifyDatabaseManagement
   *
   * @param request the request to send
   * @return response returns ModifyDatabaseManagementResponse, GetWorkRequestResponse tuple
   */
  public async forModifyDatabaseManagement(
    request: serviceRequests.ModifyDatabaseManagementRequest
  ): Promise<{
    response: serviceResponses.ModifyDatabaseManagementResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const modifyDatabaseManagementResponse = await this.client.modifyDatabaseManagement(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      modifyDatabaseManagementResponse.opcWorkRequestId
    );
    return {
      response: modifyDatabaseManagementResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forRegisterAutonomousDatabaseDataSafe
   *
   * @param request the request to send
   * @return response returns RegisterAutonomousDatabaseDataSafeResponse, GetWorkRequestResponse tuple
   */
  public async forRegisterAutonomousDatabaseDataSafe(
    request: serviceRequests.RegisterAutonomousDatabaseDataSafeRequest
  ): Promise<{
    response: serviceResponses.RegisterAutonomousDatabaseDataSafeResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const registerAutonomousDatabaseDataSafeResponse = await this.client.registerAutonomousDatabaseDataSafe(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      registerAutonomousDatabaseDataSafeResponse.opcWorkRequestId
    );
    return {
      response: registerAutonomousDatabaseDataSafeResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forReinstateAutonomousContainerDatabaseDataguardAssociation
   *
   * @param request the request to send
   * @return response returns ReinstateAutonomousContainerDatabaseDataguardAssociationResponse, GetWorkRequestResponse tuple
   */
  public async forReinstateAutonomousContainerDatabaseDataguardAssociation(
    request: serviceRequests.ReinstateAutonomousContainerDatabaseDataguardAssociationRequest
  ): Promise<{
    response: serviceResponses.ReinstateAutonomousContainerDatabaseDataguardAssociationResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const reinstateAutonomousContainerDatabaseDataguardAssociationResponse = await this.client.reinstateAutonomousContainerDatabaseDataguardAssociation(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      reinstateAutonomousContainerDatabaseDataguardAssociationResponse.opcWorkRequestId
    );
    return {
      response: reinstateAutonomousContainerDatabaseDataguardAssociationResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forReinstateDataGuardAssociation
   *
   * @param request the request to send
   * @return response returns ReinstateDataGuardAssociationResponse, GetWorkRequestResponse tuple
   */
  public async forReinstateDataGuardAssociation(
    request: serviceRequests.ReinstateDataGuardAssociationRequest
  ): Promise<{
    response: serviceResponses.ReinstateDataGuardAssociationResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const reinstateDataGuardAssociationResponse = await this.client.reinstateDataGuardAssociation(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      reinstateDataGuardAssociationResponse.opcWorkRequestId
    );
    return {
      response: reinstateDataGuardAssociationResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forRemoteClonePluggableDatabase
   *
   * @param request the request to send
   * @return response returns RemoteClonePluggableDatabaseResponse, GetWorkRequestResponse tuple
   */
  public async forRemoteClonePluggableDatabase(
    request: serviceRequests.RemoteClonePluggableDatabaseRequest
  ): Promise<{
    response: serviceResponses.RemoteClonePluggableDatabaseResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const remoteClonePluggableDatabaseResponse = await this.client.remoteClonePluggableDatabase(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      remoteClonePluggableDatabaseResponse.opcWorkRequestId
    );
    return {
      response: remoteClonePluggableDatabaseResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forRemoveVirtualMachineFromCloudVmCluster
   *
   * @param request the request to send
   * @return response returns RemoveVirtualMachineFromCloudVmClusterResponse, GetWorkRequestResponse tuple
   */
  public async forRemoveVirtualMachineFromCloudVmCluster(
    request: serviceRequests.RemoveVirtualMachineFromCloudVmClusterRequest
  ): Promise<{
    response: serviceResponses.RemoveVirtualMachineFromCloudVmClusterResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const removeVirtualMachineFromCloudVmClusterResponse = await this.client.removeVirtualMachineFromCloudVmCluster(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      removeVirtualMachineFromCloudVmClusterResponse.opcWorkRequestId
    );
    return {
      response: removeVirtualMachineFromCloudVmClusterResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forRemoveVirtualMachineFromVmCluster
   *
   * @param request the request to send
   * @return response returns RemoveVirtualMachineFromVmClusterResponse, GetWorkRequestResponse tuple
   */
  public async forRemoveVirtualMachineFromVmCluster(
    request: serviceRequests.RemoveVirtualMachineFromVmClusterRequest
  ): Promise<{
    response: serviceResponses.RemoveVirtualMachineFromVmClusterResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const removeVirtualMachineFromVmClusterResponse = await this.client.removeVirtualMachineFromVmCluster(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      removeVirtualMachineFromVmClusterResponse.opcWorkRequestId
    );
    return {
      response: removeVirtualMachineFromVmClusterResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forResizeVmClusterNetwork
   *
   * @param request the request to send
   * @return response returns ResizeVmClusterNetworkResponse, GetWorkRequestResponse tuple
   */
  public async forResizeVmClusterNetwork(
    request: serviceRequests.ResizeVmClusterNetworkRequest
  ): Promise<{
    response: serviceResponses.ResizeVmClusterNetworkResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const resizeVmClusterNetworkResponse = await this.client.resizeVmClusterNetwork(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      resizeVmClusterNetworkResponse.opcWorkRequestId
    );
    return {
      response: resizeVmClusterNetworkResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forRestartAutonomousContainerDatabase
   *
   * @param request the request to send
   * @return response returns RestartAutonomousContainerDatabaseResponse, GetWorkRequestResponse tuple
   */
  public async forRestartAutonomousContainerDatabase(
    request: serviceRequests.RestartAutonomousContainerDatabaseRequest
  ): Promise<{
    response: serviceResponses.RestartAutonomousContainerDatabaseResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const restartAutonomousContainerDatabaseResponse = await this.client.restartAutonomousContainerDatabase(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      restartAutonomousContainerDatabaseResponse.opcWorkRequestId
    );
    return {
      response: restartAutonomousContainerDatabaseResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forRestartAutonomousDatabase
   *
   * @param request the request to send
   * @return response returns RestartAutonomousDatabaseResponse, GetWorkRequestResponse tuple
   */
  public async forRestartAutonomousDatabase(
    request: serviceRequests.RestartAutonomousDatabaseRequest
  ): Promise<{
    response: serviceResponses.RestartAutonomousDatabaseResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const restartAutonomousDatabaseResponse = await this.client.restartAutonomousDatabase(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      restartAutonomousDatabaseResponse.opcWorkRequestId
    );
    return {
      response: restartAutonomousDatabaseResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forRestoreAutonomousDatabase
   *
   * @param request the request to send
   * @return response returns RestoreAutonomousDatabaseResponse, GetWorkRequestResponse tuple
   */
  public async forRestoreAutonomousDatabase(
    request: serviceRequests.RestoreAutonomousDatabaseRequest
  ): Promise<{
    response: serviceResponses.RestoreAutonomousDatabaseResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const restoreAutonomousDatabaseResponse = await this.client.restoreAutonomousDatabase(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      restoreAutonomousDatabaseResponse.opcWorkRequestId
    );
    return {
      response: restoreAutonomousDatabaseResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forRestoreDatabase
   *
   * @param request the request to send
   * @return response returns RestoreDatabaseResponse, GetWorkRequestResponse tuple
   */
  public async forRestoreDatabase(
    request: serviceRequests.RestoreDatabaseRequest
  ): Promise<{
    response: serviceResponses.RestoreDatabaseResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const restoreDatabaseResponse = await this.client.restoreDatabase(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      restoreDatabaseResponse.opcWorkRequestId
    );
    return { response: restoreDatabaseResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forRotateAutonomousContainerDatabaseEncryptionKey
   *
   * @param request the request to send
   * @return response returns RotateAutonomousContainerDatabaseEncryptionKeyResponse, GetWorkRequestResponse tuple
   */
  public async forRotateAutonomousContainerDatabaseEncryptionKey(
    request: serviceRequests.RotateAutonomousContainerDatabaseEncryptionKeyRequest
  ): Promise<{
    response: serviceResponses.RotateAutonomousContainerDatabaseEncryptionKeyResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const rotateAutonomousContainerDatabaseEncryptionKeyResponse = await this.client.rotateAutonomousContainerDatabaseEncryptionKey(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      rotateAutonomousContainerDatabaseEncryptionKeyResponse.opcWorkRequestId
    );
    return {
      response: rotateAutonomousContainerDatabaseEncryptionKeyResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forRotateAutonomousDatabaseEncryptionKey
   *
   * @param request the request to send
   * @return response returns RotateAutonomousDatabaseEncryptionKeyResponse, GetWorkRequestResponse tuple
   */
  public async forRotateAutonomousDatabaseEncryptionKey(
    request: serviceRequests.RotateAutonomousDatabaseEncryptionKeyRequest
  ): Promise<{
    response: serviceResponses.RotateAutonomousDatabaseEncryptionKeyResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const rotateAutonomousDatabaseEncryptionKeyResponse = await this.client.rotateAutonomousDatabaseEncryptionKey(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      rotateAutonomousDatabaseEncryptionKeyResponse.opcWorkRequestId
    );
    return {
      response: rotateAutonomousDatabaseEncryptionKeyResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forRotateCloudAutonomousVmClusterOrdsCerts
   *
   * @param request the request to send
   * @return response returns RotateCloudAutonomousVmClusterOrdsCertsResponse, GetWorkRequestResponse tuple
   */
  public async forRotateCloudAutonomousVmClusterOrdsCerts(
    request: serviceRequests.RotateCloudAutonomousVmClusterOrdsCertsRequest
  ): Promise<{
    response: serviceResponses.RotateCloudAutonomousVmClusterOrdsCertsResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const rotateCloudAutonomousVmClusterOrdsCertsResponse = await this.client.rotateCloudAutonomousVmClusterOrdsCerts(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      rotateCloudAutonomousVmClusterOrdsCertsResponse.opcWorkRequestId
    );
    return {
      response: rotateCloudAutonomousVmClusterOrdsCertsResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forRotateCloudAutonomousVmClusterSslCerts
   *
   * @param request the request to send
   * @return response returns RotateCloudAutonomousVmClusterSslCertsResponse, GetWorkRequestResponse tuple
   */
  public async forRotateCloudAutonomousVmClusterSslCerts(
    request: serviceRequests.RotateCloudAutonomousVmClusterSslCertsRequest
  ): Promise<{
    response: serviceResponses.RotateCloudAutonomousVmClusterSslCertsResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const rotateCloudAutonomousVmClusterSslCertsResponse = await this.client.rotateCloudAutonomousVmClusterSslCerts(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      rotateCloudAutonomousVmClusterSslCertsResponse.opcWorkRequestId
    );
    return {
      response: rotateCloudAutonomousVmClusterSslCertsResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forRotateOrdsCerts
   *
   * @param request the request to send
   * @return response returns RotateOrdsCertsResponse, GetWorkRequestResponse tuple
   */
  public async forRotateOrdsCerts(
    request: serviceRequests.RotateOrdsCertsRequest
  ): Promise<{
    response: serviceResponses.RotateOrdsCertsResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const rotateOrdsCertsResponse = await this.client.rotateOrdsCerts(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      rotateOrdsCertsResponse.opcWorkRequestId
    );
    return { response: rotateOrdsCertsResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forRotateSslCerts
   *
   * @param request the request to send
   * @return response returns RotateSslCertsResponse, GetWorkRequestResponse tuple
   */
  public async forRotateSslCerts(
    request: serviceRequests.RotateSslCertsRequest
  ): Promise<{
    response: serviceResponses.RotateSslCertsResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const rotateSslCertsResponse = await this.client.rotateSslCerts(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      rotateSslCertsResponse.opcWorkRequestId
    );
    return { response: rotateSslCertsResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forRotateVaultKey
   *
   * @param request the request to send
   * @return response returns RotateVaultKeyResponse, GetWorkRequestResponse tuple
   */
  public async forRotateVaultKey(
    request: serviceRequests.RotateVaultKeyRequest
  ): Promise<{
    response: serviceResponses.RotateVaultKeyResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const rotateVaultKeyResponse = await this.client.rotateVaultKey(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      rotateVaultKeyResponse.opcWorkRequestId
    );
    return { response: rotateVaultKeyResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forScanExternalContainerDatabasePluggableDatabases
   *
   * @param request the request to send
   * @return response returns ScanExternalContainerDatabasePluggableDatabasesResponse, GetWorkRequestResponse tuple
   */
  public async forScanExternalContainerDatabasePluggableDatabases(
    request: serviceRequests.ScanExternalContainerDatabasePluggableDatabasesRequest
  ): Promise<{
    response: serviceResponses.ScanExternalContainerDatabasePluggableDatabasesResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const scanExternalContainerDatabasePluggableDatabasesResponse = await this.client.scanExternalContainerDatabasePluggableDatabases(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      scanExternalContainerDatabasePluggableDatabasesResponse.opcWorkRequestId
    );
    return {
      response: scanExternalContainerDatabasePluggableDatabasesResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forShrinkAutonomousDatabase
   *
   * @param request the request to send
   * @return response returns ShrinkAutonomousDatabaseResponse, GetWorkRequestResponse tuple
   */
  public async forShrinkAutonomousDatabase(
    request: serviceRequests.ShrinkAutonomousDatabaseRequest
  ): Promise<{
    response: serviceResponses.ShrinkAutonomousDatabaseResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const shrinkAutonomousDatabaseResponse = await this.client.shrinkAutonomousDatabase(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      shrinkAutonomousDatabaseResponse.opcWorkRequestId
    );
    return {
      response: shrinkAutonomousDatabaseResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forStartAutonomousDatabase
   *
   * @param request the request to send
   * @return response returns StartAutonomousDatabaseResponse, GetWorkRequestResponse tuple
   */
  public async forStartAutonomousDatabase(
    request: serviceRequests.StartAutonomousDatabaseRequest
  ): Promise<{
    response: serviceResponses.StartAutonomousDatabaseResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const startAutonomousDatabaseResponse = await this.client.startAutonomousDatabase(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      startAutonomousDatabaseResponse.opcWorkRequestId
    );
    return {
      response: startAutonomousDatabaseResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forStartPluggableDatabase
   *
   * @param request the request to send
   * @return response returns StartPluggableDatabaseResponse, GetWorkRequestResponse tuple
   */
  public async forStartPluggableDatabase(
    request: serviceRequests.StartPluggableDatabaseRequest
  ): Promise<{
    response: serviceResponses.StartPluggableDatabaseResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const startPluggableDatabaseResponse = await this.client.startPluggableDatabase(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      startPluggableDatabaseResponse.opcWorkRequestId
    );
    return {
      response: startPluggableDatabaseResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forStopAutonomousDatabase
   *
   * @param request the request to send
   * @return response returns StopAutonomousDatabaseResponse, GetWorkRequestResponse tuple
   */
  public async forStopAutonomousDatabase(
    request: serviceRequests.StopAutonomousDatabaseRequest
  ): Promise<{
    response: serviceResponses.StopAutonomousDatabaseResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const stopAutonomousDatabaseResponse = await this.client.stopAutonomousDatabase(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      stopAutonomousDatabaseResponse.opcWorkRequestId
    );
    return {
      response: stopAutonomousDatabaseResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forStopPluggableDatabase
   *
   * @param request the request to send
   * @return response returns StopPluggableDatabaseResponse, GetWorkRequestResponse tuple
   */
  public async forStopPluggableDatabase(
    request: serviceRequests.StopPluggableDatabaseRequest
  ): Promise<{
    response: serviceResponses.StopPluggableDatabaseResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const stopPluggableDatabaseResponse = await this.client.stopPluggableDatabase(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      stopPluggableDatabaseResponse.opcWorkRequestId
    );
    return { response: stopPluggableDatabaseResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forSwitchoverAutonomousContainerDatabaseDataguardAssociation
   *
   * @param request the request to send
   * @return response returns SwitchoverAutonomousContainerDatabaseDataguardAssociationResponse, GetWorkRequestResponse tuple
   */
  public async forSwitchoverAutonomousContainerDatabaseDataguardAssociation(
    request: serviceRequests.SwitchoverAutonomousContainerDatabaseDataguardAssociationRequest
  ): Promise<{
    response: serviceResponses.SwitchoverAutonomousContainerDatabaseDataguardAssociationResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const switchoverAutonomousContainerDatabaseDataguardAssociationResponse = await this.client.switchoverAutonomousContainerDatabaseDataguardAssociation(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      switchoverAutonomousContainerDatabaseDataguardAssociationResponse.opcWorkRequestId
    );
    return {
      response: switchoverAutonomousContainerDatabaseDataguardAssociationResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forSwitchoverAutonomousDatabase
   *
   * @param request the request to send
   * @return response returns SwitchoverAutonomousDatabaseResponse, GetWorkRequestResponse tuple
   */
  public async forSwitchoverAutonomousDatabase(
    request: serviceRequests.SwitchoverAutonomousDatabaseRequest
  ): Promise<{
    response: serviceResponses.SwitchoverAutonomousDatabaseResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const switchoverAutonomousDatabaseResponse = await this.client.switchoverAutonomousDatabase(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      switchoverAutonomousDatabaseResponse.opcWorkRequestId
    );
    return {
      response: switchoverAutonomousDatabaseResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forSwitchoverDataGuardAssociation
   *
   * @param request the request to send
   * @return response returns SwitchoverDataGuardAssociationResponse, GetWorkRequestResponse tuple
   */
  public async forSwitchoverDataGuardAssociation(
    request: serviceRequests.SwitchoverDataGuardAssociationRequest
  ): Promise<{
    response: serviceResponses.SwitchoverDataGuardAssociationResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const switchoverDataGuardAssociationResponse = await this.client.switchoverDataGuardAssociation(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      switchoverDataGuardAssociationResponse.opcWorkRequestId
    );
    return {
      response: switchoverDataGuardAssociationResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forTerminateAutonomousContainerDatabase
   *
   * @param request the request to send
   * @return response returns TerminateAutonomousContainerDatabaseResponse, GetWorkRequestResponse tuple
   */
  public async forTerminateAutonomousContainerDatabase(
    request: serviceRequests.TerminateAutonomousContainerDatabaseRequest
  ): Promise<{
    response: serviceResponses.TerminateAutonomousContainerDatabaseResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const terminateAutonomousContainerDatabaseResponse = await this.client.terminateAutonomousContainerDatabase(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      terminateAutonomousContainerDatabaseResponse.opcWorkRequestId
    );
    return {
      response: terminateAutonomousContainerDatabaseResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forTerminateAutonomousExadataInfrastructure
   *
   * @param request the request to send
   * @return response returns TerminateAutonomousExadataInfrastructureResponse, GetWorkRequestResponse tuple
   */
  public async forTerminateAutonomousExadataInfrastructure(
    request: serviceRequests.TerminateAutonomousExadataInfrastructureRequest
  ): Promise<{
    response: serviceResponses.TerminateAutonomousExadataInfrastructureResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const terminateAutonomousExadataInfrastructureResponse = await this.client.terminateAutonomousExadataInfrastructure(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      terminateAutonomousExadataInfrastructureResponse.opcWorkRequestId
    );
    return {
      response: terminateAutonomousExadataInfrastructureResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forTerminateDbSystem
   *
   * @param request the request to send
   * @return response returns TerminateDbSystemResponse, GetWorkRequestResponse tuple
   */
  public async forTerminateDbSystem(
    request: serviceRequests.TerminateDbSystemRequest
  ): Promise<{
    response: serviceResponses.TerminateDbSystemResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const terminateDbSystemResponse = await this.client.terminateDbSystem(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      terminateDbSystemResponse.opcWorkRequestId
    );
    return { response: terminateDbSystemResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forUpdateAutonomousContainerDatabase
   *
   * @param request the request to send
   * @return response returns UpdateAutonomousContainerDatabaseResponse, GetWorkRequestResponse tuple
   */
  public async forUpdateAutonomousContainerDatabase(
    request: serviceRequests.UpdateAutonomousContainerDatabaseRequest
  ): Promise<{
    response: serviceResponses.UpdateAutonomousContainerDatabaseResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const updateAutonomousContainerDatabaseResponse = await this.client.updateAutonomousContainerDatabase(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      updateAutonomousContainerDatabaseResponse.opcWorkRequestId
    );
    return {
      response: updateAutonomousContainerDatabaseResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forUpdateAutonomousContainerDatabaseDataguardAssociation
   *
   * @param request the request to send
   * @return response returns UpdateAutonomousContainerDatabaseDataguardAssociationResponse, GetWorkRequestResponse tuple
   */
  public async forUpdateAutonomousContainerDatabaseDataguardAssociation(
    request: serviceRequests.UpdateAutonomousContainerDatabaseDataguardAssociationRequest
  ): Promise<{
    response: serviceResponses.UpdateAutonomousContainerDatabaseDataguardAssociationResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const updateAutonomousContainerDatabaseDataguardAssociationResponse = await this.client.updateAutonomousContainerDatabaseDataguardAssociation(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      updateAutonomousContainerDatabaseDataguardAssociationResponse.opcWorkRequestId
    );
    return {
      response: updateAutonomousContainerDatabaseDataguardAssociationResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forUpdateAutonomousDatabase
   *
   * @param request the request to send
   * @return response returns UpdateAutonomousDatabaseResponse, GetWorkRequestResponse tuple
   */
  public async forUpdateAutonomousDatabase(
    request: serviceRequests.UpdateAutonomousDatabaseRequest
  ): Promise<{
    response: serviceResponses.UpdateAutonomousDatabaseResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const updateAutonomousDatabaseResponse = await this.client.updateAutonomousDatabase(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      updateAutonomousDatabaseResponse.opcWorkRequestId
    );
    return {
      response: updateAutonomousDatabaseResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forUpdateAutonomousDatabaseRegionalWallet
   *
   * @param request the request to send
   * @return response returns UpdateAutonomousDatabaseRegionalWalletResponse, GetWorkRequestResponse tuple
   */
  public async forUpdateAutonomousDatabaseRegionalWallet(
    request: serviceRequests.UpdateAutonomousDatabaseRegionalWalletRequest
  ): Promise<{
    response: serviceResponses.UpdateAutonomousDatabaseRegionalWalletResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const updateAutonomousDatabaseRegionalWalletResponse = await this.client.updateAutonomousDatabaseRegionalWallet(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      updateAutonomousDatabaseRegionalWalletResponse.opcWorkRequestId
    );
    return {
      response: updateAutonomousDatabaseRegionalWalletResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forUpdateAutonomousDatabaseWallet
   *
   * @param request the request to send
   * @return response returns UpdateAutonomousDatabaseWalletResponse, GetWorkRequestResponse tuple
   */
  public async forUpdateAutonomousDatabaseWallet(
    request: serviceRequests.UpdateAutonomousDatabaseWalletRequest
  ): Promise<{
    response: serviceResponses.UpdateAutonomousDatabaseWalletResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const updateAutonomousDatabaseWalletResponse = await this.client.updateAutonomousDatabaseWallet(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      updateAutonomousDatabaseWalletResponse.opcWorkRequestId
    );
    return {
      response: updateAutonomousDatabaseWalletResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forUpdateAutonomousExadataInfrastructure
   *
   * @param request the request to send
   * @return response returns UpdateAutonomousExadataInfrastructureResponse, GetWorkRequestResponse tuple
   */
  public async forUpdateAutonomousExadataInfrastructure(
    request: serviceRequests.UpdateAutonomousExadataInfrastructureRequest
  ): Promise<{
    response: serviceResponses.UpdateAutonomousExadataInfrastructureResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const updateAutonomousExadataInfrastructureResponse = await this.client.updateAutonomousExadataInfrastructure(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      updateAutonomousExadataInfrastructureResponse.opcWorkRequestId
    );
    return {
      response: updateAutonomousExadataInfrastructureResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forUpdateAutonomousVmCluster
   *
   * @param request the request to send
   * @return response returns UpdateAutonomousVmClusterResponse, GetWorkRequestResponse tuple
   */
  public async forUpdateAutonomousVmCluster(
    request: serviceRequests.UpdateAutonomousVmClusterRequest
  ): Promise<{
    response: serviceResponses.UpdateAutonomousVmClusterResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const updateAutonomousVmClusterResponse = await this.client.updateAutonomousVmCluster(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      updateAutonomousVmClusterResponse.opcWorkRequestId
    );
    return {
      response: updateAutonomousVmClusterResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forUpdateCloudAutonomousVmCluster
   *
   * @param request the request to send
   * @return response returns UpdateCloudAutonomousVmClusterResponse, GetWorkRequestResponse tuple
   */
  public async forUpdateCloudAutonomousVmCluster(
    request: serviceRequests.UpdateCloudAutonomousVmClusterRequest
  ): Promise<{
    response: serviceResponses.UpdateCloudAutonomousVmClusterResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const updateCloudAutonomousVmClusterResponse = await this.client.updateCloudAutonomousVmCluster(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      updateCloudAutonomousVmClusterResponse.opcWorkRequestId
    );
    return {
      response: updateCloudAutonomousVmClusterResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forUpdateCloudExadataInfrastructure
   *
   * @param request the request to send
   * @return response returns UpdateCloudExadataInfrastructureResponse, GetWorkRequestResponse tuple
   */
  public async forUpdateCloudExadataInfrastructure(
    request: serviceRequests.UpdateCloudExadataInfrastructureRequest
  ): Promise<{
    response: serviceResponses.UpdateCloudExadataInfrastructureResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const updateCloudExadataInfrastructureResponse = await this.client.updateCloudExadataInfrastructure(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      updateCloudExadataInfrastructureResponse.opcWorkRequestId
    );
    return {
      response: updateCloudExadataInfrastructureResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forUpdateCloudVmCluster
   *
   * @param request the request to send
   * @return response returns UpdateCloudVmClusterResponse, GetWorkRequestResponse tuple
   */
  public async forUpdateCloudVmCluster(
    request: serviceRequests.UpdateCloudVmClusterRequest
  ): Promise<{
    response: serviceResponses.UpdateCloudVmClusterResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const updateCloudVmClusterResponse = await this.client.updateCloudVmCluster(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      updateCloudVmClusterResponse.opcWorkRequestId
    );
    return { response: updateCloudVmClusterResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forUpdateCloudVmClusterIormConfig
   *
   * @param request the request to send
   * @return response returns UpdateCloudVmClusterIormConfigResponse, GetWorkRequestResponse tuple
   */
  public async forUpdateCloudVmClusterIormConfig(
    request: serviceRequests.UpdateCloudVmClusterIormConfigRequest
  ): Promise<{
    response: serviceResponses.UpdateCloudVmClusterIormConfigResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const updateCloudVmClusterIormConfigResponse = await this.client.updateCloudVmClusterIormConfig(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      updateCloudVmClusterIormConfigResponse.opcWorkRequestId
    );
    return {
      response: updateCloudVmClusterIormConfigResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forUpdateDataGuardAssociation
   *
   * @param request the request to send
   * @return response returns UpdateDataGuardAssociationResponse, GetWorkRequestResponse tuple
   */
  public async forUpdateDataGuardAssociation(
    request: serviceRequests.UpdateDataGuardAssociationRequest
  ): Promise<{
    response: serviceResponses.UpdateDataGuardAssociationResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const updateDataGuardAssociationResponse = await this.client.updateDataGuardAssociation(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      updateDataGuardAssociationResponse.opcWorkRequestId
    );
    return {
      response: updateDataGuardAssociationResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forUpdateDatabase
   *
   * @param request the request to send
   * @return response returns UpdateDatabaseResponse, GetWorkRequestResponse tuple
   */
  public async forUpdateDatabase(
    request: serviceRequests.UpdateDatabaseRequest
  ): Promise<{
    response: serviceResponses.UpdateDatabaseResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const updateDatabaseResponse = await this.client.updateDatabase(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      updateDatabaseResponse.opcWorkRequestId
    );
    return { response: updateDatabaseResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forUpdateDbHome
   *
   * @param request the request to send
   * @return response returns UpdateDbHomeResponse, GetWorkRequestResponse tuple
   */
  public async forUpdateDbHome(
    request: serviceRequests.UpdateDbHomeRequest
  ): Promise<{
    response: serviceResponses.UpdateDbHomeResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const updateDbHomeResponse = await this.client.updateDbHome(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      updateDbHomeResponse.opcWorkRequestId
    );
    return { response: updateDbHomeResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forUpdateDbSystem
   *
   * @param request the request to send
   * @return response returns UpdateDbSystemResponse, GetWorkRequestResponse tuple
   */
  public async forUpdateDbSystem(
    request: serviceRequests.UpdateDbSystemRequest
  ): Promise<{
    response: serviceResponses.UpdateDbSystemResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const updateDbSystemResponse = await this.client.updateDbSystem(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      updateDbSystemResponse.opcWorkRequestId
    );
    return { response: updateDbSystemResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forUpdateExadataInfrastructure
   *
   * @param request the request to send
   * @return response returns UpdateExadataInfrastructureResponse, GetWorkRequestResponse tuple
   */
  public async forUpdateExadataInfrastructure(
    request: serviceRequests.UpdateExadataInfrastructureRequest
  ): Promise<{
    response: serviceResponses.UpdateExadataInfrastructureResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const updateExadataInfrastructureResponse = await this.client.updateExadataInfrastructure(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      updateExadataInfrastructureResponse.opcWorkRequestId
    );
    return {
      response: updateExadataInfrastructureResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forUpdateExadataIormConfig
   *
   * @param request the request to send
   * @return response returns UpdateExadataIormConfigResponse, GetWorkRequestResponse tuple
   */
  public async forUpdateExadataIormConfig(
    request: serviceRequests.UpdateExadataIormConfigRequest
  ): Promise<{
    response: serviceResponses.UpdateExadataIormConfigResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const updateExadataIormConfigResponse = await this.client.updateExadataIormConfig(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      updateExadataIormConfigResponse.opcWorkRequestId
    );
    return {
      response: updateExadataIormConfigResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forUpdateExternalContainerDatabase
   *
   * @param request the request to send
   * @return response returns UpdateExternalContainerDatabaseResponse, GetWorkRequestResponse tuple
   */
  public async forUpdateExternalContainerDatabase(
    request: serviceRequests.UpdateExternalContainerDatabaseRequest
  ): Promise<{
    response: serviceResponses.UpdateExternalContainerDatabaseResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const updateExternalContainerDatabaseResponse = await this.client.updateExternalContainerDatabase(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      updateExternalContainerDatabaseResponse.opcWorkRequestId
    );
    return {
      response: updateExternalContainerDatabaseResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forUpdateExternalDatabaseConnector
   *
   * @param request the request to send
   * @return response returns UpdateExternalDatabaseConnectorResponse, GetWorkRequestResponse tuple
   */
  public async forUpdateExternalDatabaseConnector(
    request: serviceRequests.UpdateExternalDatabaseConnectorRequest
  ): Promise<{
    response: serviceResponses.UpdateExternalDatabaseConnectorResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const updateExternalDatabaseConnectorResponse = await this.client.updateExternalDatabaseConnector(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      updateExternalDatabaseConnectorResponse.opcWorkRequestId
    );
    return {
      response: updateExternalDatabaseConnectorResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forUpdateExternalNonContainerDatabase
   *
   * @param request the request to send
   * @return response returns UpdateExternalNonContainerDatabaseResponse, GetWorkRequestResponse tuple
   */
  public async forUpdateExternalNonContainerDatabase(
    request: serviceRequests.UpdateExternalNonContainerDatabaseRequest
  ): Promise<{
    response: serviceResponses.UpdateExternalNonContainerDatabaseResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const updateExternalNonContainerDatabaseResponse = await this.client.updateExternalNonContainerDatabase(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      updateExternalNonContainerDatabaseResponse.opcWorkRequestId
    );
    return {
      response: updateExternalNonContainerDatabaseResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forUpdateExternalPluggableDatabase
   *
   * @param request the request to send
   * @return response returns UpdateExternalPluggableDatabaseResponse, GetWorkRequestResponse tuple
   */
  public async forUpdateExternalPluggableDatabase(
    request: serviceRequests.UpdateExternalPluggableDatabaseRequest
  ): Promise<{
    response: serviceResponses.UpdateExternalPluggableDatabaseResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const updateExternalPluggableDatabaseResponse = await this.client.updateExternalPluggableDatabase(
      request
    );
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      updateExternalPluggableDatabaseResponse.opcWorkRequestId
    );
    return {
      response: updateExternalPluggableDatabaseResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forUpdatePluggableDatabase
   *
   * @param request the request to send
   * @return response returns UpdatePluggableDatabaseResponse, GetWorkRequestResponse tuple
   */
  public async forUpdatePluggableDatabase(
    request: serviceRequests.UpdatePluggableDatabaseRequest
  ): Promise<{
    response: serviceResponses.UpdatePluggableDatabaseResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const updatePluggableDatabaseResponse = await this.client.updatePluggableDatabase(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      updatePluggableDatabaseResponse.opcWorkRequestId
    );
    return {
      response: updatePluggableDatabaseResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forUpdateVmCluster
   *
   * @param request the request to send
   * @return response returns UpdateVmClusterResponse, GetWorkRequestResponse tuple
   */
  public async forUpdateVmCluster(
    request: serviceRequests.UpdateVmClusterRequest
  ): Promise<{
    response: serviceResponses.UpdateVmClusterResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const updateVmClusterResponse = await this.client.updateVmCluster(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      updateVmClusterResponse.opcWorkRequestId
    );
    return { response: updateVmClusterResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forUpdateVmClusterNetwork
   *
   * @param request the request to send
   * @return response returns UpdateVmClusterNetworkResponse, GetWorkRequestResponse tuple
   */
  public async forUpdateVmClusterNetwork(
    request: serviceRequests.UpdateVmClusterNetworkRequest
  ): Promise<{
    response: serviceResponses.UpdateVmClusterNetworkResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const updateVmClusterNetworkResponse = await this.client.updateVmClusterNetwork(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      updateVmClusterNetworkResponse.opcWorkRequestId
    );
    return {
      response: updateVmClusterNetworkResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }

  /**
   * Waits forUpgradeDatabase
   *
   * @param request the request to send
   * @return response returns UpgradeDatabaseResponse, GetWorkRequestResponse tuple
   */
  public async forUpgradeDatabase(
    request: serviceRequests.UpgradeDatabaseRequest
  ): Promise<{
    response: serviceResponses.UpgradeDatabaseResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const upgradeDatabaseResponse = await this.client.upgradeDatabase(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      upgradeDatabaseResponse.opcWorkRequestId
    );
    return { response: upgradeDatabaseResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forUpgradeDbSystem
   *
   * @param request the request to send
   * @return response returns UpgradeDbSystemResponse, GetWorkRequestResponse tuple
   */
  public async forUpgradeDbSystem(
    request: serviceRequests.UpgradeDbSystemRequest
  ): Promise<{
    response: serviceResponses.UpgradeDbSystemResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const upgradeDbSystemResponse = await this.client.upgradeDbSystem(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      upgradeDbSystemResponse.opcWorkRequestId
    );
    return { response: upgradeDbSystemResponse, workRequestResponse: getWorkRequestResponse };
  }

  /**
   * Waits forValidateVmClusterNetwork
   *
   * @param request the request to send
   * @return response returns ValidateVmClusterNetworkResponse, GetWorkRequestResponse tuple
   */
  public async forValidateVmClusterNetwork(
    request: serviceRequests.ValidateVmClusterNetworkRequest
  ): Promise<{
    response: serviceResponses.ValidateVmClusterNetworkResponse;
    workRequestResponse: responses.GetWorkRequestResponse;
  }> {
    const validateVmClusterNetworkResponse = await this.client.validateVmClusterNetwork(request);
    const getWorkRequestResponse = await waitForWorkRequest(
      this.config,
      this.workRequestClient,
      validateVmClusterNetworkResponse.opcWorkRequestId
    );
    return {
      response: validateVmClusterNetworkResponse,
      workRequestResponse: getWorkRequestResponse
    };
  }
}
