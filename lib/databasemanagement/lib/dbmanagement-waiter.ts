/**
 * Database Management API
 * Use the Database Management API to perform tasks such as obtaining performance and resource usage metrics
for a fleet of Managed Databases or a specific Managed Database, creating Managed Database Groups, and
running a SQL job on a Managed Database or Managed Database Group.

 * OpenAPI spec version: 20201101
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { DbManagementClient } from "./client";
import { genericWaiter, genericTerminalConditionWaiter, WaiterConfiguration } from "oci-common";

export class DbManagementWaiter {
  public constructor(
    private client: DbManagementClient,
    private readonly config?: WaiterConfiguration
  ) {}

  /**
   * Waits forDbManagementPrivateEndpoint till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetDbManagementPrivateEndpointResponse | null (null in case of 404 response)
   */
  public async forDbManagementPrivateEndpoint(
    request: serviceRequests.GetDbManagementPrivateEndpointRequest,
    ...targetStates: models.LifecycleStates[]
  ): Promise<serviceResponses.GetDbManagementPrivateEndpointResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getDbManagementPrivateEndpoint(request),
      response => targetStates.includes(response.dbManagementPrivateEndpoint.lifecycleState!),
      targetStates.includes(models.LifecycleStates.Deleted)
    );
  }

  /**
   * Waits forJob till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetJobResponse
   */
  public async forJob(
    request: serviceRequests.GetJobRequest,
    ...targetStates: models.Job.LifecycleState[]
  ): Promise<serviceResponses.GetJobResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getJob(request),
      response => targetStates.includes(response.job.lifecycleState!)
    );
  }

  /**
   * Waits forManagedDatabaseGroup till it reaches any of the provided states
   *
   * @param request the request to send
   * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
   * @return response returns GetManagedDatabaseGroupResponse | null (null in case of 404 response)
   */
  public async forManagedDatabaseGroup(
    request: serviceRequests.GetManagedDatabaseGroupRequest,
    ...targetStates: models.LifecycleStates[]
  ): Promise<serviceResponses.GetManagedDatabaseGroupResponse | null> {
    return genericTerminalConditionWaiter(
      this.config,
      () => this.client.getManagedDatabaseGroup(request),
      response => targetStates.includes(response.managedDatabaseGroup.lifecycleState!),
      targetStates.includes(models.LifecycleStates.Deleted)
    );
  }

  /**
   * Waits forWorkRequest
   *
   * @param request the request to send
   * @return response returns GetWorkRequestResponse
   */
  public async forWorkRequest(
    request: serviceRequests.GetWorkRequestRequest
  ): Promise<serviceResponses.GetWorkRequestResponse> {
    return genericWaiter(
      this.config,
      () => this.client.getWorkRequest(request),
      response => (response.workRequest.timeFinished ? true : false)
    );
  }
}
