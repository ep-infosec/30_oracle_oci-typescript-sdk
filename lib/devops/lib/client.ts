/**
 * DevOps API
 * Use the DevOps API to create DevOps projects, configure code repositories,  add artifacts to deploy, build and test software applications, configure  target deployment environments, and deploy software applications.  For more information, see [DevOps](/Content/devops/using/home.htm).
 * OpenAPI spec version: 20210630
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import common = require("oci-common");
import * as requests from "./request";
import * as model from "./model";
import * as responses from "./response";
import { DevopsWaiter } from "./devops-waiter";
import { composeResponse, composeRequest, GenericRetrier } from "oci-common";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum DevopsApiKeys {}
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
export class DevopsClient {
  protected static serviceEndpointTemplate = "https://devops.{region}.oci.{secondLevelDomain}";
  protected static endpointServiceName = "";
  protected "_endpoint": string = "";
  protected "_defaultHeaders": any = {};
  protected "_waiters": DevopsWaiter;
  protected "_clientConfiguration": common.ClientConfiguration;
  protected _circuitBreaker = null;
  protected _httpOptions: any = undefined;
  public targetService = "Devops";

  protected _httpClient: common.HttpClient;

  constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration) {
    const requestSigner = params.authenticationDetailsProvider
      ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
      : null;
    if (clientConfiguration) {
      this._clientConfiguration = clientConfiguration;
      this._circuitBreaker = clientConfiguration.circuitBreaker
        ? clientConfiguration.circuitBreaker!.circuit
        : null;
      this._httpOptions = clientConfiguration.httpOptions
        ? clientConfiguration.httpOptions
        : undefined;
    }
    // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
    const specCircuitBreakerEnabled = true;
    if (
      !this._circuitBreaker &&
      common.utils.isCircuitBreakerSystemEnabled(clientConfiguration!) &&
      (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)
    ) {
      this._circuitBreaker = new common.CircuitBreaker().circuit;
    }
    this._httpClient =
      params.httpClient ||
      new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions);

    if (
      params.authenticationDetailsProvider &&
      common.isRegionProvider(params.authenticationDetailsProvider)
    ) {
      const provider: common.RegionProvider = params.authenticationDetailsProvider;
      if (provider.getRegion()) {
        this.region = provider.getRegion();
      }
    }
  }

  /**
   * Get the endpoint that is being used to call (ex, https://www.example.com).
   */
  public get endpoint() {
    return this._endpoint;
  }

  /**
   * Sets the endpoint to call (ex, https://www.example.com).
   * @param endpoint The endpoint of the service.
   */
  public set endpoint(endpoint: string) {
    this._endpoint = endpoint;
    this._endpoint = this._endpoint + "/20210630";
    if (this.logger) this.logger.info(`DevopsClient endpoint set to ${this._endpoint}`);
  }

  public get logger() {
    return common.LOG.logger;
  }

  /**
   * Sets the region to call (ex, Region.US_PHOENIX_1).
   * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
   * @param region The region of the service.
   */
  public set region(region: common.Region) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegion(
      DevopsClient.serviceEndpointTemplate,
      region,
      DevopsClient.endpointServiceName
    );
  }

  /**
   * Sets the regionId to call (ex, 'us-phoenix-1').
   *
   * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
   * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
   * and then call {@link #endpoint(String) endpoint}.
   * @param regionId The public region ID.
   */
  public set regionId(regionId: string) {
    this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(
      DevopsClient.serviceEndpointTemplate,
      regionId,
      DevopsClient.endpointServiceName
    );
  }

  /**
   * Creates a new DevopsWaiter for resources for this service.
   *
   * @param config The waiter configuration for termination and delay strategy
   * @return The service waiters.
   */
  public createWaiters(config?: common.WaiterConfiguration): DevopsWaiter {
    this._waiters = new DevopsWaiter(this, config);
    return this._waiters;
  }

  /**
   * Gets the waiters available for resources for this service.
   *
   * @return The service waiters.
   */
  public getWaiters(): DevopsWaiter {
    if (this._waiters) {
      return this._waiters;
    }
    throw Error("Waiters do not exist. Please create waiters.");
  }

  /**
   * Submit stage approval.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ApproveDeploymentRequest
   * @return ApproveDeploymentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/ApproveDeployment.ts.html |here} to see how to use ApproveDeployment API.
   */
  public async approveDeployment(
    approveDeploymentRequest: requests.ApproveDeploymentRequest
  ): Promise<responses.ApproveDeploymentResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#approveDeployment.");
    const operationName = "approveDeployment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Deployment/ApproveDeployment";
    const pathParams = {
      "{deploymentId}": approveDeploymentRequest.deploymentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": approveDeploymentRequest.ifMatch,
      "opc-request-id": approveDeploymentRequest.opcRequestId,
      "opc-retry-token": approveDeploymentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      approveDeploymentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments/{deploymentId}/actions/approve",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        approveDeploymentRequest.approveDeploymentDetails,
        "ApproveDeploymentDetails",
        model.ApproveDeploymentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ApproveDeploymentResponse>{},
        body: await response.json(),
        bodyKey: "deployment",
        bodyModel: model.Deployment,
        type: "model.Deployment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Cancels the build run based on the build run ID provided in the request.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CancelBuildRunRequest
   * @return CancelBuildRunResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/CancelBuildRun.ts.html |here} to see how to use CancelBuildRun API.
   */
  public async cancelBuildRun(
    cancelBuildRunRequest: requests.CancelBuildRunRequest
  ): Promise<responses.CancelBuildRunResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#cancelBuildRun.");
    const operationName = "cancelBuildRun";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/BuildRun/CancelBuildRun";
    const pathParams = {
      "{buildRunId}": cancelBuildRunRequest.buildRunId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": cancelBuildRunRequest.ifMatch,
      "opc-request-id": cancelBuildRunRequest.opcRequestId,
      "opc-retry-token": cancelBuildRunRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      cancelBuildRunRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/buildRuns/{buildRunId}/actions/cancel",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        cancelBuildRunRequest.cancelBuildRunDetails,
        "CancelBuildRunDetails",
        model.CancelBuildRunDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CancelBuildRunResponse>{},
        body: await response.json(),
        bodyKey: "buildRun",
        bodyModel: model.BuildRun,
        type: "model.BuildRun",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Cancels a deployment resource by identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CancelDeploymentRequest
   * @return CancelDeploymentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/CancelDeployment.ts.html |here} to see how to use CancelDeployment API.
   */
  public async cancelDeployment(
    cancelDeploymentRequest: requests.CancelDeploymentRequest
  ): Promise<responses.CancelDeploymentResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#cancelDeployment.");
    const operationName = "cancelDeployment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Deployment/CancelDeployment";
    const pathParams = {
      "{deploymentId}": cancelDeploymentRequest.deploymentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": cancelDeploymentRequest.ifMatch,
      "opc-request-id": cancelDeploymentRequest.opcRequestId,
      "opc-retry-token": cancelDeploymentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      cancelDeploymentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments/{deploymentId}/actions/cancel",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        cancelDeploymentRequest.cancelDeploymentDetails,
        "CancelDeploymentDetails",
        model.CancelDeploymentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CancelDeploymentResponse>{},
        body: await response.json(),
        bodyKey: "deployment",
        bodyModel: model.Deployment,
        type: "model.Deployment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Moves a project resource from one compartment OCID to another.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ChangeProjectCompartmentRequest
   * @return ChangeProjectCompartmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/ChangeProjectCompartment.ts.html |here} to see how to use ChangeProjectCompartment API.
   */
  public async changeProjectCompartment(
    changeProjectCompartmentRequest: requests.ChangeProjectCompartmentRequest
  ): Promise<responses.ChangeProjectCompartmentResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#changeProjectCompartment.");
    const operationName = "changeProjectCompartment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Project/ChangeProjectCompartment";
    const pathParams = {
      "{projectId}": changeProjectCompartmentRequest.projectId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": changeProjectCompartmentRequest.ifMatch,
      "opc-request-id": changeProjectCompartmentRequest.opcRequestId,
      "opc-retry-token": changeProjectCompartmentRequest.opcRetryToken
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      changeProjectCompartmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/projects/{projectId}/actions/changeCompartment",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        changeProjectCompartmentRequest.changeProjectCompartmentDetails,
        "ChangeProjectCompartmentDetails",
        model.ChangeProjectCompartmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ChangeProjectCompartmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new build pipeline.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateBuildPipelineRequest
   * @return CreateBuildPipelineResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/CreateBuildPipeline.ts.html |here} to see how to use CreateBuildPipeline API.
   */
  public async createBuildPipeline(
    createBuildPipelineRequest: requests.CreateBuildPipelineRequest
  ): Promise<responses.CreateBuildPipelineResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#createBuildPipeline.");
    const operationName = "createBuildPipeline";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/BuildPipeline/CreateBuildPipeline";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createBuildPipelineRequest.opcRetryToken,
      "opc-request-id": createBuildPipelineRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createBuildPipelineRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/buildPipelines",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createBuildPipelineRequest.createBuildPipelineDetails,
        "CreateBuildPipelineDetails",
        model.CreateBuildPipelineDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateBuildPipelineResponse>{},
        body: await response.json(),
        bodyKey: "buildPipeline",
        bodyModel: model.BuildPipeline,
        type: "model.BuildPipeline",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new stage.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateBuildPipelineStageRequest
   * @return CreateBuildPipelineStageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/CreateBuildPipelineStage.ts.html |here} to see how to use CreateBuildPipelineStage API.
   */
  public async createBuildPipelineStage(
    createBuildPipelineStageRequest: requests.CreateBuildPipelineStageRequest
  ): Promise<responses.CreateBuildPipelineStageResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#createBuildPipelineStage.");
    const operationName = "createBuildPipelineStage";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/BuildPipelineStage/CreateBuildPipelineStage";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createBuildPipelineStageRequest.opcRetryToken,
      "opc-request-id": createBuildPipelineStageRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createBuildPipelineStageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/buildPipelineStages",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createBuildPipelineStageRequest.createBuildPipelineStageDetails,
        "CreateBuildPipelineStageDetails",
        model.CreateBuildPipelineStageDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateBuildPipelineStageResponse>{},
        body: await response.json(),
        bodyKey: "buildPipelineStage",
        bodyModel: model.BuildPipelineStage,
        type: "model.BuildPipelineStage",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Starts a build pipeline run for a predefined build pipeline.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateBuildRunRequest
   * @return CreateBuildRunResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/CreateBuildRun.ts.html |here} to see how to use CreateBuildRun API.
   */
  public async createBuildRun(
    createBuildRunRequest: requests.CreateBuildRunRequest
  ): Promise<responses.CreateBuildRunResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#createBuildRun.");
    const operationName = "createBuildRun";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/BuildRun/CreateBuildRun";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createBuildRunRequest.opcRetryToken,
      "opc-request-id": createBuildRunRequest.opcRequestId,
      "if-match": createBuildRunRequest.ifMatch
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createBuildRunRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/buildRuns",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createBuildRunRequest.createBuildRunDetails,
        "CreateBuildRunDetails",
        model.CreateBuildRunDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateBuildRunResponse>{},
        body: await response.json(),
        bodyKey: "buildRun",
        bodyModel: model.BuildRun,
        type: "model.BuildRun",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new connection.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateConnectionRequest
   * @return CreateConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/CreateConnection.ts.html |here} to see how to use CreateConnection API.
   */
  public async createConnection(
    createConnectionRequest: requests.CreateConnectionRequest
  ): Promise<responses.CreateConnectionResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#createConnection.");
    const operationName = "createConnection";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Connection/CreateConnection";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createConnectionRequest.opcRetryToken,
      "opc-request-id": createConnectionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createConnectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/connections",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createConnectionRequest.createConnectionDetails,
        "CreateConnectionDetails",
        model.CreateConnectionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateConnectionResponse>{},
        body: await response.json(),
        bodyKey: "connection",
        bodyModel: model.Connection,
        type: "model.Connection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new deployment artifact.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateDeployArtifactRequest
   * @return CreateDeployArtifactResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/CreateDeployArtifact.ts.html |here} to see how to use CreateDeployArtifact API.
   */
  public async createDeployArtifact(
    createDeployArtifactRequest: requests.CreateDeployArtifactRequest
  ): Promise<responses.CreateDeployArtifactResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#createDeployArtifact.");
    const operationName = "createDeployArtifact";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/DeployArtifact/CreateDeployArtifact";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDeployArtifactRequest.opcRetryToken,
      "opc-request-id": createDeployArtifactRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDeployArtifactRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployArtifacts",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDeployArtifactRequest.createDeployArtifactDetails,
        "CreateDeployArtifactDetails",
        model.CreateDeployArtifactDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDeployArtifactResponse>{},
        body: await response.json(),
        bodyKey: "deployArtifact",
        bodyModel: model.DeployArtifact,
        type: "model.DeployArtifact",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new deployment environment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateDeployEnvironmentRequest
   * @return CreateDeployEnvironmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/CreateDeployEnvironment.ts.html |here} to see how to use CreateDeployEnvironment API.
   */
  public async createDeployEnvironment(
    createDeployEnvironmentRequest: requests.CreateDeployEnvironmentRequest
  ): Promise<responses.CreateDeployEnvironmentResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#createDeployEnvironment.");
    const operationName = "createDeployEnvironment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/DeployEnvironment/CreateDeployEnvironment";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDeployEnvironmentRequest.opcRetryToken,
      "opc-request-id": createDeployEnvironmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDeployEnvironmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployEnvironments",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDeployEnvironmentRequest.createDeployEnvironmentDetails,
        "CreateDeployEnvironmentDetails",
        model.CreateDeployEnvironmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDeployEnvironmentResponse>{},
        body: await response.json(),
        bodyKey: "deployEnvironment",
        bodyModel: model.DeployEnvironment,
        type: "model.DeployEnvironment",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new deployment pipeline.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateDeployPipelineRequest
   * @return CreateDeployPipelineResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/CreateDeployPipeline.ts.html |here} to see how to use CreateDeployPipeline API.
   */
  public async createDeployPipeline(
    createDeployPipelineRequest: requests.CreateDeployPipelineRequest
  ): Promise<responses.CreateDeployPipelineResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#createDeployPipeline.");
    const operationName = "createDeployPipeline";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/DeployPipeline/CreateDeployPipeline";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDeployPipelineRequest.opcRetryToken,
      "opc-request-id": createDeployPipelineRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDeployPipelineRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployPipelines",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDeployPipelineRequest.createDeployPipelineDetails,
        "CreateDeployPipelineDetails",
        model.CreateDeployPipelineDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDeployPipelineResponse>{},
        body: await response.json(),
        bodyKey: "deployPipeline",
        bodyModel: model.DeployPipeline,
        type: "model.DeployPipeline",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new deployment stage.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateDeployStageRequest
   * @return CreateDeployStageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/CreateDeployStage.ts.html |here} to see how to use CreateDeployStage API.
   */
  public async createDeployStage(
    createDeployStageRequest: requests.CreateDeployStageRequest
  ): Promise<responses.CreateDeployStageResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#createDeployStage.");
    const operationName = "createDeployStage";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/DeployStage/CreateDeployStage";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDeployStageRequest.opcRetryToken,
      "opc-request-id": createDeployStageRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDeployStageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployStages",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDeployStageRequest.createDeployStageDetails,
        "CreateDeployStageDetails",
        model.CreateDeployStageDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDeployStageResponse>{},
        body: await response.json(),
        bodyKey: "deployStage",
        bodyModel: model.DeployStage,
        type: "model.DeployStage",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new deployment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateDeploymentRequest
   * @return CreateDeploymentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/CreateDeployment.ts.html |here} to see how to use CreateDeployment API.
   */
  public async createDeployment(
    createDeploymentRequest: requests.CreateDeploymentRequest
  ): Promise<responses.CreateDeploymentResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#createDeployment.");
    const operationName = "createDeployment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Deployment/CreateDeployment";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createDeploymentRequest.opcRetryToken,
      "opc-request-id": createDeploymentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createDeploymentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createDeploymentRequest.createDeploymentDetails,
        "CreateDeploymentDetails",
        model.CreateDeploymentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateDeploymentResponse>{},
        body: await response.json(),
        bodyKey: "deployment",
        bodyModel: model.Deployment,
        type: "model.Deployment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new project.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateProjectRequest
   * @return CreateProjectResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/CreateProject.ts.html |here} to see how to use CreateProject API.
   */
  public async createProject(
    createProjectRequest: requests.CreateProjectRequest
  ): Promise<responses.CreateProjectResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#createProject.");
    const operationName = "createProject";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Project/CreateProject";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createProjectRequest.opcRetryToken,
      "opc-request-id": createProjectRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createProjectRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/projects",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createProjectRequest.createProjectDetails,
        "CreateProjectDetails",
        model.CreateProjectDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateProjectResponse>{},
        body: await response.json(),
        bodyKey: "project",
        bodyModel: model.Project,
        type: "model.Project",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new repository.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateRepositoryRequest
   * @return CreateRepositoryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/CreateRepository.ts.html |here} to see how to use CreateRepository API.
   */
  public async createRepository(
    createRepositoryRequest: requests.CreateRepositoryRequest
  ): Promise<responses.CreateRepositoryResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#createRepository.");
    const operationName = "createRepository";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Repository/CreateRepository";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createRepositoryRequest.opcRetryToken,
      "opc-request-id": createRepositoryRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createRepositoryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/repositories",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createRepositoryRequest.createRepositoryDetails,
        "CreateRepositoryDetails",
        model.CreateRepositoryDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateRepositoryResponse>{},
        body: await response.json(),
        bodyKey: "repository",
        bodyModel: model.Repository,
        type: "model.Repository",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new trigger.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param CreateTriggerRequest
   * @return CreateTriggerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/CreateTrigger.ts.html |here} to see how to use CreateTrigger API.
   */
  public async createTrigger(
    createTriggerRequest: requests.CreateTriggerRequest
  ): Promise<responses.CreateTriggerResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#createTrigger.");
    const operationName = "createTrigger";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Trigger/CreateTrigger";
    const pathParams = {};

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-retry-token": createTriggerRequest.opcRetryToken,
      "opc-request-id": createTriggerRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      createTriggerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/triggers",
      method: "POST",
      bodyContent: common.ObjectSerializer.serialize(
        createTriggerRequest.createTriggerDetails,
        "CreateTriggerDetails",
        model.CreateTriggerDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.CreateTriggerResponse>{},
        body: await response.json(),
        bodyKey: "triggerCreateResult",
        bodyModel: model.TriggerCreateResult,
        type: "model.TriggerCreateResult",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a build pipeline resource by identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteBuildPipelineRequest
   * @return DeleteBuildPipelineResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/DeleteBuildPipeline.ts.html |here} to see how to use DeleteBuildPipeline API.
   */
  public async deleteBuildPipeline(
    deleteBuildPipelineRequest: requests.DeleteBuildPipelineRequest
  ): Promise<responses.DeleteBuildPipelineResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#deleteBuildPipeline.");
    const operationName = "deleteBuildPipeline";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/BuildPipeline/DeleteBuildPipeline";
    const pathParams = {
      "{buildPipelineId}": deleteBuildPipelineRequest.buildPipelineId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteBuildPipelineRequest.ifMatch,
      "opc-request-id": deleteBuildPipelineRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteBuildPipelineRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/buildPipelines/{buildPipelineId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteBuildPipelineResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a stage based on the stage ID provided in the request.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteBuildPipelineStageRequest
   * @return DeleteBuildPipelineStageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/DeleteBuildPipelineStage.ts.html |here} to see how to use DeleteBuildPipelineStage API.
   */
  public async deleteBuildPipelineStage(
    deleteBuildPipelineStageRequest: requests.DeleteBuildPipelineStageRequest
  ): Promise<responses.DeleteBuildPipelineStageResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#deleteBuildPipelineStage.");
    const operationName = "deleteBuildPipelineStage";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/BuildPipelineStage/DeleteBuildPipelineStage";
    const pathParams = {
      "{buildPipelineStageId}": deleteBuildPipelineStageRequest.buildPipelineStageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteBuildPipelineStageRequest.ifMatch,
      "opc-request-id": deleteBuildPipelineStageRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteBuildPipelineStageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/buildPipelineStages/{buildPipelineStageId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteBuildPipelineStageResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a connection resource by identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteConnectionRequest
   * @return DeleteConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/DeleteConnection.ts.html |here} to see how to use DeleteConnection API.
   */
  public async deleteConnection(
    deleteConnectionRequest: requests.DeleteConnectionRequest
  ): Promise<responses.DeleteConnectionResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#deleteConnection.");
    const operationName = "deleteConnection";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Connection/DeleteConnection";
    const pathParams = {
      "{connectionId}": deleteConnectionRequest.connectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteConnectionRequest.ifMatch,
      "opc-request-id": deleteConnectionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteConnectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/connections/{connectionId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteConnectionResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a deployment artifact resource by identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteDeployArtifactRequest
   * @return DeleteDeployArtifactResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/DeleteDeployArtifact.ts.html |here} to see how to use DeleteDeployArtifact API.
   */
  public async deleteDeployArtifact(
    deleteDeployArtifactRequest: requests.DeleteDeployArtifactRequest
  ): Promise<responses.DeleteDeployArtifactResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#deleteDeployArtifact.");
    const operationName = "deleteDeployArtifact";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/DeployArtifact/DeleteDeployArtifact";
    const pathParams = {
      "{deployArtifactId}": deleteDeployArtifactRequest.deployArtifactId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDeployArtifactRequest.ifMatch,
      "opc-request-id": deleteDeployArtifactRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDeployArtifactRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployArtifacts/{deployArtifactId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDeployArtifactResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a deployment environment resource by identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteDeployEnvironmentRequest
   * @return DeleteDeployEnvironmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/DeleteDeployEnvironment.ts.html |here} to see how to use DeleteDeployEnvironment API.
   */
  public async deleteDeployEnvironment(
    deleteDeployEnvironmentRequest: requests.DeleteDeployEnvironmentRequest
  ): Promise<responses.DeleteDeployEnvironmentResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#deleteDeployEnvironment.");
    const operationName = "deleteDeployEnvironment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/DeployEnvironment/DeleteDeployEnvironment";
    const pathParams = {
      "{deployEnvironmentId}": deleteDeployEnvironmentRequest.deployEnvironmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDeployEnvironmentRequest.ifMatch,
      "opc-request-id": deleteDeployEnvironmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDeployEnvironmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployEnvironments/{deployEnvironmentId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDeployEnvironmentResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a deployment pipeline resource by identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteDeployPipelineRequest
   * @return DeleteDeployPipelineResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/DeleteDeployPipeline.ts.html |here} to see how to use DeleteDeployPipeline API.
   */
  public async deleteDeployPipeline(
    deleteDeployPipelineRequest: requests.DeleteDeployPipelineRequest
  ): Promise<responses.DeleteDeployPipelineResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#deleteDeployPipeline.");
    const operationName = "deleteDeployPipeline";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/DeployPipeline/DeleteDeployPipeline";
    const pathParams = {
      "{deployPipelineId}": deleteDeployPipelineRequest.deployPipelineId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDeployPipelineRequest.ifMatch,
      "opc-request-id": deleteDeployPipelineRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDeployPipelineRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployPipelines/{deployPipelineId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDeployPipelineResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a deployment stage resource by identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteDeployStageRequest
   * @return DeleteDeployStageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/DeleteDeployStage.ts.html |here} to see how to use DeleteDeployStage API.
   */
  public async deleteDeployStage(
    deleteDeployStageRequest: requests.DeleteDeployStageRequest
  ): Promise<responses.DeleteDeployStageResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#deleteDeployStage.");
    const operationName = "deleteDeployStage";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/DeployStage/DeleteDeployStage";
    const pathParams = {
      "{deployStageId}": deleteDeployStageRequest.deployStageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteDeployStageRequest.ifMatch,
      "opc-request-id": deleteDeployStageRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteDeployStageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployStages/{deployStageId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteDeployStageResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a project resource by identifier
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteProjectRequest
   * @return DeleteProjectResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/DeleteProject.ts.html |here} to see how to use DeleteProject API.
   */
  public async deleteProject(
    deleteProjectRequest: requests.DeleteProjectRequest
  ): Promise<responses.DeleteProjectResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#deleteProject.");
    const operationName = "deleteProject";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Project/DeleteProject";
    const pathParams = {
      "{projectId}": deleteProjectRequest.projectId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteProjectRequest.ifMatch,
      "opc-request-id": deleteProjectRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteProjectRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/projects/{projectId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteProjectResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a Repository's Ref by its name. Returns an error if the name is ambiguous. Can be disambiguated by using full names like \"heads/<name>\" or \"tags/<name>\".
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteRefRequest
   * @return DeleteRefResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/DeleteRef.ts.html |here} to see how to use DeleteRef API.
   */
  public async deleteRef(
    deleteRefRequest: requests.DeleteRefRequest
  ): Promise<responses.DeleteRefResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#deleteRef.");
    const operationName = "deleteRef";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Repository/DeleteRef";
    const pathParams = {
      "{repositoryId}": deleteRefRequest.repositoryId,
      "{refName}": deleteRefRequest.refName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteRefRequest.ifMatch,
      "opc-retry-token": deleteRefRequest.opcRetryToken,
      "opc-request-id": deleteRefRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteRefRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/repositories/{repositoryId}/refs/{refName}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteRefResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a repository resource by identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteRepositoryRequest
   * @return DeleteRepositoryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/DeleteRepository.ts.html |here} to see how to use DeleteRepository API.
   */
  public async deleteRepository(
    deleteRepositoryRequest: requests.DeleteRepositoryRequest
  ): Promise<responses.DeleteRepositoryResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#deleteRepository.");
    const operationName = "deleteRepository";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Repository/DeleteRepository";
    const pathParams = {
      "{repositoryId}": deleteRepositoryRequest.repositoryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteRepositoryRequest.ifMatch,
      "opc-request-id": deleteRepositoryRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteRepositoryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/repositories/{repositoryId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteRepositoryResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Deletes a trigger resource by identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param DeleteTriggerRequest
   * @return DeleteTriggerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/DeleteTrigger.ts.html |here} to see how to use DeleteTrigger API.
   */
  public async deleteTrigger(
    deleteTriggerRequest: requests.DeleteTriggerRequest
  ): Promise<responses.DeleteTriggerResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#deleteTrigger.");
    const operationName = "deleteTrigger";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Trigger/DeleteTrigger";
    const pathParams = {
      "{triggerId}": deleteTriggerRequest.triggerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": deleteTriggerRequest.ifMatch,
      "opc-request-id": deleteTriggerRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      deleteTriggerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/triggers/{triggerId}",
      method: "DELETE",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.DeleteTriggerResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a build pipeline by identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetBuildPipelineRequest
   * @return GetBuildPipelineResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/GetBuildPipeline.ts.html |here} to see how to use GetBuildPipeline API.
   */
  public async getBuildPipeline(
    getBuildPipelineRequest: requests.GetBuildPipelineRequest
  ): Promise<responses.GetBuildPipelineResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#getBuildPipeline.");
    const operationName = "getBuildPipeline";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/BuildPipeline/GetBuildPipeline";
    const pathParams = {
      "{buildPipelineId}": getBuildPipelineRequest.buildPipelineId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getBuildPipelineRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getBuildPipelineRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/buildPipelines/{buildPipelineId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetBuildPipelineResponse>{},
        body: await response.json(),
        bodyKey: "buildPipeline",
        bodyModel: model.BuildPipeline,
        type: "model.BuildPipeline",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a stage based on the stage ID provided in the request.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetBuildPipelineStageRequest
   * @return GetBuildPipelineStageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/GetBuildPipelineStage.ts.html |here} to see how to use GetBuildPipelineStage API.
   */
  public async getBuildPipelineStage(
    getBuildPipelineStageRequest: requests.GetBuildPipelineStageRequest
  ): Promise<responses.GetBuildPipelineStageResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#getBuildPipelineStage.");
    const operationName = "getBuildPipelineStage";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/BuildPipelineStage/GetBuildPipelineStage";
    const pathParams = {
      "{buildPipelineStageId}": getBuildPipelineStageRequest.buildPipelineStageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getBuildPipelineStageRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getBuildPipelineStageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/buildPipelineStages/{buildPipelineStageId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetBuildPipelineStageResponse>{},
        body: await response.json(),
        bodyKey: "buildPipelineStage",
        bodyModel: model.BuildPipelineStage,
        type: "model.BuildPipelineStage",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the details of a build run for a given build run ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetBuildRunRequest
   * @return GetBuildRunResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/GetBuildRun.ts.html |here} to see how to use GetBuildRun API.
   */
  public async getBuildRun(
    getBuildRunRequest: requests.GetBuildRunRequest
  ): Promise<responses.GetBuildRunResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#getBuildRun.");
    const operationName = "getBuildRun";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/BuildRun/GetBuildRun";
    const pathParams = {
      "{buildRunId}": getBuildRunRequest.buildRunId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getBuildRunRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getBuildRunRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/buildRuns/{buildRunId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetBuildRunResponse>{},
        body: await response.json(),
        bodyKey: "buildRun",
        bodyModel: model.BuildRun,
        type: "model.BuildRun",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a repository's commit by commit ID.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetCommitRequest
   * @return GetCommitResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/GetCommit.ts.html |here} to see how to use GetCommit API.
   */
  public async getCommit(
    getCommitRequest: requests.GetCommitRequest
  ): Promise<responses.GetCommitResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#getCommit.");
    const operationName = "getCommit";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Repository/GetCommit";
    const pathParams = {
      "{repositoryId}": getCommitRequest.repositoryId,
      "{commitId}": getCommitRequest.commitId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getCommitRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getCommitRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/repositories/{repositoryId}/commits/{commitId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCommitResponse>{},
        body: await response.json(),
        bodyKey: "repositoryCommit",
        bodyModel: model.RepositoryCommit,
        type: "model.RepositoryCommit",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Compares two revisions for their differences. Supports comparison between two references or commits.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetCommitDiffRequest
   * @return GetCommitDiffResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/GetCommitDiff.ts.html |here} to see how to use GetCommitDiff API.
   */
  public async getCommitDiff(
    getCommitDiffRequest: requests.GetCommitDiffRequest
  ): Promise<responses.GetCommitDiffResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#getCommitDiff.");
    const operationName = "getCommitDiff";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Repository/GetCommitDiff";
    const pathParams = {
      "{repositoryId}": getCommitDiffRequest.repositoryId
    };

    const queryParams = {
      "baseVersion": getCommitDiffRequest.baseVersion,
      "targetVersion": getCommitDiffRequest.targetVersion,
      "isComparisonFromMergeBase": getCommitDiffRequest.isComparisonFromMergeBase
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getCommitDiffRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getCommitDiffRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/repositories/{repositoryId}/diff",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetCommitDiffResponse>{},
        body: await response.json(),
        bodyKey: "diffResponse",
        bodyModel: model.DiffResponse,
        type: "model.DiffResponse",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a connection by identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetConnectionRequest
   * @return GetConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/GetConnection.ts.html |here} to see how to use GetConnection API.
   */
  public async getConnection(
    getConnectionRequest: requests.GetConnectionRequest
  ): Promise<responses.GetConnectionResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#getConnection.");
    const operationName = "getConnection";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Connection/GetConnection";
    const pathParams = {
      "{connectionId}": getConnectionRequest.connectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getConnectionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getConnectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/connections/{connectionId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetConnectionResponse>{},
        body: await response.json(),
        bodyKey: "connection",
        bodyModel: model.Connection,
        type: "model.Connection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a deployment artifact by identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDeployArtifactRequest
   * @return GetDeployArtifactResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/GetDeployArtifact.ts.html |here} to see how to use GetDeployArtifact API.
   */
  public async getDeployArtifact(
    getDeployArtifactRequest: requests.GetDeployArtifactRequest
  ): Promise<responses.GetDeployArtifactResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#getDeployArtifact.");
    const operationName = "getDeployArtifact";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/DeployArtifact/GetDeployArtifact";
    const pathParams = {
      "{deployArtifactId}": getDeployArtifactRequest.deployArtifactId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDeployArtifactRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDeployArtifactRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployArtifacts/{deployArtifactId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDeployArtifactResponse>{},
        body: await response.json(),
        bodyKey: "deployArtifact",
        bodyModel: model.DeployArtifact,
        type: "model.DeployArtifact",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a deployment environment by identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDeployEnvironmentRequest
   * @return GetDeployEnvironmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/GetDeployEnvironment.ts.html |here} to see how to use GetDeployEnvironment API.
   */
  public async getDeployEnvironment(
    getDeployEnvironmentRequest: requests.GetDeployEnvironmentRequest
  ): Promise<responses.GetDeployEnvironmentResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#getDeployEnvironment.");
    const operationName = "getDeployEnvironment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/DeployEnvironment/GetDeployEnvironment";
    const pathParams = {
      "{deployEnvironmentId}": getDeployEnvironmentRequest.deployEnvironmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDeployEnvironmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDeployEnvironmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployEnvironments/{deployEnvironmentId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDeployEnvironmentResponse>{},
        body: await response.json(),
        bodyKey: "deployEnvironment",
        bodyModel: model.DeployEnvironment,
        type: "model.DeployEnvironment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a deployment pipeline by identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDeployPipelineRequest
   * @return GetDeployPipelineResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/GetDeployPipeline.ts.html |here} to see how to use GetDeployPipeline API.
   */
  public async getDeployPipeline(
    getDeployPipelineRequest: requests.GetDeployPipelineRequest
  ): Promise<responses.GetDeployPipelineResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#getDeployPipeline.");
    const operationName = "getDeployPipeline";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/DeployPipeline/GetDeployPipeline";
    const pathParams = {
      "{deployPipelineId}": getDeployPipelineRequest.deployPipelineId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDeployPipelineRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDeployPipelineRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployPipelines/{deployPipelineId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDeployPipelineResponse>{},
        body: await response.json(),
        bodyKey: "deployPipeline",
        bodyModel: model.DeployPipeline,
        type: "model.DeployPipeline",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a deployment stage by identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDeployStageRequest
   * @return GetDeployStageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/GetDeployStage.ts.html |here} to see how to use GetDeployStage API.
   */
  public async getDeployStage(
    getDeployStageRequest: requests.GetDeployStageRequest
  ): Promise<responses.GetDeployStageResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#getDeployStage.");
    const operationName = "getDeployStage";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/DeployStage/GetDeployStage";
    const pathParams = {
      "{deployStageId}": getDeployStageRequest.deployStageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDeployStageRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDeployStageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployStages/{deployStageId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDeployStageResponse>{},
        body: await response.json(),
        bodyKey: "deployStage",
        bodyModel: model.DeployStage,
        type: "model.DeployStage",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a deployment by identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetDeploymentRequest
   * @return GetDeploymentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/GetDeployment.ts.html |here} to see how to use GetDeployment API.
   */
  public async getDeployment(
    getDeploymentRequest: requests.GetDeploymentRequest
  ): Promise<responses.GetDeploymentResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#getDeployment.");
    const operationName = "getDeployment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Deployment/GetDeployment";
    const pathParams = {
      "{deploymentId}": getDeploymentRequest.deploymentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getDeploymentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getDeploymentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments/{deploymentId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetDeploymentResponse>{},
        body: await response.json(),
        bodyKey: "deployment",
        bodyModel: model.Deployment,
        type: "model.Deployment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the line-by-line difference between file on different commits. This API will be deprecated on Wed, 29 Mar 2023 01:00:00 GMT as it does not get recognized when filePath has '/'. This will be replaced by \"/repositories/{repositoryId}/file/diffs\"
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetFileDiffRequest
   * @return GetFileDiffResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/GetFileDiff.ts.html |here} to see how to use GetFileDiff API.
   */
  public async getFileDiff(
    getFileDiffRequest: requests.GetFileDiffRequest
  ): Promise<responses.GetFileDiffResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#getFileDiff.");
    const operationName = "getFileDiff";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Repository/GetFileDiff";
    const pathParams = {
      "{repositoryId}": getFileDiffRequest.repositoryId,
      "{filePath}": getFileDiffRequest.filePath
    };

    const queryParams = {
      "baseVersion": getFileDiffRequest.baseVersion,
      "targetVersion": getFileDiffRequest.targetVersion,
      "isComparisonFromMergeBase": getFileDiffRequest.isComparisonFromMergeBase
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getFileDiffRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getFileDiffRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/repositories/{repositoryId}/diffs/{filePath}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetFileDiffResponse>{},
        body: await response.json(),
        bodyKey: "fileDiffResponse",
        bodyModel: model.FileDiffResponse,
        type: "model.FileDiffResponse",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("Sunset"),
            key: "sunset",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns either current mirror record or last successful mirror record for a specific mirror repository.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetMirrorRecordRequest
   * @return GetMirrorRecordResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/GetMirrorRecord.ts.html |here} to see how to use GetMirrorRecord API.
   */
  public async getMirrorRecord(
    getMirrorRecordRequest: requests.GetMirrorRecordRequest
  ): Promise<responses.GetMirrorRecordResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#getMirrorRecord.");
    const operationName = "getMirrorRecord";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Repository/GetMirrorRecord";
    const pathParams = {
      "{repositoryId}": getMirrorRecordRequest.repositoryId,
      "{mirrorRecordType}": getMirrorRecordRequest.mirrorRecordType
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getMirrorRecordRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getMirrorRecordRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/repositories/{repositoryId}/mirrorRecords/{mirrorRecordType}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetMirrorRecordResponse>{},
        body: await response.json(),
        bodyKey: "repositoryMirrorRecord",
        bodyModel: model.RepositoryMirrorRecord,
        type: "model.RepositoryMirrorRecord",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves blob of specific branch name/commit ID and file path.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetObjectRequest
   * @return GetObjectResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/GetObject.ts.html |here} to see how to use GetObject API.
   */
  public async getObject(
    getObjectRequest: requests.GetObjectRequest
  ): Promise<responses.GetObjectResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#getObject.");
    const operationName = "getObject";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/RepositoryObject/GetObject";
    const pathParams = {
      "{repositoryId}": getObjectRequest.repositoryId
    };

    const queryParams = {
      "filePath": getObjectRequest.filePath,
      "refName": getObjectRequest.refName
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getObjectRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getObjectRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/repositories/{repositoryId}/object",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetObjectResponse>{},
        body: await response.json(),
        bodyKey: "repositoryObject",
        bodyModel: model.RepositoryObject,
        type: "model.RepositoryObject",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieve contents of a specified object.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetObjectContentRequest
   * @return GetObjectContentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/GetObjectContent.ts.html |here} to see how to use GetObjectContent API.
   */
  public async getObjectContent(
    getObjectContentRequest: requests.GetObjectContentRequest
  ): Promise<responses.GetObjectContentResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#getObjectContent.");
    const operationName = "getObjectContent";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Repository/GetObjectContent";
    const pathParams = {
      "{repositoryId}": getObjectContentRequest.repositoryId,
      "{sha}": getObjectContentRequest.sha
    };

    const queryParams = {
      "filePath": getObjectContentRequest.filePath
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getObjectContentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getObjectContentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/repositories/{repositoryId}/objects/{sha}/content",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetObjectContentResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("Content-Type"),
            key: "contentType",
            dataType: "string"
          },
          {
            value: response.headers.get("Content-Disposition"),
            key: "contentDisposition",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a project by identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetProjectRequest
   * @return GetProjectResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/GetProject.ts.html |here} to see how to use GetProject API.
   */
  public async getProject(
    getProjectRequest: requests.GetProjectRequest
  ): Promise<responses.GetProjectResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#getProject.");
    const operationName = "getProject";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Project/GetProject";
    const pathParams = {
      "{projectId}": getProjectRequest.projectId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getProjectRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getProjectRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/projects/{projectId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetProjectResponse>{},
        body: await response.json(),
        bodyKey: "project",
        bodyModel: model.Project,
        type: "model.Project",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a repository's reference by its name with preference for branches over tags if the name is ambiguous. This can be disambiguated by using full names like \"heads/<name>\" or \"tags/<name>\".
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetRefRequest
   * @return GetRefResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/GetRef.ts.html |here} to see how to use GetRef API.
   */
  public async getRef(getRefRequest: requests.GetRefRequest): Promise<responses.GetRefResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#getRef.");
    const operationName = "getRef";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Repository/GetRef";
    const pathParams = {
      "{repositoryId}": getRefRequest.repositoryId,
      "{refName}": getRefRequest.refName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getRefRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getRefRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/repositories/{repositoryId}/refs/{refName}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetRefResponse>{},
        body: await response.json(),
        bodyKey: "repositoryRef",
        bodyModel: model.RepositoryRef,
        type: "model.RepositoryRef",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Gets the line-by-line difference between file on different commits.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetRepoFileDiffRequest
   * @return GetRepoFileDiffResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/GetRepoFileDiff.ts.html |here} to see how to use GetRepoFileDiff API.
   */
  public async getRepoFileDiff(
    getRepoFileDiffRequest: requests.GetRepoFileDiffRequest
  ): Promise<responses.GetRepoFileDiffResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#getRepoFileDiff.");
    const operationName = "getRepoFileDiff";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Repository/GetRepoFileDiff";
    const pathParams = {
      "{repositoryId}": getRepoFileDiffRequest.repositoryId
    };

    const queryParams = {
      "filePath": getRepoFileDiffRequest.filePath,
      "baseVersion": getRepoFileDiffRequest.baseVersion,
      "targetVersion": getRepoFileDiffRequest.targetVersion,
      "isComparisonFromMergeBase": getRepoFileDiffRequest.isComparisonFromMergeBase
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getRepoFileDiffRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getRepoFileDiffRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/repositories/{repositoryId}/file/diffs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetRepoFileDiffResponse>{},
        body: await response.json(),
        bodyKey: "fileDiffResponse",
        bodyModel: model.FileDiffResponse,
        type: "model.FileDiffResponse",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieve lines of a specified file. Supports starting line number and limit.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetRepoFileLinesRequest
   * @return GetRepoFileLinesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/GetRepoFileLines.ts.html |here} to see how to use GetRepoFileLines API.
   */
  public async getRepoFileLines(
    getRepoFileLinesRequest: requests.GetRepoFileLinesRequest
  ): Promise<responses.GetRepoFileLinesResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#getRepoFileLines.");
    const operationName = "getRepoFileLines";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Repository/GetRepoFileLines";
    const pathParams = {
      "{repositoryId}": getRepoFileLinesRequest.repositoryId
    };

    const queryParams = {
      "filePath": getRepoFileLinesRequest.filePath,
      "revision": getRepoFileLinesRequest.revision,
      "startLineNumber": getRepoFileLinesRequest.startLineNumber,
      "limit": getRepoFileLinesRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getRepoFileLinesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getRepoFileLinesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/repositories/{repositoryId}/file/lines",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetRepoFileLinesResponse>{},
        body: await response.json(),
        bodyKey: "repositoryFileLines",
        bodyModel: model.RepositoryFileLines,
        type: "model.RepositoryFileLines",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a repository by identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetRepositoryRequest
   * @return GetRepositoryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/GetRepository.ts.html |here} to see how to use GetRepository API.
   */
  public async getRepository(
    getRepositoryRequest: requests.GetRepositoryRequest
  ): Promise<responses.GetRepositoryResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#getRepository.");
    const operationName = "getRepository";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Repository/GetRepository";
    const pathParams = {
      "{repositoryId}": getRepositoryRequest.repositoryId
    };

    const queryParams = {
      "fields": getRepositoryRequest.fields
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getRepositoryRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getRepositoryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/repositories/{repositoryId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetRepositoryResponse>{},
        body: await response.json(),
        bodyKey: "repository",
        bodyModel: model.Repository,
        type: "model.Repository",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns the archived repository information.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetRepositoryArchiveContentRequest
   * @return GetRepositoryArchiveContentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/GetRepositoryArchiveContent.ts.html |here} to see how to use GetRepositoryArchiveContent API.
   */
  public async getRepositoryArchiveContent(
    getRepositoryArchiveContentRequest: requests.GetRepositoryArchiveContentRequest
  ): Promise<responses.GetRepositoryArchiveContentResponse> {
    if (this.logger)
      this.logger.debug("Calling operation DevopsClient#getRepositoryArchiveContent.");
    const operationName = "getRepositoryArchiveContent";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Repository/GetRepositoryArchiveContent";
    const pathParams = {
      "{repositoryId}": getRepositoryArchiveContentRequest.repositoryId
    };

    const queryParams = {
      "refName": getRepositoryArchiveContentRequest.refName,
      "format": getRepositoryArchiveContentRequest.format
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getRepositoryArchiveContentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getRepositoryArchiveContentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/repositories/{repositoryId}/archive/content",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetRepositoryArchiveContentResponse>{},

        body: response.body!,
        bodyKey: "value",
        bodyModel: "string",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("Content-Type"),
            key: "contentType",
            dataType: "string"
          },
          {
            value: response.headers.get("Content-Disposition"),
            key: "contentDisposition",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieve lines of a specified file. Supports starting line number and limit. This API will be deprecated on Wed, 29 Mar 2023 01:00:00 GMT as it does not get recognized when filePath has '/'. This will be replaced by \"/repositories/{repositoryId}/file/lines\"
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetRepositoryFileLinesRequest
   * @return GetRepositoryFileLinesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/GetRepositoryFileLines.ts.html |here} to see how to use GetRepositoryFileLines API.
   */
  public async getRepositoryFileLines(
    getRepositoryFileLinesRequest: requests.GetRepositoryFileLinesRequest
  ): Promise<responses.GetRepositoryFileLinesResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#getRepositoryFileLines.");
    const operationName = "getRepositoryFileLines";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Repository/GetRepositoryFileLines";
    const pathParams = {
      "{repositoryId}": getRepositoryFileLinesRequest.repositoryId,
      "{filePath}": getRepositoryFileLinesRequest.filePath
    };

    const queryParams = {
      "revision": getRepositoryFileLinesRequest.revision,
      "startLineNumber": getRepositoryFileLinesRequest.startLineNumber,
      "limit": getRepositoryFileLinesRequest.limit
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getRepositoryFileLinesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getRepositoryFileLinesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/repositories/{repositoryId}/files/{filePath}/lines",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetRepositoryFileLinesResponse>{},
        body: await response.json(),
        bodyKey: "repositoryFileLines",
        bodyModel: model.RepositoryFileLines,
        type: "model.RepositoryFileLines",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("Sunset"),
            key: "sunset",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a trigger by identifier.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetTriggerRequest
   * @return GetTriggerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/GetTrigger.ts.html |here} to see how to use GetTrigger API.
   */
  public async getTrigger(
    getTriggerRequest: requests.GetTriggerRequest
  ): Promise<responses.GetTriggerResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#getTrigger.");
    const operationName = "getTrigger";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Trigger/GetTrigger";
    const pathParams = {
      "{triggerId}": getTriggerRequest.triggerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getTriggerRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getTriggerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/triggers/{triggerId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetTriggerResponse>{},
        body: await response.json(),
        bodyKey: "trigger",
        bodyModel: model.Trigger,
        type: "model.Trigger",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves the status of the work request with the given ID.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param GetWorkRequestRequest
   * @return GetWorkRequestResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
   */
  public async getWorkRequest(
    getWorkRequestRequest: requests.GetWorkRequestRequest
  ): Promise<responses.GetWorkRequestResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#getWorkRequest.");
    const operationName = "getWorkRequest";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/WorkRequest/GetWorkRequest";
    const pathParams = {
      "{workRequestId}": getWorkRequestRequest.workRequestId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": getWorkRequestRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      getWorkRequestRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.GetWorkRequestResponse>{},
        body: await response.json(),
        bodyKey: "workRequest",
        bodyModel: model.WorkRequest,
        type: "model.WorkRequest",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("retry-after"),
            key: "retryAfter",
            dataType: "number"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieve a list of all the authors.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListAuthorsRequest
   * @return ListAuthorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/ListAuthors.ts.html |here} to see how to use ListAuthors API.
   */
  public async listAuthors(
    listAuthorsRequest: requests.ListAuthorsRequest
  ): Promise<responses.ListAuthorsResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#listAuthors.");
    const operationName = "listAuthors";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Repository/ListAuthors";
    const pathParams = {
      "{repositoryId}": listAuthorsRequest.repositoryId
    };

    const queryParams = {
      "refName": listAuthorsRequest.refName,
      "limit": listAuthorsRequest.limit,
      "page": listAuthorsRequest.page,
      "sortOrder": listAuthorsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listAuthorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listAuthorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/repositories/{repositoryId}/authors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListAuthorsResponse>{},
        body: await response.json(),
        bodyKey: "repositoryAuthorCollection",
        bodyModel: model.RepositoryAuthorCollection,
        type: "model.RepositoryAuthorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of all stages in a compartment or build pipeline.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListBuildPipelineStagesRequest
   * @return ListBuildPipelineStagesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/ListBuildPipelineStages.ts.html |here} to see how to use ListBuildPipelineStages API.
   */
  public async listBuildPipelineStages(
    listBuildPipelineStagesRequest: requests.ListBuildPipelineStagesRequest
  ): Promise<responses.ListBuildPipelineStagesResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#listBuildPipelineStages.");
    const operationName = "listBuildPipelineStages";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/BuildPipelineStageSummary/ListBuildPipelineStages";
    const pathParams = {};

    const queryParams = {
      "id": listBuildPipelineStagesRequest.id,
      "buildPipelineId": listBuildPipelineStagesRequest.buildPipelineId,
      "compartmentId": listBuildPipelineStagesRequest.compartmentId,
      "lifecycleState": listBuildPipelineStagesRequest.lifecycleState,
      "displayName": listBuildPipelineStagesRequest.displayName,
      "limit": listBuildPipelineStagesRequest.limit,
      "page": listBuildPipelineStagesRequest.page,
      "sortOrder": listBuildPipelineStagesRequest.sortOrder,
      "sortBy": listBuildPipelineStagesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listBuildPipelineStagesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listBuildPipelineStagesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/buildPipelineStages",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListBuildPipelineStagesResponse>{},
        body: await response.json(),
        bodyKey: "buildPipelineStageCollection",
        bodyModel: model.BuildPipelineStageCollection,
        type: "model.BuildPipelineStageCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of build pipelines.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListBuildPipelinesRequest
   * @return ListBuildPipelinesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/ListBuildPipelines.ts.html |here} to see how to use ListBuildPipelines API.
   */
  public async listBuildPipelines(
    listBuildPipelinesRequest: requests.ListBuildPipelinesRequest
  ): Promise<responses.ListBuildPipelinesResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#listBuildPipelines.");
    const operationName = "listBuildPipelines";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/BuildPipelineCollection/ListBuildPipelines";
    const pathParams = {};

    const queryParams = {
      "id": listBuildPipelinesRequest.id,
      "projectId": listBuildPipelinesRequest.projectId,
      "compartmentId": listBuildPipelinesRequest.compartmentId,
      "lifecycleState": listBuildPipelinesRequest.lifecycleState,
      "displayName": listBuildPipelinesRequest.displayName,
      "limit": listBuildPipelinesRequest.limit,
      "page": listBuildPipelinesRequest.page,
      "sortOrder": listBuildPipelinesRequest.sortOrder,
      "sortBy": listBuildPipelinesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listBuildPipelinesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listBuildPipelinesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/buildPipelines",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListBuildPipelinesResponse>{},
        body: await response.json(),
        bodyKey: "buildPipelineCollection",
        bodyModel: model.BuildPipelineCollection,
        type: "model.BuildPipelineCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of build run summary.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListBuildRunsRequest
   * @return ListBuildRunsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/ListBuildRuns.ts.html |here} to see how to use ListBuildRuns API.
   */
  public async listBuildRuns(
    listBuildRunsRequest: requests.ListBuildRunsRequest
  ): Promise<responses.ListBuildRunsResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#listBuildRuns.");
    const operationName = "listBuildRuns";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/BuildRunSummary/ListBuildRuns";
    const pathParams = {};

    const queryParams = {
      "id": listBuildRunsRequest.id,
      "buildPipelineId": listBuildRunsRequest.buildPipelineId,
      "projectId": listBuildRunsRequest.projectId,
      "compartmentId": listBuildRunsRequest.compartmentId,
      "displayName": listBuildRunsRequest.displayName,
      "lifecycleState": listBuildRunsRequest.lifecycleState,
      "limit": listBuildRunsRequest.limit,
      "page": listBuildRunsRequest.page,
      "sortOrder": listBuildRunsRequest.sortOrder,
      "sortBy": listBuildRunsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listBuildRunsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listBuildRunsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/buildRuns",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListBuildRunsResponse>{},
        body: await response.json(),
        bodyKey: "buildRunSummaryCollection",
        bodyModel: model.BuildRunSummaryCollection,
        type: "model.BuildRunSummaryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Compares two revisions and lists the differences. Supports comparison between two references or commits.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListCommitDiffsRequest
   * @return ListCommitDiffsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/ListCommitDiffs.ts.html |here} to see how to use ListCommitDiffs API.
   */
  public async listCommitDiffs(
    listCommitDiffsRequest: requests.ListCommitDiffsRequest
  ): Promise<responses.ListCommitDiffsResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#listCommitDiffs.");
    const operationName = "listCommitDiffs";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Repository/ListCommitDiffs";
    const pathParams = {
      "{repositoryId}": listCommitDiffsRequest.repositoryId
    };

    const queryParams = {
      "baseVersion": listCommitDiffsRequest.baseVersion,
      "targetVersion": listCommitDiffsRequest.targetVersion,
      "isComparisonFromMergeBase": listCommitDiffsRequest.isComparisonFromMergeBase,
      "limit": listCommitDiffsRequest.limit,
      "page": listCommitDiffsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listCommitDiffsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listCommitDiffsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/repositories/{repositoryId}/diffs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListCommitDiffsResponse>{},
        body: await response.json(),
        bodyKey: "diffCollection",
        bodyModel: model.DiffCollection,
        type: "model.DiffCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of commits.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListCommitsRequest
   * @return ListCommitsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/ListCommits.ts.html |here} to see how to use ListCommits API.
   */
  public async listCommits(
    listCommitsRequest: requests.ListCommitsRequest
  ): Promise<responses.ListCommitsResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#listCommits.");
    const operationName = "listCommits";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/RepositoryCommit/ListCommits";
    const pathParams = {
      "{repositoryId}": listCommitsRequest.repositoryId
    };

    const queryParams = {
      "refName": listCommitsRequest.refName,
      "excludeRefName": listCommitsRequest.excludeRefName,
      "filePath": listCommitsRequest.filePath,
      "timestampGreaterThanOrEqualTo": listCommitsRequest.timestampGreaterThanOrEqualTo,
      "timestampLessThanOrEqualTo": listCommitsRequest.timestampLessThanOrEqualTo,
      "commitMessage": listCommitsRequest.commitMessage,
      "authorName": listCommitsRequest.authorName,
      "limit": listCommitsRequest.limit,
      "page": listCommitsRequest.page
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listCommitsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listCommitsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/repositories/{repositoryId}/commits",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListCommitsResponse>{},
        body: await response.json(),
        bodyKey: "repositoryCommitCollection",
        bodyModel: model.RepositoryCommitCollection,
        type: "model.RepositoryCommitCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of connections.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListConnectionsRequest
   * @return ListConnectionsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/ListConnections.ts.html |here} to see how to use ListConnections API.
   */
  public async listConnections(
    listConnectionsRequest: requests.ListConnectionsRequest
  ): Promise<responses.ListConnectionsResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#listConnections.");
    const operationName = "listConnections";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/ConnectionCollection/ListConnections";
    const pathParams = {};

    const queryParams = {
      "id": listConnectionsRequest.id,
      "projectId": listConnectionsRequest.projectId,
      "compartmentId": listConnectionsRequest.compartmentId,
      "lifecycleState": listConnectionsRequest.lifecycleState,
      "displayName": listConnectionsRequest.displayName,
      "connectionType": listConnectionsRequest.connectionType,
      "limit": listConnectionsRequest.limit,
      "page": listConnectionsRequest.page,
      "sortOrder": listConnectionsRequest.sortOrder,
      "sortBy": listConnectionsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listConnectionsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listConnectionsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/connections",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListConnectionsResponse>{},
        body: await response.json(),
        bodyKey: "connectionCollection",
        bodyModel: model.ConnectionCollection,
        type: "model.ConnectionCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of deployment artifacts.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDeployArtifactsRequest
   * @return ListDeployArtifactsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/ListDeployArtifacts.ts.html |here} to see how to use ListDeployArtifacts API.
   */
  public async listDeployArtifacts(
    listDeployArtifactsRequest: requests.ListDeployArtifactsRequest
  ): Promise<responses.ListDeployArtifactsResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#listDeployArtifacts.");
    const operationName = "listDeployArtifacts";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/DeployArtifactSummary/ListDeployArtifacts";
    const pathParams = {};

    const queryParams = {
      "id": listDeployArtifactsRequest.id,
      "projectId": listDeployArtifactsRequest.projectId,
      "compartmentId": listDeployArtifactsRequest.compartmentId,
      "lifecycleState": listDeployArtifactsRequest.lifecycleState,
      "displayName": listDeployArtifactsRequest.displayName,
      "limit": listDeployArtifactsRequest.limit,
      "page": listDeployArtifactsRequest.page,
      "sortOrder": listDeployArtifactsRequest.sortOrder,
      "sortBy": listDeployArtifactsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDeployArtifactsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDeployArtifactsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployArtifacts",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDeployArtifactsResponse>{},
        body: await response.json(),
        bodyKey: "deployArtifactCollection",
        bodyModel: model.DeployArtifactCollection,
        type: "model.DeployArtifactCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of deployment environments.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDeployEnvironmentsRequest
   * @return ListDeployEnvironmentsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/ListDeployEnvironments.ts.html |here} to see how to use ListDeployEnvironments API.
   */
  public async listDeployEnvironments(
    listDeployEnvironmentsRequest: requests.ListDeployEnvironmentsRequest
  ): Promise<responses.ListDeployEnvironmentsResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#listDeployEnvironments.");
    const operationName = "listDeployEnvironments";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/DeployEnvironmentSummary/ListDeployEnvironments";
    const pathParams = {};

    const queryParams = {
      "projectId": listDeployEnvironmentsRequest.projectId,
      "compartmentId": listDeployEnvironmentsRequest.compartmentId,
      "id": listDeployEnvironmentsRequest.id,
      "lifecycleState": listDeployEnvironmentsRequest.lifecycleState,
      "displayName": listDeployEnvironmentsRequest.displayName,
      "limit": listDeployEnvironmentsRequest.limit,
      "page": listDeployEnvironmentsRequest.page,
      "sortOrder": listDeployEnvironmentsRequest.sortOrder,
      "sortBy": listDeployEnvironmentsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDeployEnvironmentsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDeployEnvironmentsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployEnvironments",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDeployEnvironmentsResponse>{},
        body: await response.json(),
        bodyKey: "deployEnvironmentCollection",
        bodyModel: model.DeployEnvironmentCollection,
        type: "model.DeployEnvironmentCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of deployment pipelines.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDeployPipelinesRequest
   * @return ListDeployPipelinesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/ListDeployPipelines.ts.html |here} to see how to use ListDeployPipelines API.
   */
  public async listDeployPipelines(
    listDeployPipelinesRequest: requests.ListDeployPipelinesRequest
  ): Promise<responses.ListDeployPipelinesResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#listDeployPipelines.");
    const operationName = "listDeployPipelines";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/DeployPipelineSummary/ListDeployPipelines";
    const pathParams = {};

    const queryParams = {
      "id": listDeployPipelinesRequest.id,
      "projectId": listDeployPipelinesRequest.projectId,
      "compartmentId": listDeployPipelinesRequest.compartmentId,
      "lifecycleState": listDeployPipelinesRequest.lifecycleState,
      "displayName": listDeployPipelinesRequest.displayName,
      "limit": listDeployPipelinesRequest.limit,
      "page": listDeployPipelinesRequest.page,
      "sortOrder": listDeployPipelinesRequest.sortOrder,
      "sortBy": listDeployPipelinesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDeployPipelinesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDeployPipelinesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployPipelines",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDeployPipelinesResponse>{},
        body: await response.json(),
        bodyKey: "deployPipelineCollection",
        bodyModel: model.DeployPipelineCollection,
        type: "model.DeployPipelineCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a list of deployment stages.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDeployStagesRequest
   * @return ListDeployStagesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/ListDeployStages.ts.html |here} to see how to use ListDeployStages API.
   */
  public async listDeployStages(
    listDeployStagesRequest: requests.ListDeployStagesRequest
  ): Promise<responses.ListDeployStagesResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#listDeployStages.");
    const operationName = "listDeployStages";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/DeployStageSummary/ListDeployStages";
    const pathParams = {};

    const queryParams = {
      "id": listDeployStagesRequest.id,
      "deployPipelineId": listDeployStagesRequest.deployPipelineId,
      "compartmentId": listDeployStagesRequest.compartmentId,
      "lifecycleState": listDeployStagesRequest.lifecycleState,
      "displayName": listDeployStagesRequest.displayName,
      "limit": listDeployStagesRequest.limit,
      "page": listDeployStagesRequest.page,
      "sortOrder": listDeployStagesRequest.sortOrder,
      "sortBy": listDeployStagesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDeployStagesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDeployStagesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployStages",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDeployStagesResponse>{},
        body: await response.json(),
        bodyKey: "deployStageCollection",
        bodyModel: model.DeployStageCollection,
        type: "model.DeployStageCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of deployments.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListDeploymentsRequest
   * @return ListDeploymentsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/ListDeployments.ts.html |here} to see how to use ListDeployments API.
   */
  public async listDeployments(
    listDeploymentsRequest: requests.ListDeploymentsRequest
  ): Promise<responses.ListDeploymentsResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#listDeployments.");
    const operationName = "listDeployments";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/DeploymentSummary/ListDeployments";
    const pathParams = {};

    const queryParams = {
      "deployPipelineId": listDeploymentsRequest.deployPipelineId,
      "id": listDeploymentsRequest.id,
      "compartmentId": listDeploymentsRequest.compartmentId,
      "projectId": listDeploymentsRequest.projectId,
      "lifecycleState": listDeploymentsRequest.lifecycleState,
      "displayName": listDeploymentsRequest.displayName,
      "limit": listDeploymentsRequest.limit,
      "page": listDeploymentsRequest.page,
      "sortOrder": listDeploymentsRequest.sortOrder,
      "sortBy": listDeploymentsRequest.sortBy,
      "timeCreatedLessThan": listDeploymentsRequest.timeCreatedLessThan,
      "timeCreatedGreaterThanOrEqualTo": listDeploymentsRequest.timeCreatedGreaterThanOrEqualTo
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listDeploymentsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listDeploymentsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListDeploymentsResponse>{},
        body: await response.json(),
        bodyKey: "deploymentCollection",
        bodyModel: model.DeploymentCollection,
        type: "model.DeploymentCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of mirror entry in history within 30 days.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListMirrorRecordsRequest
   * @return ListMirrorRecordsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/ListMirrorRecords.ts.html |here} to see how to use ListMirrorRecords API.
   */
  public async listMirrorRecords(
    listMirrorRecordsRequest: requests.ListMirrorRecordsRequest
  ): Promise<responses.ListMirrorRecordsResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#listMirrorRecords.");
    const operationName = "listMirrorRecords";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Repository/ListMirrorRecords";
    const pathParams = {
      "{repositoryId}": listMirrorRecordsRequest.repositoryId
    };

    const queryParams = {
      "limit": listMirrorRecordsRequest.limit,
      "page": listMirrorRecordsRequest.page,
      "sortOrder": listMirrorRecordsRequest.sortOrder
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listMirrorRecordsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listMirrorRecordsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/repositories/{repositoryId}/mirrorRecords",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListMirrorRecordsResponse>{},
        body: await response.json(),
        bodyKey: "repositoryMirrorRecordCollection",
        bodyModel: model.RepositoryMirrorRecordCollection,
        type: "model.RepositoryMirrorRecordCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Retrieves a list of files and directories in a repository.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListPathsRequest
   * @return ListPathsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/ListPaths.ts.html |here} to see how to use ListPaths API.
   */
  public async listPaths(
    listPathsRequest: requests.ListPathsRequest
  ): Promise<responses.ListPathsResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#listPaths.");
    const operationName = "listPaths";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/RepositoryPathSummary/ListPaths";
    const pathParams = {
      "{repositoryId}": listPathsRequest.repositoryId
    };

    const queryParams = {
      "ref": listPathsRequest.ref,
      "pathsInSubtree": listPathsRequest.pathsInSubtree,
      "folderPath": listPathsRequest.folderPath,
      "limit": listPathsRequest.limit,
      "page": listPathsRequest.page,
      "displayName": listPathsRequest.displayName,
      "sortOrder": listPathsRequest.sortOrder,
      "sortBy": listPathsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listPathsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listPathsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/repositories/{repositoryId}/paths",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListPathsResponse>{},
        body: await response.json(),
        bodyKey: "repositoryPathCollection",
        bodyModel: model.RepositoryPathCollection,
        type: "model.RepositoryPathCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of projects.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListProjectsRequest
   * @return ListProjectsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/ListProjects.ts.html |here} to see how to use ListProjects API.
   */
  public async listProjects(
    listProjectsRequest: requests.ListProjectsRequest
  ): Promise<responses.ListProjectsResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#listProjects.");
    const operationName = "listProjects";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/ProjectSummary/ListProjects";
    const pathParams = {};

    const queryParams = {
      "id": listProjectsRequest.id,
      "compartmentId": listProjectsRequest.compartmentId,
      "lifecycleState": listProjectsRequest.lifecycleState,
      "name": listProjectsRequest.name,
      "limit": listProjectsRequest.limit,
      "page": listProjectsRequest.page,
      "sortOrder": listProjectsRequest.sortOrder,
      "sortBy": listProjectsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listProjectsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listProjectsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/projects",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListProjectsResponse>{},
        body: await response.json(),
        bodyKey: "projectCollection",
        bodyModel: model.ProjectCollection,
        type: "model.ProjectCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of references.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListRefsRequest
   * @return ListRefsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/ListRefs.ts.html |here} to see how to use ListRefs API.
   */
  public async listRefs(
    listRefsRequest: requests.ListRefsRequest
  ): Promise<responses.ListRefsResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#listRefs.");
    const operationName = "listRefs";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/RepositoryRef/ListRefs";
    const pathParams = {
      "{repositoryId}": listRefsRequest.repositoryId
    };

    const queryParams = {
      "refType": listRefsRequest.refType,
      "commitId": listRefsRequest.commitId,
      "limit": listRefsRequest.limit,
      "page": listRefsRequest.page,
      "refName": listRefsRequest.refName,
      "sortOrder": listRefsRequest.sortOrder,
      "sortBy": listRefsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listRefsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listRefsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/repositories/{repositoryId}/refs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListRefsResponse>{},
        body: await response.json(),
        bodyKey: "repositoryRefCollection",
        bodyModel: model.RepositoryRefCollection,
        type: "model.RepositoryRefCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of repositories given a compartment ID or a project ID.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListRepositoriesRequest
   * @return ListRepositoriesResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/ListRepositories.ts.html |here} to see how to use ListRepositories API.
   */
  public async listRepositories(
    listRepositoriesRequest: requests.ListRepositoriesRequest
  ): Promise<responses.ListRepositoriesResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#listRepositories.");
    const operationName = "listRepositories";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Repository/ListRepositories";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listRepositoriesRequest.compartmentId,
      "projectId": listRepositoriesRequest.projectId,
      "repositoryId": listRepositoriesRequest.repositoryId,
      "lifecycleState": listRepositoriesRequest.lifecycleState,
      "name": listRepositoriesRequest.name,
      "limit": listRepositoriesRequest.limit,
      "page": listRepositoriesRequest.page,
      "sortOrder": listRepositoriesRequest.sortOrder,
      "sortBy": listRepositoriesRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listRepositoriesRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listRepositoriesRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/repositories",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListRepositoriesResponse>{},
        body: await response.json(),
        bodyKey: "repositoryCollection",
        bodyModel: model.RepositoryCollection,
        type: "model.RepositoryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of triggers.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListTriggersRequest
   * @return ListTriggersResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/ListTriggers.ts.html |here} to see how to use ListTriggers API.
   */
  public async listTriggers(
    listTriggersRequest: requests.ListTriggersRequest
  ): Promise<responses.ListTriggersResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#listTriggers.");
    const operationName = "listTriggers";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/TriggerCollection/ListTriggers";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listTriggersRequest.compartmentId,
      "projectId": listTriggersRequest.projectId,
      "lifecycleState": listTriggersRequest.lifecycleState,
      "displayName": listTriggersRequest.displayName,
      "id": listTriggersRequest.id,
      "limit": listTriggersRequest.limit,
      "page": listTriggersRequest.page,
      "sortOrder": listTriggersRequest.sortOrder,
      "sortBy": listTriggersRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listTriggersRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listTriggersRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/triggers",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListTriggersResponse>{},
        body: await response.json(),
        bodyKey: "triggerCollection",
        bodyModel: model.TriggerCollection,
        type: "model.TriggerCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of errors for a given work request.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestErrorsRequest
   * @return ListWorkRequestErrorsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
   */
  public async listWorkRequestErrors(
    listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest
  ): Promise<responses.ListWorkRequestErrorsResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#listWorkRequestErrors.");
    const operationName = "listWorkRequestErrors";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/WorkRequestError/ListWorkRequestErrors";
    const pathParams = {
      "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestErrorsRequest.page,
      "limit": listWorkRequestErrorsRequest.limit,
      "sortOrder": listWorkRequestErrorsRequest.sortOrder,
      "sortBy": listWorkRequestErrorsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestErrorsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/errors",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestErrorsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestErrorCollection",
        bodyModel: model.WorkRequestErrorCollection,
        type: "model.WorkRequestErrorCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Returns a list of logs for a given work request.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestLogsRequest
   * @return ListWorkRequestLogsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
   */
  public async listWorkRequestLogs(
    listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest
  ): Promise<responses.ListWorkRequestLogsResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#listWorkRequestLogs.");
    const operationName = "listWorkRequestLogs";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/WorkRequestLogEntry/ListWorkRequestLogs";
    const pathParams = {
      "{workRequestId}": listWorkRequestLogsRequest.workRequestId
    };

    const queryParams = {
      "page": listWorkRequestLogsRequest.page,
      "limit": listWorkRequestLogsRequest.limit,
      "sortOrder": listWorkRequestLogsRequest.sortOrder,
      "sortBy": listWorkRequestLogsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestLogsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestLogsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests/{workRequestId}/logs",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestLogsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestLogEntryCollection",
        bodyModel: model.WorkRequestLogEntryCollection,
        type: "model.WorkRequestLogEntryCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Lists the work requests in a compartment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param ListWorkRequestsRequest
   * @return ListWorkRequestsResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
   */
  public async listWorkRequests(
    listWorkRequestsRequest: requests.ListWorkRequestsRequest
  ): Promise<responses.ListWorkRequestsResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#listWorkRequests.");
    const operationName = "listWorkRequests";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/WorkRequest/ListWorkRequests";
    const pathParams = {};

    const queryParams = {
      "compartmentId": listWorkRequestsRequest.compartmentId,
      "workRequestId": listWorkRequestsRequest.workRequestId,
      "status": listWorkRequestsRequest.status,
      "resourceId": listWorkRequestsRequest.resourceId,
      "page": listWorkRequestsRequest.page,
      "limit": listWorkRequestsRequest.limit,
      "sortOrder": listWorkRequestsRequest.sortOrder,
      "sortBy": listWorkRequestsRequest.sortBy
    };

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "opc-request-id": listWorkRequestsRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      listWorkRequestsRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/workRequests",
      method: "GET",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.ListWorkRequestsResponse>{},
        body: await response.json(),
        bodyKey: "workRequestCollection",
        bodyModel: model.WorkRequestCollection,
        type: "model.WorkRequestCollection",
        responseHeaders: [
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-next-page"),
            key: "opcNextPage",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Synchronize a mirrored repository to the latest version from external providers.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param MirrorRepositoryRequest
   * @return MirrorRepositoryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/MirrorRepository.ts.html |here} to see how to use MirrorRepository API.
   */
  public async mirrorRepository(
    mirrorRepositoryRequest: requests.MirrorRepositoryRequest
  ): Promise<responses.MirrorRepositoryResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#mirrorRepository.");
    const operationName = "mirrorRepository";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Repository/MirrorRepository";
    const pathParams = {
      "{repositoryId}": mirrorRepositoryRequest.repositoryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": mirrorRepositoryRequest.ifMatch,
      "opc-request-id": mirrorRepositoryRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      mirrorRepositoryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/repositories/{repositoryId}/actions/mirror",
      method: "POST",
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.MirrorRepositoryResponse>{},
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Creates a new reference or updates an existing one.
   *
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param PutRepositoryRefRequest
   * @return PutRepositoryRefResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/PutRepositoryRef.ts.html |here} to see how to use PutRepositoryRef API.
   */
  public async putRepositoryRef(
    putRepositoryRefRequest: requests.PutRepositoryRefRequest
  ): Promise<responses.PutRepositoryRefResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#putRepositoryRef.");
    const operationName = "putRepositoryRef";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Repository/PutRepositoryRef";
    const pathParams = {
      "{repositoryId}": putRepositoryRefRequest.repositoryId,
      "{refName}": putRepositoryRefRequest.refName
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": putRepositoryRefRequest.ifMatch,
      "opc-retry-token": putRepositoryRefRequest.opcRetryToken,
      "opc-request-id": putRepositoryRefRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      putRepositoryRefRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/repositories/{repositoryId}/refs/{refName}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        putRepositoryRefRequest.putRepositoryRefDetails,
        "PutRepositoryRefDetails",
        model.PutRepositoryRefDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.PutRepositoryRefResponse>{},
        body: await response.json(),
        bodyKey: "repositoryRef",
        bodyModel: model.RepositoryRef,
        type: "model.RepositoryRef",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the build pipeline.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateBuildPipelineRequest
   * @return UpdateBuildPipelineResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/UpdateBuildPipeline.ts.html |here} to see how to use UpdateBuildPipeline API.
   */
  public async updateBuildPipeline(
    updateBuildPipelineRequest: requests.UpdateBuildPipelineRequest
  ): Promise<responses.UpdateBuildPipelineResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#updateBuildPipeline.");
    const operationName = "updateBuildPipeline";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/BuildPipeline/UpdateBuildPipeline";
    const pathParams = {
      "{buildPipelineId}": updateBuildPipelineRequest.buildPipelineId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateBuildPipelineRequest.ifMatch,
      "opc-request-id": updateBuildPipelineRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateBuildPipelineRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/buildPipelines/{buildPipelineId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateBuildPipelineRequest.updateBuildPipelineDetails,
        "UpdateBuildPipelineDetails",
        model.UpdateBuildPipelineDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateBuildPipelineResponse>{},
        body: await response.json(),
        bodyKey: "buildPipeline",
        bodyModel: model.BuildPipeline,
        type: "model.BuildPipeline",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the stage based on the stage ID provided in the request.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateBuildPipelineStageRequest
   * @return UpdateBuildPipelineStageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/UpdateBuildPipelineStage.ts.html |here} to see how to use UpdateBuildPipelineStage API.
   */
  public async updateBuildPipelineStage(
    updateBuildPipelineStageRequest: requests.UpdateBuildPipelineStageRequest
  ): Promise<responses.UpdateBuildPipelineStageResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#updateBuildPipelineStage.");
    const operationName = "updateBuildPipelineStage";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/BuildPipelineStage/UpdateBuildPipelineStage";
    const pathParams = {
      "{buildPipelineStageId}": updateBuildPipelineStageRequest.buildPipelineStageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateBuildPipelineStageRequest.ifMatch,
      "opc-request-id": updateBuildPipelineStageRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateBuildPipelineStageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/buildPipelineStages/{buildPipelineStageId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateBuildPipelineStageRequest.updateBuildPipelineStageDetails,
        "UpdateBuildPipelineStageDetails",
        model.UpdateBuildPipelineStageDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateBuildPipelineStageResponse>{},
        body: await response.json(),
        bodyKey: "buildPipelineStage",
        bodyModel: model.BuildPipelineStage,
        type: "model.BuildPipelineStage",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the build run.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateBuildRunRequest
   * @return UpdateBuildRunResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/UpdateBuildRun.ts.html |here} to see how to use UpdateBuildRun API.
   */
  public async updateBuildRun(
    updateBuildRunRequest: requests.UpdateBuildRunRequest
  ): Promise<responses.UpdateBuildRunResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#updateBuildRun.");
    const operationName = "updateBuildRun";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/BuildRun/UpdateBuildRun";
    const pathParams = {
      "{buildRunId}": updateBuildRunRequest.buildRunId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateBuildRunRequest.ifMatch,
      "opc-request-id": updateBuildRunRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateBuildRunRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/buildRuns/{buildRunId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateBuildRunRequest.updateBuildRunDetails,
        "UpdateBuildRunDetails",
        model.UpdateBuildRunDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateBuildRunResponse>{},
        body: await response.json(),
        bodyKey: "buildRun",
        bodyModel: model.BuildRun,
        type: "model.BuildRun",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the connection.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateConnectionRequest
   * @return UpdateConnectionResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/UpdateConnection.ts.html |here} to see how to use UpdateConnection API.
   */
  public async updateConnection(
    updateConnectionRequest: requests.UpdateConnectionRequest
  ): Promise<responses.UpdateConnectionResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#updateConnection.");
    const operationName = "updateConnection";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Connection/UpdateConnection";
    const pathParams = {
      "{connectionId}": updateConnectionRequest.connectionId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateConnectionRequest.ifMatch,
      "opc-request-id": updateConnectionRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateConnectionRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/connections/{connectionId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateConnectionRequest.updateConnectionDetails,
        "UpdateConnectionDetails",
        model.UpdateConnectionDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateConnectionResponse>{},
        body: await response.json(),
        bodyKey: "connection",
        bodyModel: model.Connection,
        type: "model.Connection",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the deployment artifact.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateDeployArtifactRequest
   * @return UpdateDeployArtifactResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/UpdateDeployArtifact.ts.html |here} to see how to use UpdateDeployArtifact API.
   */
  public async updateDeployArtifact(
    updateDeployArtifactRequest: requests.UpdateDeployArtifactRequest
  ): Promise<responses.UpdateDeployArtifactResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#updateDeployArtifact.");
    const operationName = "updateDeployArtifact";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/DeployArtifact/UpdateDeployArtifact";
    const pathParams = {
      "{deployArtifactId}": updateDeployArtifactRequest.deployArtifactId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDeployArtifactRequest.ifMatch,
      "opc-request-id": updateDeployArtifactRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDeployArtifactRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployArtifacts/{deployArtifactId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDeployArtifactRequest.updateDeployArtifactDetails,
        "UpdateDeployArtifactDetails",
        model.UpdateDeployArtifactDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDeployArtifactResponse>{},
        body: await response.json(),
        bodyKey: "deployArtifact",
        bodyModel: model.DeployArtifact,
        type: "model.DeployArtifact",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the deployment environment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateDeployEnvironmentRequest
   * @return UpdateDeployEnvironmentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/UpdateDeployEnvironment.ts.html |here} to see how to use UpdateDeployEnvironment API.
   */
  public async updateDeployEnvironment(
    updateDeployEnvironmentRequest: requests.UpdateDeployEnvironmentRequest
  ): Promise<responses.UpdateDeployEnvironmentResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#updateDeployEnvironment.");
    const operationName = "updateDeployEnvironment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/DeployEnvironment/UpdateDeployEnvironment";
    const pathParams = {
      "{deployEnvironmentId}": updateDeployEnvironmentRequest.deployEnvironmentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDeployEnvironmentRequest.ifMatch,
      "opc-request-id": updateDeployEnvironmentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDeployEnvironmentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployEnvironments/{deployEnvironmentId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDeployEnvironmentRequest.updateDeployEnvironmentDetails,
        "UpdateDeployEnvironmentDetails",
        model.UpdateDeployEnvironmentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDeployEnvironmentResponse>{},
        body: await response.json(),
        bodyKey: "deployEnvironment",
        bodyModel: model.DeployEnvironment,
        type: "model.DeployEnvironment",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the deployment pipeline.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateDeployPipelineRequest
   * @return UpdateDeployPipelineResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/UpdateDeployPipeline.ts.html |here} to see how to use UpdateDeployPipeline API.
   */
  public async updateDeployPipeline(
    updateDeployPipelineRequest: requests.UpdateDeployPipelineRequest
  ): Promise<responses.UpdateDeployPipelineResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#updateDeployPipeline.");
    const operationName = "updateDeployPipeline";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/DeployPipeline/UpdateDeployPipeline";
    const pathParams = {
      "{deployPipelineId}": updateDeployPipelineRequest.deployPipelineId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDeployPipelineRequest.ifMatch,
      "opc-request-id": updateDeployPipelineRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDeployPipelineRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployPipelines/{deployPipelineId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDeployPipelineRequest.updateDeployPipelineDetails,
        "UpdateDeployPipelineDetails",
        model.UpdateDeployPipelineDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDeployPipelineResponse>{},
        body: await response.json(),
        bodyKey: "deployPipeline",
        bodyModel: model.DeployPipeline,
        type: "model.DeployPipeline",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the deployment stage.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateDeployStageRequest
   * @return UpdateDeployStageResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/UpdateDeployStage.ts.html |here} to see how to use UpdateDeployStage API.
   */
  public async updateDeployStage(
    updateDeployStageRequest: requests.UpdateDeployStageRequest
  ): Promise<responses.UpdateDeployStageResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#updateDeployStage.");
    const operationName = "updateDeployStage";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/DeployStage/UpdateDeployStage";
    const pathParams = {
      "{deployStageId}": updateDeployStageRequest.deployStageId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDeployStageRequest.ifMatch,
      "opc-request-id": updateDeployStageRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDeployStageRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployStages/{deployStageId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDeployStageRequest.updateDeployStageDetails,
        "UpdateDeployStageDetails",
        model.UpdateDeployStageDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDeployStageResponse>{},
        body: await response.json(),
        bodyKey: "deployStage",
        bodyModel: model.DeployStage,
        type: "model.DeployStage",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the deployment.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateDeploymentRequest
   * @return UpdateDeploymentResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/UpdateDeployment.ts.html |here} to see how to use UpdateDeployment API.
   */
  public async updateDeployment(
    updateDeploymentRequest: requests.UpdateDeploymentRequest
  ): Promise<responses.UpdateDeploymentResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#updateDeployment.");
    const operationName = "updateDeployment";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Deployment/UpdateDeployment";
    const pathParams = {
      "{deploymentId}": updateDeploymentRequest.deploymentId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateDeploymentRequest.ifMatch,
      "opc-request-id": updateDeploymentRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateDeploymentRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/deployments/{deploymentId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateDeploymentRequest.updateDeploymentDetails,
        "UpdateDeploymentDetails",
        model.UpdateDeploymentDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateDeploymentResponse>{},
        body: await response.json(),
        bodyKey: "deployment",
        bodyModel: model.Deployment,
        type: "model.Deployment",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the project.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateProjectRequest
   * @return UpdateProjectResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/UpdateProject.ts.html |here} to see how to use UpdateProject API.
   */
  public async updateProject(
    updateProjectRequest: requests.UpdateProjectRequest
  ): Promise<responses.UpdateProjectResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#updateProject.");
    const operationName = "updateProject";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Project/UpdateProject";
    const pathParams = {
      "{projectId}": updateProjectRequest.projectId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateProjectRequest.ifMatch,
      "opc-request-id": updateProjectRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateProjectRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/projects/{projectId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateProjectRequest.updateProjectDetails,
        "UpdateProjectDetails",
        model.UpdateProjectDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateProjectResponse>{},
        body: await response.json(),
        bodyKey: "project",
        bodyModel: model.Project,
        type: "model.Project",
        responseHeaders: [
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the repository.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateRepositoryRequest
   * @return UpdateRepositoryResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/UpdateRepository.ts.html |here} to see how to use UpdateRepository API.
   */
  public async updateRepository(
    updateRepositoryRequest: requests.UpdateRepositoryRequest
  ): Promise<responses.UpdateRepositoryResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#updateRepository.");
    const operationName = "updateRepository";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Repository/UpdateRepository";
    const pathParams = {
      "{repositoryId}": updateRepositoryRequest.repositoryId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateRepositoryRequest.ifMatch,
      "opc-request-id": updateRepositoryRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateRepositoryRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/repositories/{repositoryId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateRepositoryRequest.updateRepositoryDetails,
        "UpdateRepositoryDetails",
        model.UpdateRepositoryDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateRepositoryResponse>{},
        body: await response.json(),
        bodyKey: "repository",
        bodyModel: model.Repository,
        type: "model.Repository",
        responseHeaders: [
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }

  /**
   * Updates the trigger.
   * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
   * @param UpdateTriggerRequest
   * @return UpdateTriggerResponse
   * @throws OciError when an error occurs
   * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/latest/devops/UpdateTrigger.ts.html |here} to see how to use UpdateTrigger API.
   */
  public async updateTrigger(
    updateTriggerRequest: requests.UpdateTriggerRequest
  ): Promise<responses.UpdateTriggerResponse> {
    if (this.logger) this.logger.debug("Calling operation DevopsClient#updateTrigger.");
    const operationName = "updateTrigger";
    const apiReferenceLink =
      "https://docs.oracle.com/iaas/api/#/en/devops/20210630/Trigger/UpdateTrigger";
    const pathParams = {
      "{triggerId}": updateTriggerRequest.triggerId
    };

    const queryParams = {};

    let headerParams = {
      "Content-Type": common.Constants.APPLICATION_JSON,
      "if-match": updateTriggerRequest.ifMatch,
      "opc-request-id": updateTriggerRequest.opcRequestId
    };

    const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
    const retrier = GenericRetrier.createPreferredRetrier(
      this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined,
      updateTriggerRequest.retryConfiguration,
      specRetryConfiguration
    );
    if (this.logger) retrier.logger = this.logger;
    const request = await composeRequest({
      baseEndpoint: this._endpoint,
      defaultHeaders: this._defaultHeaders,
      path: "/triggers/{triggerId}",
      method: "PUT",
      bodyContent: common.ObjectSerializer.serialize(
        updateTriggerRequest.updateTriggerDetails,
        "UpdateTriggerDetails",
        model.UpdateTriggerDetails.getJsonObj
      ),
      pathParams: pathParams,
      headerParams: headerParams,
      queryParams: queryParams
    });
    try {
      const response = await retrier.makeServiceCall(
        this._httpClient,
        request,
        this.targetService,
        operationName,
        apiReferenceLink
      );
      const sdkResponse = composeResponse({
        responseObject: <responses.UpdateTriggerResponse>{},
        body: await response.json(),
        bodyKey: "trigger",
        bodyModel: model.Trigger,
        type: "model.Trigger",
        responseHeaders: [
          {
            value: response.headers.get("etag"),
            key: "etag",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-work-request-id"),
            key: "opcWorkRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("opc-request-id"),
            key: "opcRequestId",
            dataType: "string"
          },
          {
            value: response.headers.get("location"),
            key: "location",
            dataType: "string"
          }
        ]
      });

      return sdkResponse;
    } catch (err) {
      throw err;
    }
  }
}
