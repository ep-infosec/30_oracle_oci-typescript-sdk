/**
 * Container Instance API
 * A description of the Container Instance API
 * OpenAPI spec version: 20210415
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
* A ContainerInstance for hosting Containers.
* <p>
If this ContainerInstance is DELETED, the record will remain visible for a short period
* of time before being permanently removed.
* 
*/
export interface ContainerInstance {
  /**
   * Unique identifier that is immutable on creation
   */
  "id": string;
  /**
   * Display name for the ContainerInstance. Can be renamed.
   */
  "displayName": string;
  /**
   * Compartment Identifier
   */
  "compartmentId": string;
  /**
   * Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
   * Example: `{\"bar-key\": \"value\"}`
   *
   */
  "freeformTags"?: { [key: string]: string };
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace.
   * Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`
   *
   */
  "definedTags"?: { [key: string]: { [key: string]: any } };
  /**
   * Usage of system tag keys. These predefined keys are scoped to namespaces.
   * Example: `{\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}`
   *
   */
  "systemTags"?: { [key: string]: { [key: string]: any } };
  /**
   * Availability Domain where the ContainerInstance is running.
   */
  "availabilityDomain": string;
  /**
   * Fault Domain where the ContainerInstance is running.
   */
  "faultDomain"?: string;
  /**
   * The current state of the ContainerInstance.
   */
  "lifecycleState": ContainerInstance.LifecycleState;
  /**
   * A message describing the current state in more detail. For example, can be used to provide
   * actionable information for a resource in Failed state.
   *
   */
  "lifecycleDetails"?: string;
  /**
   * A Volume represents a directory with data that is accessible across multiple containers in a
   * ContainerInstance.
   *
   */
  "volumes"?: Array<model.ContainerVolume>;
  /**
   * The number of volumes that attached to this Instance Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "volumeCount"?: number;
  /**
   * The Containers on this Instance
   */
  "containers": Array<model.ContainerInstanceContainer>;
  /**
   * The number of containers on this Instance Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "containerCount": number;
  /**
   * The time the the ContainerInstance was created. An RFC3339 formatted datetime string
   */
  "timeCreated": Date;
  /**
   * The time the ContainerInstance was updated. An RFC3339 formatted datetime string
   */
  "timeUpdated"?: Date;
  /**
   * The shape of the Container Instance. The shape determines the resources available to the Container Instance.
   */
  "shape": string;
  "shapeConfig": model.ContainerInstanceShapeConfig;
  /**
   * The virtual networks available to containers running on this Container Instance.
   */
  "vnics": Array<model.ContainerVnic>;
  "dnsConfig"?: model.ContainerDnsConfig;
  /**
   * Duration in seconds processes within a Container have to gracefully terminate. This applies whenever a Container must be halted, such as when the Container Instance is deleted. Processes will first be sent a termination signal. After this timeout is reached, the processes will be sent a termination signal. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "gracefulShutdownTimeoutInSeconds"?: number;
  /**
   * The image pull secrets for accessing private registry to pull images for containers
   */
  "imagePullSecrets"?: Array<model.ImagePullSecret>;
  /**
   * The container restart policy is applied for all containers in container instance.
   */
  "containerRestartPolicy": ContainerInstance.ContainerRestartPolicy;
}

export namespace ContainerInstance {
  export enum LifecycleState {
    Creating = "CREATING",
    Updating = "UPDATING",
    Active = "ACTIVE",
    Inactive = "INACTIVE",
    Deleting = "DELETING",
    Deleted = "DELETED",
    Failed = "FAILED",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export enum ContainerRestartPolicy {
    Always = "ALWAYS",
    Never = "NEVER",
    OnFailure = "ON_FAILURE",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: ContainerInstance): object {
    const jsonObj = {
      ...obj,
      ...{
        "volumes": obj.volumes
          ? obj.volumes.map(item => {
              return model.ContainerVolume.getJsonObj(item);
            })
          : undefined,

        "containers": obj.containers
          ? obj.containers.map(item => {
              return model.ContainerInstanceContainer.getJsonObj(item);
            })
          : undefined,

        "shapeConfig": obj.shapeConfig
          ? model.ContainerInstanceShapeConfig.getJsonObj(obj.shapeConfig)
          : undefined,
        "vnics": obj.vnics
          ? obj.vnics.map(item => {
              return model.ContainerVnic.getJsonObj(item);
            })
          : undefined,
        "dnsConfig": obj.dnsConfig ? model.ContainerDnsConfig.getJsonObj(obj.dnsConfig) : undefined,

        "imagePullSecrets": obj.imagePullSecrets
          ? obj.imagePullSecrets.map(item => {
              return model.ImagePullSecret.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: ContainerInstance): object {
    const jsonObj = {
      ...obj,
      ...{
        "volumes": obj.volumes
          ? obj.volumes.map(item => {
              return model.ContainerVolume.getDeserializedJsonObj(item);
            })
          : undefined,

        "containers": obj.containers
          ? obj.containers.map(item => {
              return model.ContainerInstanceContainer.getDeserializedJsonObj(item);
            })
          : undefined,

        "shapeConfig": obj.shapeConfig
          ? model.ContainerInstanceShapeConfig.getDeserializedJsonObj(obj.shapeConfig)
          : undefined,
        "vnics": obj.vnics
          ? obj.vnics.map(item => {
              return model.ContainerVnic.getDeserializedJsonObj(item);
            })
          : undefined,
        "dnsConfig": obj.dnsConfig
          ? model.ContainerDnsConfig.getDeserializedJsonObj(obj.dnsConfig)
          : undefined,

        "imagePullSecrets": obj.imagePullSecrets
          ? obj.imagePullSecrets.map(item => {
              return model.ImagePullSecret.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
