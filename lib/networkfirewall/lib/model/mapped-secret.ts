/**
 * Network Firewall API
 * Use the Network Firewall API to create network firewalls and configure policies that regulates network traffic in and across VCNs.
 * OpenAPI spec version: 20211001
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Mapped secret used on the firewall policy rules.
 */
export interface MappedSecret {
  /**
   * Type of the secrets mapped based on the policy.
   * <p>
   * `SSL_INBOUND_INSPECTION`: For Inbound inspection of SSL traffic.
   *  * `SSL_FORWARD_PROXY`: For forward proxy certificates for SSL inspection.
   *
   */
  "type": MappedSecret.Type;

  "source": string;
}

export namespace MappedSecret {
  export enum Type {
    SslInboundInspection = "SSL_INBOUND_INSPECTION",
    SslForwardProxy = "SSL_FORWARD_PROXY",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: MappedSecret): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "source" in obj && obj.source) {
      switch (obj.source) {
        case "OCI_VAULT":
          return model.VaultMappedSecret.getJsonObj(
            <model.VaultMappedSecret>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.source}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: MappedSecret): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "source" in obj && obj.source) {
      switch (obj.source) {
        case "OCI_VAULT":
          return model.VaultMappedSecret.getDeserializedJsonObj(
            <model.VaultMappedSecret>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.source}`);
      }
    }
    return jsonObj;
  }
}
